// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package uc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type UcService interface {
	// Parameters:
	//  - Head
	//  - Body
	SendUcMessage(head *UcMessageHead, body *UcMessageBody) (r string, err error)
}

type UcServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUcServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UcServiceClient {
	return &UcServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUcServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UcServiceClient {
	return &UcServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Head
//  - Body
func (p *UcServiceClient) SendUcMessage(head *UcMessageHead, body *UcMessageBody) (r string, err error) {
	if err = p.sendSendUcMessage(head, body); err != nil {
		return
	}
	return p.recvSendUcMessage()
}

func (p *UcServiceClient) sendSendUcMessage(head *UcMessageHead, body *UcMessageBody) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SendUcMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendUcMessageArgs{
		Head: head,
		Body: body,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UcServiceClient) recvSendUcMessage() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SendUcMessage failed: out of sequence response")
		return
	}
	result := SendUcMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UcServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UcService
}

func (p *UcServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UcServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UcServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUcServiceProcessor(handler UcService) *UcServiceProcessor {

	self13 := &UcServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self13.processorMap["SendUcMessage"] = &ucServiceProcessorSendUcMessage{handler: handler}
	return self13
}

func (p *UcServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x14.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x14

}

type ucServiceProcessorSendUcMessage struct {
	handler UcService
}

func (p *ucServiceProcessorSendUcMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendUcMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendUcMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendUcMessageResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.SendUcMessage(args.Head, args.Body); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendUcMessage: "+err2.Error())
		oprot.WriteMessageBegin("SendUcMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("SendUcMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SendUcMessageArgs struct {
	Head *UcMessageHead `thrift:"head,1" json:"head"`
	Body *UcMessageBody `thrift:"body,2" json:"body"`
}

func NewSendUcMessageArgs() *SendUcMessageArgs {
	return &SendUcMessageArgs{}
}

var SendUcMessageArgs_Head_DEFAULT *UcMessageHead

func (p *SendUcMessageArgs) GetHead() *UcMessageHead {
	if !p.IsSetHead() {
		return SendUcMessageArgs_Head_DEFAULT
	}
	return p.Head
}

var SendUcMessageArgs_Body_DEFAULT *UcMessageBody

func (p *SendUcMessageArgs) GetBody() *UcMessageBody {
	if !p.IsSetBody() {
		return SendUcMessageArgs_Body_DEFAULT
	}
	return p.Body
}
func (p *SendUcMessageArgs) IsSetHead() bool {
	return p.Head != nil
}

func (p *SendUcMessageArgs) IsSetBody() bool {
	return p.Body != nil
}

func (p *SendUcMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUcMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Head = &UcMessageHead{
		Version: 256,

		ControlPri: 15,
	}
	if err := p.Head.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Head, err)
	}
	return nil
}

func (p *SendUcMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Body = &UcMessageBody{}
	if err := p.Body.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Body, err)
	}
	return nil
}

func (p *SendUcMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUcMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUcMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("head", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:head: %s", p, err)
	}
	if err := p.Head.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Head, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:head: %s", p, err)
	}
	return err
}

func (p *SendUcMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:body: %s", p, err)
	}
	if err := p.Body.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Body, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:body: %s", p, err)
	}
	return err
}

func (p *SendUcMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUcMessageArgs(%+v)", *p)
}

type SendUcMessageResult struct {
	Success *string `thrift:"success,0" json:"success"`
}

func NewSendUcMessageResult() *SendUcMessageResult {
	return &SendUcMessageResult{}
}

var SendUcMessageResult_Success_DEFAULT string

func (p *SendUcMessageResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SendUcMessageResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SendUcMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendUcMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUcMessageResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SendUcMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUcMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUcMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendUcMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUcMessageResult(%+v)", *p)
}
