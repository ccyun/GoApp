// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package uc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type PresenceMessageType int64

const (
	PresenceMessageType_DefaultType PresenceMessageType = 1
)

func (p PresenceMessageType) String() string {
	switch p {
	case PresenceMessageType_DefaultType:
		return "PresenceMessageType_DefaultType"
	}
	return "<UNSET>"
}

func PresenceMessageTypeFromString(s string) (PresenceMessageType, error) {
	switch s {
	case "PresenceMessageType_DefaultType":
		return PresenceMessageType_DefaultType, nil
	}
	return PresenceMessageType(0), fmt.Errorf("not a valid PresenceMessageType string")
}

func PresenceMessageTypePtr(v PresenceMessageType) *PresenceMessageType { return &v }

type PresenceMessageID int64

const (
	PresenceMessageID_DefaultId PresenceMessageID = 1
)

func (p PresenceMessageID) String() string {
	switch p {
	case PresenceMessageID_DefaultId:
		return "PresenceMessageID_DefaultId"
	}
	return "<UNSET>"
}

func PresenceMessageIDFromString(s string) (PresenceMessageID, error) {
	switch s {
	case "PresenceMessageID_DefaultId":
		return PresenceMessageID_DefaultId, nil
	}
	return PresenceMessageID(0), fmt.Errorf("not a valid PresenceMessageID string")
}

func PresenceMessageIDPtr(v PresenceMessageID) *PresenceMessageID { return &v }

type PresenceType int64

const (
	PresenceType_Online        PresenceType = 1
	PresenceType_Busy          PresenceType = 2
	PresenceType_Away          PresenceType = 3
	PresenceType_Meeting       PresenceType = 4
	PresenceType_Offline       PresenceType = 5
	PresenceType_Call          PresenceType = 6
	PresenceType_Meeting_Phone PresenceType = 7
	PresenceType_Meeting_Ctrl  PresenceType = 8
)

func (p PresenceType) String() string {
	switch p {
	case PresenceType_Online:
		return "PresenceType_Online"
	case PresenceType_Busy:
		return "PresenceType_Busy"
	case PresenceType_Away:
		return "PresenceType_Away"
	case PresenceType_Meeting:
		return "PresenceType_Meeting"
	case PresenceType_Offline:
		return "PresenceType_Offline"
	case PresenceType_Call:
		return "PresenceType_Call"
	case PresenceType_Meeting_Phone:
		return "PresenceType_Meeting_Phone"
	case PresenceType_Meeting_Ctrl:
		return "PresenceType_Meeting_Ctrl"
	}
	return "<UNSET>"
}

func PresenceTypeFromString(s string) (PresenceType, error) {
	switch s {
	case "PresenceType_Online":
		return PresenceType_Online, nil
	case "PresenceType_Busy":
		return PresenceType_Busy, nil
	case "PresenceType_Away":
		return PresenceType_Away, nil
	case "PresenceType_Meeting":
		return PresenceType_Meeting, nil
	case "PresenceType_Offline":
		return PresenceType_Offline, nil
	case "PresenceType_Call":
		return PresenceType_Call, nil
	case "PresenceType_Meeting_Phone":
		return PresenceType_Meeting_Phone, nil
	case "PresenceType_Meeting_Ctrl":
		return PresenceType_Meeting_Ctrl, nil
	}
	return PresenceType(0), fmt.Errorf("not a valid PresenceType string")
}

func PresenceTypePtr(v PresenceType) *PresenceType { return &v }

type DeviceType int64

const (
	DeviceType_Iphone     DeviceType = 1
	DeviceType_Android    DeviceType = 2
	DeviceType_PC         DeviceType = 3
	DeviceType_Background DeviceType = 4
	DeviceType_Ipad       DeviceType = 5
	DeviceType_Web        DeviceType = 6
	DeviceType_Mac        DeviceType = 7
)

func (p DeviceType) String() string {
	switch p {
	case DeviceType_Iphone:
		return "DeviceType_Iphone"
	case DeviceType_Android:
		return "DeviceType_Android"
	case DeviceType_PC:
		return "DeviceType_PC"
	case DeviceType_Background:
		return "DeviceType_Background"
	case DeviceType_Ipad:
		return "DeviceType_Ipad"
	case DeviceType_Web:
		return "DeviceType_Web"
	case DeviceType_Mac:
		return "DeviceType_Mac"
	}
	return "<UNSET>"
}

func DeviceTypeFromString(s string) (DeviceType, error) {
	switch s {
	case "DeviceType_Iphone":
		return DeviceType_Iphone, nil
	case "DeviceType_Android":
		return DeviceType_Android, nil
	case "DeviceType_PC":
		return DeviceType_PC, nil
	case "DeviceType_Background":
		return DeviceType_Background, nil
	case "DeviceType_Ipad":
		return DeviceType_Ipad, nil
	case "DeviceType_Web":
		return DeviceType_Web, nil
	case "DeviceType_Mac":
		return DeviceType_Mac, nil
	}
	return DeviceType(0), fmt.Errorf("not a valid DeviceType string")
}

func DeviceTypePtr(v DeviceType) *DeviceType { return &v }

type PingMessageType int64

const (
	PingMessageType_DefaultType PingMessageType = 1
)

func (p PingMessageType) String() string {
	switch p {
	case PingMessageType_DefaultType:
		return "PingMessageType_DefaultType"
	}
	return "<UNSET>"
}

func PingMessageTypeFromString(s string) (PingMessageType, error) {
	switch s {
	case "PingMessageType_DefaultType":
		return PingMessageType_DefaultType, nil
	}
	return PingMessageType(0), fmt.Errorf("not a valid PingMessageType string")
}

func PingMessageTypePtr(v PingMessageType) *PingMessageType { return &v }

type PingMessageID int64

const (
	PingMessageID_DefaultId PingMessageID = 1
)

func (p PingMessageID) String() string {
	switch p {
	case PingMessageID_DefaultId:
		return "PingMessageID_DefaultId"
	}
	return "<UNSET>"
}

func PingMessageIDFromString(s string) (PingMessageID, error) {
	switch s {
	case "PingMessageID_DefaultId":
		return PingMessageID_DefaultId, nil
	}
	return PingMessageID(0), fmt.Errorf("not a valid PingMessageID string")
}

func PingMessageIDPtr(v PingMessageID) *PingMessageID { return &v }

type AckMessageID int64

const (
	AckMessageID_AckSent     AckMessageID = 1
	AckMessageID_AckReceived AckMessageID = 2
	AckMessageID_AckRead     AckMessageID = 3
	AckMessageID_AckPlay     AckMessageID = 4
)

func (p AckMessageID) String() string {
	switch p {
	case AckMessageID_AckSent:
		return "AckMessageID_AckSent"
	case AckMessageID_AckReceived:
		return "AckMessageID_AckReceived"
	case AckMessageID_AckRead:
		return "AckMessageID_AckRead"
	case AckMessageID_AckPlay:
		return "AckMessageID_AckPlay"
	}
	return "<UNSET>"
}

func AckMessageIDFromString(s string) (AckMessageID, error) {
	switch s {
	case "AckMessageID_AckSent":
		return AckMessageID_AckSent, nil
	case "AckMessageID_AckReceived":
		return AckMessageID_AckReceived, nil
	case "AckMessageID_AckRead":
		return AckMessageID_AckRead, nil
	case "AckMessageID_AckPlay":
		return AckMessageID_AckPlay, nil
	}
	return AckMessageID(0), fmt.Errorf("not a valid AckMessageID string")
}

func AckMessageIDPtr(v AckMessageID) *AckMessageID { return &v }

type AckMessageType int64

const (
	AckMessageType_DefaultType  AckMessageType = 1
	AckMessageType_BatchAckType AckMessageType = 2
)

func (p AckMessageType) String() string {
	switch p {
	case AckMessageType_DefaultType:
		return "AckMessageType_DefaultType"
	case AckMessageType_BatchAckType:
		return "AckMessageType_BatchAckType"
	}
	return "<UNSET>"
}

func AckMessageTypeFromString(s string) (AckMessageType, error) {
	switch s {
	case "AckMessageType_DefaultType":
		return AckMessageType_DefaultType, nil
	case "AckMessageType_BatchAckType":
		return AckMessageType_BatchAckType, nil
	}
	return AckMessageType(0), fmt.Errorf("not a valid AckMessageType string")
}

func AckMessageTypePtr(v AckMessageType) *AckMessageType { return &v }

type SessionType int64

const (
	SessionType_SingleChat       SessionType = 1
	SessionType_DiscussionChat   SessionType = 2
	SessionType_GroupChat        SessionType = 3
	SessionType_CloudFileChat    SessionType = 4
	SessionType_ConferenceType   SessionType = 5
	SessionType_OrganizationType SessionType = 6
	SessionType_SystemType       SessionType = 7
	SessionType_APIType          SessionType = 8
)

func (p SessionType) String() string {
	switch p {
	case SessionType_SingleChat:
		return "SessionType_SingleChat"
	case SessionType_DiscussionChat:
		return "SessionType_DiscussionChat"
	case SessionType_GroupChat:
		return "SessionType_GroupChat"
	case SessionType_CloudFileChat:
		return "SessionType_CloudFileChat"
	case SessionType_ConferenceType:
		return "SessionType_ConferenceType"
	case SessionType_OrganizationType:
		return "SessionType_OrganizationType"
	case SessionType_SystemType:
		return "SessionType_SystemType"
	case SessionType_APIType:
		return "SessionType_APIType"
	}
	return "<UNSET>"
}

func SessionTypeFromString(s string) (SessionType, error) {
	switch s {
	case "SessionType_SingleChat":
		return SessionType_SingleChat, nil
	case "SessionType_DiscussionChat":
		return SessionType_DiscussionChat, nil
	case "SessionType_GroupChat":
		return SessionType_GroupChat, nil
	case "SessionType_CloudFileChat":
		return SessionType_CloudFileChat, nil
	case "SessionType_ConferenceType":
		return SessionType_ConferenceType, nil
	case "SessionType_OrganizationType":
		return SessionType_OrganizationType, nil
	case "SessionType_SystemType":
		return SessionType_SystemType, nil
	case "SessionType_APIType":
		return SessionType_APIType, nil
	}
	return SessionType(0), fmt.Errorf("not a valid SessionType string")
}

func SessionTypePtr(v SessionType) *SessionType { return &v }

type SleepMessageType int64

const (
	SleepMessageType_DefaultType SleepMessageType = 1
)

func (p SleepMessageType) String() string {
	switch p {
	case SleepMessageType_DefaultType:
		return "SleepMessageType_DefaultType"
	}
	return "<UNSET>"
}

func SleepMessageTypeFromString(s string) (SleepMessageType, error) {
	switch s {
	case "SleepMessageType_DefaultType":
		return SleepMessageType_DefaultType, nil
	}
	return SleepMessageType(0), fmt.Errorf("not a valid SleepMessageType string")
}

func SleepMessageTypePtr(v SleepMessageType) *SleepMessageType { return &v }

type SleepMessageId int64

const (
	SleepMessageId_IQRequest SleepMessageId = 1
	SleepMessageId_IQConfirm SleepMessageId = 2
)

func (p SleepMessageId) String() string {
	switch p {
	case SleepMessageId_IQRequest:
		return "SleepMessageId_IQRequest"
	case SleepMessageId_IQConfirm:
		return "SleepMessageId_IQConfirm"
	}
	return "<UNSET>"
}

func SleepMessageIdFromString(s string) (SleepMessageId, error) {
	switch s {
	case "SleepMessageId_IQRequest":
		return SleepMessageId_IQRequest, nil
	case "SleepMessageId_IQConfirm":
		return SleepMessageId_IQConfirm, nil
	}
	return SleepMessageId(0), fmt.Errorf("not a valid SleepMessageId string")
}

func SleepMessageIdPtr(v SleepMessageId) *SleepMessageId { return &v }

type SleepMode int64

const (
	SleepMode_light  SleepMode = 1
	SleepMode_deep   SleepMode = 2
	SleepMode_wakeup SleepMode = 3
)

func (p SleepMode) String() string {
	switch p {
	case SleepMode_light:
		return "SleepMode_light"
	case SleepMode_deep:
		return "SleepMode_deep"
	case SleepMode_wakeup:
		return "SleepMode_wakeup"
	}
	return "<UNSET>"
}

func SleepModeFromString(s string) (SleepMode, error) {
	switch s {
	case "SleepMode_light":
		return SleepMode_light, nil
	case "SleepMode_deep":
		return SleepMode_deep, nil
	case "SleepMode_wakeup":
		return SleepMode_wakeup, nil
	}
	return SleepMode(0), fmt.Errorf("not a valid SleepMode string")
}

func SleepModePtr(v SleepMode) *SleepMode { return &v }

type GroupType int64

const (
	GroupType_to_person GroupType = 0
	GroupType_to_group  GroupType = 16
)

func (p GroupType) String() string {
	switch p {
	case GroupType_to_person:
		return "GroupType_to_person"
	case GroupType_to_group:
		return "GroupType_to_group"
	}
	return "<UNSET>"
}

func GroupTypeFromString(s string) (GroupType, error) {
	switch s {
	case "GroupType_to_person":
		return GroupType_to_person, nil
	case "GroupType_to_group":
		return GroupType_to_group, nil
	}
	return GroupType(0), fmt.Errorf("not a valid GroupType string")
}

func GroupTypePtr(v GroupType) *GroupType { return &v }

type ContentType int64

const (
	ContentType_thrift_type ContentType = 1
	ContentType_mime_type   ContentType = 2
)

func (p ContentType) String() string {
	switch p {
	case ContentType_thrift_type:
		return "ContentType_thrift_type"
	case ContentType_mime_type:
		return "ContentType_mime_type"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "ContentType_thrift_type":
		return ContentType_thrift_type, nil
	case "ContentType_mime_type":
		return ContentType_mime_type, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }

type PriType int64

const (
	PriType_thrift_type  PriType = 1
	PriType_mime_type    PriType = 2
	PriType_audio_type   PriType = 4
	PriType_control_type PriType = 8
	PriType_group_type   PriType = 16
	PriType_direct_type  PriType = 32
)

func (p PriType) String() string {
	switch p {
	case PriType_thrift_type:
		return "PriType_thrift_type"
	case PriType_mime_type:
		return "PriType_mime_type"
	case PriType_audio_type:
		return "PriType_audio_type"
	case PriType_control_type:
		return "PriType_control_type"
	case PriType_group_type:
		return "PriType_group_type"
	case PriType_direct_type:
		return "PriType_direct_type"
	}
	return "<UNSET>"
}

func PriTypeFromString(s string) (PriType, error) {
	switch s {
	case "PriType_thrift_type":
		return PriType_thrift_type, nil
	case "PriType_mime_type":
		return PriType_mime_type, nil
	case "PriType_audio_type":
		return PriType_audio_type, nil
	case "PriType_control_type":
		return PriType_control_type, nil
	case "PriType_group_type":
		return PriType_group_type, nil
	case "PriType_direct_type":
		return PriType_direct_type, nil
	}
	return PriType(0), fmt.Errorf("not a valid PriType string")
}

func PriTypePtr(v PriType) *PriType { return &v }

type ControlPriType int64

const (
	ControlPriType_unread_count_type  ControlPriType = 1
	ControlPriType_display_type       ControlPriType = 2
	ControlPriType_webpush_send_type  ControlPriType = 4
	ControlPriType_webpush_count_type ControlPriType = 8
)

func (p ControlPriType) String() string {
	switch p {
	case ControlPriType_unread_count_type:
		return "ControlPriType_unread_count_type"
	case ControlPriType_display_type:
		return "ControlPriType_display_type"
	case ControlPriType_webpush_send_type:
		return "ControlPriType_webpush_send_type"
	case ControlPriType_webpush_count_type:
		return "ControlPriType_webpush_count_type"
	}
	return "<UNSET>"
}

func ControlPriTypeFromString(s string) (ControlPriType, error) {
	switch s {
	case "ControlPriType_unread_count_type":
		return ControlPriType_unread_count_type, nil
	case "ControlPriType_display_type":
		return ControlPriType_display_type, nil
	case "ControlPriType_webpush_send_type":
		return ControlPriType_webpush_send_type, nil
	case "ControlPriType_webpush_count_type":
		return ControlPriType_webpush_count_type, nil
	}
	return ControlPriType(0), fmt.Errorf("not a valid ControlPriType string")
}

func ControlPriTypePtr(v ControlPriType) *ControlPriType { return &v }

type ChannelPriType int64

const (
	ChannelPriType_channel0 ChannelPriType = 1
	ChannelPriType_channel1 ChannelPriType = 2
	ChannelPriType_channel2 ChannelPriType = 4
	ChannelPriType_channel3 ChannelPriType = 8
	ChannelPriType_channel4 ChannelPriType = 16
)

func (p ChannelPriType) String() string {
	switch p {
	case ChannelPriType_channel0:
		return "ChannelPriType_channel0"
	case ChannelPriType_channel1:
		return "ChannelPriType_channel1"
	case ChannelPriType_channel2:
		return "ChannelPriType_channel2"
	case ChannelPriType_channel3:
		return "ChannelPriType_channel3"
	case ChannelPriType_channel4:
		return "ChannelPriType_channel4"
	}
	return "<UNSET>"
}

func ChannelPriTypeFromString(s string) (ChannelPriType, error) {
	switch s {
	case "ChannelPriType_channel0":
		return ChannelPriType_channel0, nil
	case "ChannelPriType_channel1":
		return ChannelPriType_channel1, nil
	case "ChannelPriType_channel2":
		return ChannelPriType_channel2, nil
	case "ChannelPriType_channel3":
		return ChannelPriType_channel3, nil
	case "ChannelPriType_channel4":
		return ChannelPriType_channel4, nil
	}
	return ChannelPriType(0), fmt.Errorf("not a valid ChannelPriType string")
}

func ChannelPriTypePtr(v ChannelPriType) *ChannelPriType { return &v }

type ChatMessageType int64

const (
	ChatMessageType_NormalChat     ChatMessageType = 1
	ChatMessageType_DiscussionChat ChatMessageType = 2
	ChatMessageType_GroupChat      ChatMessageType = 3
	ChatMessageType_CloudFileChat  ChatMessageType = 4
)

func (p ChatMessageType) String() string {
	switch p {
	case ChatMessageType_NormalChat:
		return "ChatMessageType_NormalChat"
	case ChatMessageType_DiscussionChat:
		return "ChatMessageType_DiscussionChat"
	case ChatMessageType_GroupChat:
		return "ChatMessageType_GroupChat"
	case ChatMessageType_CloudFileChat:
		return "ChatMessageType_CloudFileChat"
	}
	return "<UNSET>"
}

func ChatMessageTypeFromString(s string) (ChatMessageType, error) {
	switch s {
	case "ChatMessageType_NormalChat":
		return ChatMessageType_NormalChat, nil
	case "ChatMessageType_DiscussionChat":
		return ChatMessageType_DiscussionChat, nil
	case "ChatMessageType_GroupChat":
		return ChatMessageType_GroupChat, nil
	case "ChatMessageType_CloudFileChat":
		return ChatMessageType_CloudFileChat, nil
	}
	return ChatMessageType(0), fmt.Errorf("not a valid ChatMessageType string")
}

func ChatMessageTypePtr(v ChatMessageType) *ChatMessageType { return &v }

type ChatMessageId int64

const (
	ChatMessageId_TextContent     ChatMessageId = 1
	ChatMessageId_MediaContent    ChatMessageId = 2
	ChatMessageId_DocumentSend    ChatMessageId = 3
	ChatMessageId_DocumentForward ChatMessageId = 4
	ChatMessageId_DocumentDel     ChatMessageId = 5
	ChatMessageId_CodeCreate      ChatMessageId = 6
	ChatMessageId_CodeForward     ChatMessageId = 7
	ChatMessageId_CodeDel         ChatMessageId = 8
	ChatMessageId_CloudFileCreate ChatMessageId = 9
	ChatMessageId_ReportContent   ChatMessageId = 10
	ChatMessageId_RevocationMsg   ChatMessageId = 11
	ChatMessageId_EmojiContent    ChatMessageId = 12
)

func (p ChatMessageId) String() string {
	switch p {
	case ChatMessageId_TextContent:
		return "ChatMessageId_TextContent"
	case ChatMessageId_MediaContent:
		return "ChatMessageId_MediaContent"
	case ChatMessageId_DocumentSend:
		return "ChatMessageId_DocumentSend"
	case ChatMessageId_DocumentForward:
		return "ChatMessageId_DocumentForward"
	case ChatMessageId_DocumentDel:
		return "ChatMessageId_DocumentDel"
	case ChatMessageId_CodeCreate:
		return "ChatMessageId_CodeCreate"
	case ChatMessageId_CodeForward:
		return "ChatMessageId_CodeForward"
	case ChatMessageId_CodeDel:
		return "ChatMessageId_CodeDel"
	case ChatMessageId_CloudFileCreate:
		return "ChatMessageId_CloudFileCreate"
	case ChatMessageId_ReportContent:
		return "ChatMessageId_ReportContent"
	case ChatMessageId_RevocationMsg:
		return "ChatMessageId_RevocationMsg"
	case ChatMessageId_EmojiContent:
		return "ChatMessageId_EmojiContent"
	}
	return "<UNSET>"
}

func ChatMessageIdFromString(s string) (ChatMessageId, error) {
	switch s {
	case "ChatMessageId_TextContent":
		return ChatMessageId_TextContent, nil
	case "ChatMessageId_MediaContent":
		return ChatMessageId_MediaContent, nil
	case "ChatMessageId_DocumentSend":
		return ChatMessageId_DocumentSend, nil
	case "ChatMessageId_DocumentForward":
		return ChatMessageId_DocumentForward, nil
	case "ChatMessageId_DocumentDel":
		return ChatMessageId_DocumentDel, nil
	case "ChatMessageId_CodeCreate":
		return ChatMessageId_CodeCreate, nil
	case "ChatMessageId_CodeForward":
		return ChatMessageId_CodeForward, nil
	case "ChatMessageId_CodeDel":
		return ChatMessageId_CodeDel, nil
	case "ChatMessageId_CloudFileCreate":
		return ChatMessageId_CloudFileCreate, nil
	case "ChatMessageId_ReportContent":
		return ChatMessageId_ReportContent, nil
	case "ChatMessageId_RevocationMsg":
		return ChatMessageId_RevocationMsg, nil
	case "ChatMessageId_EmojiContent":
		return ChatMessageId_EmojiContent, nil
	}
	return ChatMessageId(0), fmt.Errorf("not a valid ChatMessageId string")
}

func ChatMessageIdPtr(v ChatMessageId) *ChatMessageId { return &v }

type GroupMessageId int64

const (
	GroupMessageId_TextContent      GroupMessageId = 1
	GroupMessageId_MediaContent     GroupMessageId = 2
	GroupMessageId_DisMemberAdd     GroupMessageId = 3
	GroupMessageId_DisMemberDel     GroupMessageId = 4
	GroupMessageId_DisNameUpdate    GroupMessageId = 5
	GroupMessageId_DiscussionCreate GroupMessageId = 6
	GroupMessageId_DiscussionTop    GroupMessageId = 7
	GroupMessageId_SummaryCreate    GroupMessageId = 8
	GroupMessageId_DocumentForward  GroupMessageId = 9
	GroupMessageId_AlertRuleUpdate  GroupMessageId = 10
	GroupMessageId_DiscussionClose  GroupMessageId = 11
	GroupMessageId_MsgNotifyUpdate  GroupMessageId = 12
	GroupMessageId_DisMemberKick    GroupMessageId = 13
	GroupMessageId_DocumentDel      GroupMessageId = 14
	GroupMessageId_CodeCreate       GroupMessageId = 15
	GroupMessageId_CodeForward      GroupMessageId = 16
	GroupMessageId_CodeDel          GroupMessageId = 17
	GroupMessageId_CommentCreate    GroupMessageId = 18
	GroupMessageId_CommentDel       GroupMessageId = 19
	GroupMessageId_DisAvatarUpdate  GroupMessageId = 20
	GroupMessageId_DisStateUpdate   GroupMessageId = 21
	GroupMessageId_CloudFileCreate  GroupMessageId = 22
	GroupMessageId_MemberRoleUpdate GroupMessageId = 27
	GroupMessageId_ReportContent    GroupMessageId = 28
	GroupMessageId_RevocationMsg    GroupMessageId = 29
	GroupMessageId_DiscussionScope  GroupMessageId = 30
	GroupMessageId_EmojiContent     GroupMessageId = 31
)

func (p GroupMessageId) String() string {
	switch p {
	case GroupMessageId_TextContent:
		return "GroupMessageId_TextContent"
	case GroupMessageId_MediaContent:
		return "GroupMessageId_MediaContent"
	case GroupMessageId_DisMemberAdd:
		return "GroupMessageId_DisMemberAdd"
	case GroupMessageId_DisMemberDel:
		return "GroupMessageId_DisMemberDel"
	case GroupMessageId_DisNameUpdate:
		return "GroupMessageId_DisNameUpdate"
	case GroupMessageId_DiscussionCreate:
		return "GroupMessageId_DiscussionCreate"
	case GroupMessageId_DiscussionTop:
		return "GroupMessageId_DiscussionTop"
	case GroupMessageId_SummaryCreate:
		return "GroupMessageId_SummaryCreate"
	case GroupMessageId_DocumentForward:
		return "GroupMessageId_DocumentForward"
	case GroupMessageId_AlertRuleUpdate:
		return "GroupMessageId_AlertRuleUpdate"
	case GroupMessageId_DiscussionClose:
		return "GroupMessageId_DiscussionClose"
	case GroupMessageId_MsgNotifyUpdate:
		return "GroupMessageId_MsgNotifyUpdate"
	case GroupMessageId_DisMemberKick:
		return "GroupMessageId_DisMemberKick"
	case GroupMessageId_DocumentDel:
		return "GroupMessageId_DocumentDel"
	case GroupMessageId_CodeCreate:
		return "GroupMessageId_CodeCreate"
	case GroupMessageId_CodeForward:
		return "GroupMessageId_CodeForward"
	case GroupMessageId_CodeDel:
		return "GroupMessageId_CodeDel"
	case GroupMessageId_CommentCreate:
		return "GroupMessageId_CommentCreate"
	case GroupMessageId_CommentDel:
		return "GroupMessageId_CommentDel"
	case GroupMessageId_DisAvatarUpdate:
		return "GroupMessageId_DisAvatarUpdate"
	case GroupMessageId_DisStateUpdate:
		return "GroupMessageId_DisStateUpdate"
	case GroupMessageId_CloudFileCreate:
		return "GroupMessageId_CloudFileCreate"
	case GroupMessageId_MemberRoleUpdate:
		return "GroupMessageId_MemberRoleUpdate"
	case GroupMessageId_ReportContent:
		return "GroupMessageId_ReportContent"
	case GroupMessageId_RevocationMsg:
		return "GroupMessageId_RevocationMsg"
	case GroupMessageId_DiscussionScope:
		return "GroupMessageId_DiscussionScope"
	case GroupMessageId_EmojiContent:
		return "GroupMessageId_EmojiContent"
	}
	return "<UNSET>"
}

func GroupMessageIdFromString(s string) (GroupMessageId, error) {
	switch s {
	case "GroupMessageId_TextContent":
		return GroupMessageId_TextContent, nil
	case "GroupMessageId_MediaContent":
		return GroupMessageId_MediaContent, nil
	case "GroupMessageId_DisMemberAdd":
		return GroupMessageId_DisMemberAdd, nil
	case "GroupMessageId_DisMemberDel":
		return GroupMessageId_DisMemberDel, nil
	case "GroupMessageId_DisNameUpdate":
		return GroupMessageId_DisNameUpdate, nil
	case "GroupMessageId_DiscussionCreate":
		return GroupMessageId_DiscussionCreate, nil
	case "GroupMessageId_DiscussionTop":
		return GroupMessageId_DiscussionTop, nil
	case "GroupMessageId_SummaryCreate":
		return GroupMessageId_SummaryCreate, nil
	case "GroupMessageId_DocumentForward":
		return GroupMessageId_DocumentForward, nil
	case "GroupMessageId_AlertRuleUpdate":
		return GroupMessageId_AlertRuleUpdate, nil
	case "GroupMessageId_DiscussionClose":
		return GroupMessageId_DiscussionClose, nil
	case "GroupMessageId_MsgNotifyUpdate":
		return GroupMessageId_MsgNotifyUpdate, nil
	case "GroupMessageId_DisMemberKick":
		return GroupMessageId_DisMemberKick, nil
	case "GroupMessageId_DocumentDel":
		return GroupMessageId_DocumentDel, nil
	case "GroupMessageId_CodeCreate":
		return GroupMessageId_CodeCreate, nil
	case "GroupMessageId_CodeForward":
		return GroupMessageId_CodeForward, nil
	case "GroupMessageId_CodeDel":
		return GroupMessageId_CodeDel, nil
	case "GroupMessageId_CommentCreate":
		return GroupMessageId_CommentCreate, nil
	case "GroupMessageId_CommentDel":
		return GroupMessageId_CommentDel, nil
	case "GroupMessageId_DisAvatarUpdate":
		return GroupMessageId_DisAvatarUpdate, nil
	case "GroupMessageId_DisStateUpdate":
		return GroupMessageId_DisStateUpdate, nil
	case "GroupMessageId_CloudFileCreate":
		return GroupMessageId_CloudFileCreate, nil
	case "GroupMessageId_MemberRoleUpdate":
		return GroupMessageId_MemberRoleUpdate, nil
	case "GroupMessageId_ReportContent":
		return GroupMessageId_ReportContent, nil
	case "GroupMessageId_RevocationMsg":
		return GroupMessageId_RevocationMsg, nil
	case "GroupMessageId_DiscussionScope":
		return GroupMessageId_DiscussionScope, nil
	case "GroupMessageId_EmojiContent":
		return GroupMessageId_EmojiContent, nil
	}
	return GroupMessageId(0), fmt.Errorf("not a valid GroupMessageId string")
}

func GroupMessageIdPtr(v GroupMessageId) *GroupMessageId { return &v }

type ClusterMessageId int64

const (
	ClusterMessageId_TextContent      ClusterMessageId = 1
	ClusterMessageId_MediaContent     ClusterMessageId = 2
	ClusterMessageId_DisMemberAdd     ClusterMessageId = 3
	ClusterMessageId_DisMemberDel     ClusterMessageId = 4
	ClusterMessageId_DisNameUpdate    ClusterMessageId = 5
	ClusterMessageId_DiscussionCreate ClusterMessageId = 6
	ClusterMessageId_DiscussionTop    ClusterMessageId = 7
	ClusterMessageId_SummaryCreate    ClusterMessageId = 8
	ClusterMessageId_DocumentForward  ClusterMessageId = 9
	ClusterMessageId_DiscussionClose  ClusterMessageId = 11
	ClusterMessageId_MsgNotifyUpdate  ClusterMessageId = 12
	ClusterMessageId_DisMemberKick    ClusterMessageId = 13
	ClusterMessageId_DocumentDel      ClusterMessageId = 14
	ClusterMessageId_CodeCreate       ClusterMessageId = 15
	ClusterMessageId_CodeForward      ClusterMessageId = 16
	ClusterMessageId_CodeDel          ClusterMessageId = 17
	ClusterMessageId_CommentCreate    ClusterMessageId = 18
	ClusterMessageId_CommentDel       ClusterMessageId = 19
	ClusterMessageId_DisAvatarUpdate  ClusterMessageId = 20
	ClusterMessageId_DisStateUpdate   ClusterMessageId = 21
	ClusterMessageId_CloudFileCreate  ClusterMessageId = 22
	ClusterMessageId_MemberRoleUpdate ClusterMessageId = 27
	ClusterMessageId_ReportContent    ClusterMessageId = 28
	ClusterMessageId_RevocationMsg    ClusterMessageId = 29
	ClusterMessageId_DiscussionScope  ClusterMessageId = 30
	ClusterMessageId_OwnerTransfer    ClusterMessageId = 31
	ClusterMessageId_EmojiContent     ClusterMessageId = 32
)

func (p ClusterMessageId) String() string {
	switch p {
	case ClusterMessageId_TextContent:
		return "ClusterMessageId_TextContent"
	case ClusterMessageId_MediaContent:
		return "ClusterMessageId_MediaContent"
	case ClusterMessageId_DisMemberAdd:
		return "ClusterMessageId_DisMemberAdd"
	case ClusterMessageId_DisMemberDel:
		return "ClusterMessageId_DisMemberDel"
	case ClusterMessageId_DisNameUpdate:
		return "ClusterMessageId_DisNameUpdate"
	case ClusterMessageId_DiscussionCreate:
		return "ClusterMessageId_DiscussionCreate"
	case ClusterMessageId_DiscussionTop:
		return "ClusterMessageId_DiscussionTop"
	case ClusterMessageId_SummaryCreate:
		return "ClusterMessageId_SummaryCreate"
	case ClusterMessageId_DocumentForward:
		return "ClusterMessageId_DocumentForward"
	case ClusterMessageId_DiscussionClose:
		return "ClusterMessageId_DiscussionClose"
	case ClusterMessageId_MsgNotifyUpdate:
		return "ClusterMessageId_MsgNotifyUpdate"
	case ClusterMessageId_DisMemberKick:
		return "ClusterMessageId_DisMemberKick"
	case ClusterMessageId_DocumentDel:
		return "ClusterMessageId_DocumentDel"
	case ClusterMessageId_CodeCreate:
		return "ClusterMessageId_CodeCreate"
	case ClusterMessageId_CodeForward:
		return "ClusterMessageId_CodeForward"
	case ClusterMessageId_CodeDel:
		return "ClusterMessageId_CodeDel"
	case ClusterMessageId_CommentCreate:
		return "ClusterMessageId_CommentCreate"
	case ClusterMessageId_CommentDel:
		return "ClusterMessageId_CommentDel"
	case ClusterMessageId_DisAvatarUpdate:
		return "ClusterMessageId_DisAvatarUpdate"
	case ClusterMessageId_DisStateUpdate:
		return "ClusterMessageId_DisStateUpdate"
	case ClusterMessageId_CloudFileCreate:
		return "ClusterMessageId_CloudFileCreate"
	case ClusterMessageId_MemberRoleUpdate:
		return "ClusterMessageId_MemberRoleUpdate"
	case ClusterMessageId_ReportContent:
		return "ClusterMessageId_ReportContent"
	case ClusterMessageId_RevocationMsg:
		return "ClusterMessageId_RevocationMsg"
	case ClusterMessageId_DiscussionScope:
		return "ClusterMessageId_DiscussionScope"
	case ClusterMessageId_OwnerTransfer:
		return "ClusterMessageId_OwnerTransfer"
	case ClusterMessageId_EmojiContent:
		return "ClusterMessageId_EmojiContent"
	}
	return "<UNSET>"
}

func ClusterMessageIdFromString(s string) (ClusterMessageId, error) {
	switch s {
	case "ClusterMessageId_TextContent":
		return ClusterMessageId_TextContent, nil
	case "ClusterMessageId_MediaContent":
		return ClusterMessageId_MediaContent, nil
	case "ClusterMessageId_DisMemberAdd":
		return ClusterMessageId_DisMemberAdd, nil
	case "ClusterMessageId_DisMemberDel":
		return ClusterMessageId_DisMemberDel, nil
	case "ClusterMessageId_DisNameUpdate":
		return ClusterMessageId_DisNameUpdate, nil
	case "ClusterMessageId_DiscussionCreate":
		return ClusterMessageId_DiscussionCreate, nil
	case "ClusterMessageId_DiscussionTop":
		return ClusterMessageId_DiscussionTop, nil
	case "ClusterMessageId_SummaryCreate":
		return ClusterMessageId_SummaryCreate, nil
	case "ClusterMessageId_DocumentForward":
		return ClusterMessageId_DocumentForward, nil
	case "ClusterMessageId_DiscussionClose":
		return ClusterMessageId_DiscussionClose, nil
	case "ClusterMessageId_MsgNotifyUpdate":
		return ClusterMessageId_MsgNotifyUpdate, nil
	case "ClusterMessageId_DisMemberKick":
		return ClusterMessageId_DisMemberKick, nil
	case "ClusterMessageId_DocumentDel":
		return ClusterMessageId_DocumentDel, nil
	case "ClusterMessageId_CodeCreate":
		return ClusterMessageId_CodeCreate, nil
	case "ClusterMessageId_CodeForward":
		return ClusterMessageId_CodeForward, nil
	case "ClusterMessageId_CodeDel":
		return ClusterMessageId_CodeDel, nil
	case "ClusterMessageId_CommentCreate":
		return ClusterMessageId_CommentCreate, nil
	case "ClusterMessageId_CommentDel":
		return ClusterMessageId_CommentDel, nil
	case "ClusterMessageId_DisAvatarUpdate":
		return ClusterMessageId_DisAvatarUpdate, nil
	case "ClusterMessageId_DisStateUpdate":
		return ClusterMessageId_DisStateUpdate, nil
	case "ClusterMessageId_CloudFileCreate":
		return ClusterMessageId_CloudFileCreate, nil
	case "ClusterMessageId_MemberRoleUpdate":
		return ClusterMessageId_MemberRoleUpdate, nil
	case "ClusterMessageId_ReportContent":
		return ClusterMessageId_ReportContent, nil
	case "ClusterMessageId_RevocationMsg":
		return ClusterMessageId_RevocationMsg, nil
	case "ClusterMessageId_DiscussionScope":
		return ClusterMessageId_DiscussionScope, nil
	case "ClusterMessageId_OwnerTransfer":
		return ClusterMessageId_OwnerTransfer, nil
	case "ClusterMessageId_EmojiContent":
		return ClusterMessageId_EmojiContent, nil
	}
	return ClusterMessageId(0), fmt.Errorf("not a valid ClusterMessageId string")
}

func ClusterMessageIdPtr(v ClusterMessageId) *ClusterMessageId { return &v }

type CloudFileMessageId int64

const (
	CloudFileMessageId_TextContent      CloudFileMessageId = 1
	CloudFileMessageId_MediaContent     CloudFileMessageId = 2
	CloudFileMessageId_DisMemberAdd     CloudFileMessageId = 3
	CloudFileMessageId_DisMemberDel     CloudFileMessageId = 4
	CloudFileMessageId_DisNameUpdate    CloudFileMessageId = 5
	CloudFileMessageId_DiscussionCreate CloudFileMessageId = 6
	CloudFileMessageId_DiscussionClose  CloudFileMessageId = 11
	CloudFileMessageId_MsgNotifyUpdate  CloudFileMessageId = 12
	CloudFileMessageId_DisMemberKick    CloudFileMessageId = 13
	CloudFileMessageId_CommentCreate    CloudFileMessageId = 18
	CloudFileMessageId_CommentDel       CloudFileMessageId = 19
	CloudFileMessageId_DisAvatarUpdate  CloudFileMessageId = 20
	CloudFileMessageId_CloudFileCreate  CloudFileMessageId = 22
	CloudFileMessageId_CloudFileUpdate  CloudFileMessageId = 23
	CloudFileMessageId_CloudFileDel     CloudFileMessageId = 24
	CloudFileMessageId_CloudFileMove    CloudFileMessageId = 25
	CloudFileMessageId_CloudFileRename  CloudFileMessageId = 26
	CloudFileMessageId_MemberRoleUpdate CloudFileMessageId = 27
	CloudFileMessageId_ReportContent    CloudFileMessageId = 28
	CloudFileMessageId_RevocationMsg    CloudFileMessageId = 29
	CloudFileMessageId_EmojiContent     CloudFileMessageId = 30
)

func (p CloudFileMessageId) String() string {
	switch p {
	case CloudFileMessageId_TextContent:
		return "CloudFileMessageId_TextContent"
	case CloudFileMessageId_MediaContent:
		return "CloudFileMessageId_MediaContent"
	case CloudFileMessageId_DisMemberAdd:
		return "CloudFileMessageId_DisMemberAdd"
	case CloudFileMessageId_DisMemberDel:
		return "CloudFileMessageId_DisMemberDel"
	case CloudFileMessageId_DisNameUpdate:
		return "CloudFileMessageId_DisNameUpdate"
	case CloudFileMessageId_DiscussionCreate:
		return "CloudFileMessageId_DiscussionCreate"
	case CloudFileMessageId_DiscussionClose:
		return "CloudFileMessageId_DiscussionClose"
	case CloudFileMessageId_MsgNotifyUpdate:
		return "CloudFileMessageId_MsgNotifyUpdate"
	case CloudFileMessageId_DisMemberKick:
		return "CloudFileMessageId_DisMemberKick"
	case CloudFileMessageId_CommentCreate:
		return "CloudFileMessageId_CommentCreate"
	case CloudFileMessageId_CommentDel:
		return "CloudFileMessageId_CommentDel"
	case CloudFileMessageId_DisAvatarUpdate:
		return "CloudFileMessageId_DisAvatarUpdate"
	case CloudFileMessageId_CloudFileCreate:
		return "CloudFileMessageId_CloudFileCreate"
	case CloudFileMessageId_CloudFileUpdate:
		return "CloudFileMessageId_CloudFileUpdate"
	case CloudFileMessageId_CloudFileDel:
		return "CloudFileMessageId_CloudFileDel"
	case CloudFileMessageId_CloudFileMove:
		return "CloudFileMessageId_CloudFileMove"
	case CloudFileMessageId_CloudFileRename:
		return "CloudFileMessageId_CloudFileRename"
	case CloudFileMessageId_MemberRoleUpdate:
		return "CloudFileMessageId_MemberRoleUpdate"
	case CloudFileMessageId_ReportContent:
		return "CloudFileMessageId_ReportContent"
	case CloudFileMessageId_RevocationMsg:
		return "CloudFileMessageId_RevocationMsg"
	case CloudFileMessageId_EmojiContent:
		return "CloudFileMessageId_EmojiContent"
	}
	return "<UNSET>"
}

func CloudFileMessageIdFromString(s string) (CloudFileMessageId, error) {
	switch s {
	case "CloudFileMessageId_TextContent":
		return CloudFileMessageId_TextContent, nil
	case "CloudFileMessageId_MediaContent":
		return CloudFileMessageId_MediaContent, nil
	case "CloudFileMessageId_DisMemberAdd":
		return CloudFileMessageId_DisMemberAdd, nil
	case "CloudFileMessageId_DisMemberDel":
		return CloudFileMessageId_DisMemberDel, nil
	case "CloudFileMessageId_DisNameUpdate":
		return CloudFileMessageId_DisNameUpdate, nil
	case "CloudFileMessageId_DiscussionCreate":
		return CloudFileMessageId_DiscussionCreate, nil
	case "CloudFileMessageId_DiscussionClose":
		return CloudFileMessageId_DiscussionClose, nil
	case "CloudFileMessageId_MsgNotifyUpdate":
		return CloudFileMessageId_MsgNotifyUpdate, nil
	case "CloudFileMessageId_DisMemberKick":
		return CloudFileMessageId_DisMemberKick, nil
	case "CloudFileMessageId_CommentCreate":
		return CloudFileMessageId_CommentCreate, nil
	case "CloudFileMessageId_CommentDel":
		return CloudFileMessageId_CommentDel, nil
	case "CloudFileMessageId_DisAvatarUpdate":
		return CloudFileMessageId_DisAvatarUpdate, nil
	case "CloudFileMessageId_CloudFileCreate":
		return CloudFileMessageId_CloudFileCreate, nil
	case "CloudFileMessageId_CloudFileUpdate":
		return CloudFileMessageId_CloudFileUpdate, nil
	case "CloudFileMessageId_CloudFileDel":
		return CloudFileMessageId_CloudFileDel, nil
	case "CloudFileMessageId_CloudFileMove":
		return CloudFileMessageId_CloudFileMove, nil
	case "CloudFileMessageId_CloudFileRename":
		return CloudFileMessageId_CloudFileRename, nil
	case "CloudFileMessageId_MemberRoleUpdate":
		return CloudFileMessageId_MemberRoleUpdate, nil
	case "CloudFileMessageId_ReportContent":
		return CloudFileMessageId_ReportContent, nil
	case "CloudFileMessageId_RevocationMsg":
		return CloudFileMessageId_RevocationMsg, nil
	case "CloudFileMessageId_EmojiContent":
		return CloudFileMessageId_EmojiContent, nil
	}
	return CloudFileMessageId(0), fmt.Errorf("not a valid CloudFileMessageId string")
}

func CloudFileMessageIdPtr(v CloudFileMessageId) *CloudFileMessageId { return &v }

type ChatMediaType int64

const (
	ChatMediaType_MediaTypeAudio         ChatMediaType = 1
	ChatMediaType_MediaTypeImage         ChatMediaType = 2
	ChatMediaType_MediaTypeVideo         ChatMediaType = 3
	ChatMediaType_MediaTypeEmotion       ChatMediaType = 4
	ChatMediaType_MediaTypeMeetingRecord ChatMediaType = 5
)

func (p ChatMediaType) String() string {
	switch p {
	case ChatMediaType_MediaTypeAudio:
		return "ChatMediaType_MediaTypeAudio"
	case ChatMediaType_MediaTypeImage:
		return "ChatMediaType_MediaTypeImage"
	case ChatMediaType_MediaTypeVideo:
		return "ChatMediaType_MediaTypeVideo"
	case ChatMediaType_MediaTypeEmotion:
		return "ChatMediaType_MediaTypeEmotion"
	case ChatMediaType_MediaTypeMeetingRecord:
		return "ChatMediaType_MediaTypeMeetingRecord"
	}
	return "<UNSET>"
}

func ChatMediaTypeFromString(s string) (ChatMediaType, error) {
	switch s {
	case "ChatMediaType_MediaTypeAudio":
		return ChatMediaType_MediaTypeAudio, nil
	case "ChatMediaType_MediaTypeImage":
		return ChatMediaType_MediaTypeImage, nil
	case "ChatMediaType_MediaTypeVideo":
		return ChatMediaType_MediaTypeVideo, nil
	case "ChatMediaType_MediaTypeEmotion":
		return ChatMediaType_MediaTypeEmotion, nil
	case "ChatMediaType_MediaTypeMeetingRecord":
		return ChatMediaType_MediaTypeMeetingRecord, nil
	}
	return ChatMediaType(0), fmt.Errorf("not a valid ChatMediaType string")
}

func ChatMediaTypePtr(v ChatMediaType) *ChatMediaType { return &v }

type TextContentType int64

const (
	TextContentType_PlainText  TextContentType = 1
	TextContentType_MimeText   TextContentType = 2
	TextContentType_HybridText TextContentType = 3
	TextContentType_OAText     TextContentType = 4
)

func (p TextContentType) String() string {
	switch p {
	case TextContentType_PlainText:
		return "TextContentType_PlainText"
	case TextContentType_MimeText:
		return "TextContentType_MimeText"
	case TextContentType_HybridText:
		return "TextContentType_HybridText"
	case TextContentType_OAText:
		return "TextContentType_OAText"
	}
	return "<UNSET>"
}

func TextContentTypeFromString(s string) (TextContentType, error) {
	switch s {
	case "TextContentType_PlainText":
		return TextContentType_PlainText, nil
	case "TextContentType_MimeText":
		return TextContentType_MimeText, nil
	case "TextContentType_HybridText":
		return TextContentType_HybridText, nil
	case "TextContentType_OAText":
		return TextContentType_OAText, nil
	}
	return TextContentType(0), fmt.Errorf("not a valid TextContentType string")
}

func TextContentTypePtr(v TextContentType) *TextContentType { return &v }

type AlertRuleType int64

const (
	AlertRuleType_NoDay     AlertRuleType = 0
	AlertRuleType_Monday    AlertRuleType = 1
	AlertRuleType_Tuesday   AlertRuleType = 2
	AlertRuleType_Wednesday AlertRuleType = 4
	AlertRuleType_Thursday  AlertRuleType = 8
	AlertRuleType_Friday    AlertRuleType = 16
	AlertRuleType_Saturday  AlertRuleType = 32
	AlertRuleType_Sunday    AlertRuleType = 64
)

func (p AlertRuleType) String() string {
	switch p {
	case AlertRuleType_NoDay:
		return "AlertRuleType_NoDay"
	case AlertRuleType_Monday:
		return "AlertRuleType_Monday"
	case AlertRuleType_Tuesday:
		return "AlertRuleType_Tuesday"
	case AlertRuleType_Wednesday:
		return "AlertRuleType_Wednesday"
	case AlertRuleType_Thursday:
		return "AlertRuleType_Thursday"
	case AlertRuleType_Friday:
		return "AlertRuleType_Friday"
	case AlertRuleType_Saturday:
		return "AlertRuleType_Saturday"
	case AlertRuleType_Sunday:
		return "AlertRuleType_Sunday"
	}
	return "<UNSET>"
}

func AlertRuleTypeFromString(s string) (AlertRuleType, error) {
	switch s {
	case "AlertRuleType_NoDay":
		return AlertRuleType_NoDay, nil
	case "AlertRuleType_Monday":
		return AlertRuleType_Monday, nil
	case "AlertRuleType_Tuesday":
		return AlertRuleType_Tuesday, nil
	case "AlertRuleType_Wednesday":
		return AlertRuleType_Wednesday, nil
	case "AlertRuleType_Thursday":
		return AlertRuleType_Thursday, nil
	case "AlertRuleType_Friday":
		return AlertRuleType_Friday, nil
	case "AlertRuleType_Saturday":
		return AlertRuleType_Saturday, nil
	case "AlertRuleType_Sunday":
		return AlertRuleType_Sunday, nil
	}
	return AlertRuleType(0), fmt.Errorf("not a valid AlertRuleType string")
}

func AlertRuleTypePtr(v AlertRuleType) *AlertRuleType { return &v }

type CloudType int64

const (
	CloudType_FS     CloudType = 0
	CloudType_GoKuai CloudType = 1
	CloudType_AnZhen CloudType = 2
)

func (p CloudType) String() string {
	switch p {
	case CloudType_FS:
		return "CloudType_FS"
	case CloudType_GoKuai:
		return "CloudType_GoKuai"
	case CloudType_AnZhen:
		return "CloudType_AnZhen"
	}
	return "<UNSET>"
}

func CloudTypeFromString(s string) (CloudType, error) {
	switch s {
	case "CloudType_FS":
		return CloudType_FS, nil
	case "CloudType_GoKuai":
		return CloudType_GoKuai, nil
	case "CloudType_AnZhen":
		return CloudType_AnZhen, nil
	}
	return CloudType(0), fmt.Errorf("not a valid CloudType string")
}

func CloudTypePtr(v CloudType) *CloudType { return &v }

type FSDetailType int64

const (
	FSDetailType_Document FSDetailType = 0
	FSDetailType_Code     FSDetailType = 1
)

func (p FSDetailType) String() string {
	switch p {
	case FSDetailType_Document:
		return "FSDetailType_Document"
	case FSDetailType_Code:
		return "FSDetailType_Code"
	}
	return "<UNSET>"
}

func FSDetailTypeFromString(s string) (FSDetailType, error) {
	switch s {
	case "FSDetailType_Document":
		return FSDetailType_Document, nil
	case "FSDetailType_Code":
		return FSDetailType_Code, nil
	}
	return FSDetailType(0), fmt.Errorf("not a valid FSDetailType string")
}

func FSDetailTypePtr(v FSDetailType) *FSDetailType { return &v }

type GoKuaiDetailType int64

const (
	GoKuaiDetailType_FileOperate GoKuaiDetailType = 1
)

func (p GoKuaiDetailType) String() string {
	switch p {
	case GoKuaiDetailType_FileOperate:
		return "GoKuaiDetailType_FileOperate"
	}
	return "<UNSET>"
}

func GoKuaiDetailTypeFromString(s string) (GoKuaiDetailType, error) {
	switch s {
	case "GoKuaiDetailType_FileOperate":
		return GoKuaiDetailType_FileOperate, nil
	}
	return GoKuaiDetailType(0), fmt.Errorf("not a valid GoKuaiDetailType string")
}

func GoKuaiDetailTypePtr(v GoKuaiDetailType) *GoKuaiDetailType { return &v }

type AnZhenDetailType int64

const (
	AnZhenDetailType_FileURL AnZhenDetailType = 1
)

func (p AnZhenDetailType) String() string {
	switch p {
	case AnZhenDetailType_FileURL:
		return "AnZhenDetailType_FileURL"
	}
	return "<UNSET>"
}

func AnZhenDetailTypeFromString(s string) (AnZhenDetailType, error) {
	switch s {
	case "AnZhenDetailType_FileURL":
		return AnZhenDetailType_FileURL, nil
	}
	return AnZhenDetailType(0), fmt.Errorf("not a valid AnZhenDetailType string")
}

func AnZhenDetailTypePtr(v AnZhenDetailType) *AnZhenDetailType { return &v }

type MemberRoleType int64

const (
	MemberRoleType_Member MemberRoleType = 0
	MemberRoleType_Admin  MemberRoleType = 1
)

func (p MemberRoleType) String() string {
	switch p {
	case MemberRoleType_Member:
		return "MemberRoleType_Member"
	case MemberRoleType_Admin:
		return "MemberRoleType_Admin"
	}
	return "<UNSET>"
}

func MemberRoleTypeFromString(s string) (MemberRoleType, error) {
	switch s {
	case "MemberRoleType_Member":
		return MemberRoleType_Member, nil
	case "MemberRoleType_Admin":
		return MemberRoleType_Admin, nil
	}
	return MemberRoleType(0), fmt.Errorf("not a valid MemberRoleType string")
}

func MemberRoleTypePtr(v MemberRoleType) *MemberRoleType { return &v }

type SystemProtoMessageType int64

const (
	SystemProtoMessageType_SystemWelcome       SystemProtoMessageType = 1
	SystemProtoMessageType_ClientUpdate        SystemProtoMessageType = 2
	SystemProtoMessageType_CompleteInfoType    SystemProtoMessageType = 3
	SystemProtoMessageType_PwdRuleUpdate       SystemProtoMessageType = 4
	SystemProtoMessageType_clientInstallGuide  SystemProtoMessageType = 5
	SystemProtoMessageType_PasswordModify      SystemProtoMessageType = 6
	SystemProtoMessageType_SensitiveWordDelete SystemProtoMessageType = 7
	SystemProtoMessageType_GroupRemind         SystemProtoMessageType = 8
)

func (p SystemProtoMessageType) String() string {
	switch p {
	case SystemProtoMessageType_SystemWelcome:
		return "SystemProtoMessageType_SystemWelcome"
	case SystemProtoMessageType_ClientUpdate:
		return "SystemProtoMessageType_ClientUpdate"
	case SystemProtoMessageType_CompleteInfoType:
		return "SystemProtoMessageType_CompleteInfoType"
	case SystemProtoMessageType_PwdRuleUpdate:
		return "SystemProtoMessageType_PwdRuleUpdate"
	case SystemProtoMessageType_clientInstallGuide:
		return "SystemProtoMessageType_clientInstallGuide"
	case SystemProtoMessageType_PasswordModify:
		return "SystemProtoMessageType_PasswordModify"
	case SystemProtoMessageType_SensitiveWordDelete:
		return "SystemProtoMessageType_SensitiveWordDelete"
	case SystemProtoMessageType_GroupRemind:
		return "SystemProtoMessageType_GroupRemind"
	}
	return "<UNSET>"
}

func SystemProtoMessageTypeFromString(s string) (SystemProtoMessageType, error) {
	switch s {
	case "SystemProtoMessageType_SystemWelcome":
		return SystemProtoMessageType_SystemWelcome, nil
	case "SystemProtoMessageType_ClientUpdate":
		return SystemProtoMessageType_ClientUpdate, nil
	case "SystemProtoMessageType_CompleteInfoType":
		return SystemProtoMessageType_CompleteInfoType, nil
	case "SystemProtoMessageType_PwdRuleUpdate":
		return SystemProtoMessageType_PwdRuleUpdate, nil
	case "SystemProtoMessageType_clientInstallGuide":
		return SystemProtoMessageType_clientInstallGuide, nil
	case "SystemProtoMessageType_PasswordModify":
		return SystemProtoMessageType_PasswordModify, nil
	case "SystemProtoMessageType_SensitiveWordDelete":
		return SystemProtoMessageType_SensitiveWordDelete, nil
	case "SystemProtoMessageType_GroupRemind":
		return SystemProtoMessageType_GroupRemind, nil
	}
	return SystemProtoMessageType(0), fmt.Errorf("not a valid SystemProtoMessageType string")
}

func SystemProtoMessageTypePtr(v SystemProtoMessageType) *SystemProtoMessageType { return &v }

type SystemMessageId int64

const (
	SystemMessageId_DefaultId SystemMessageId = 1
)

func (p SystemMessageId) String() string {
	switch p {
	case SystemMessageId_DefaultId:
		return "SystemMessageId_DefaultId"
	}
	return "<UNSET>"
}

func SystemMessageIdFromString(s string) (SystemMessageId, error) {
	switch s {
	case "SystemMessageId_DefaultId":
		return SystemMessageId_DefaultId, nil
	}
	return SystemMessageId(0), fmt.Errorf("not a valid SystemMessageId string")
}

func SystemMessageIdPtr(v SystemMessageId) *SystemMessageId { return &v }

type ClientUpdateProtoMessageId int64

const (
	ClientUpdateProtoMessageId_IphoneType  ClientUpdateProtoMessageId = 1
	ClientUpdateProtoMessageId_AndroidType ClientUpdateProtoMessageId = 2
	ClientUpdateProtoMessageId_PCType      ClientUpdateProtoMessageId = 3
)

func (p ClientUpdateProtoMessageId) String() string {
	switch p {
	case ClientUpdateProtoMessageId_IphoneType:
		return "ClientUpdateProtoMessageId_IphoneType"
	case ClientUpdateProtoMessageId_AndroidType:
		return "ClientUpdateProtoMessageId_AndroidType"
	case ClientUpdateProtoMessageId_PCType:
		return "ClientUpdateProtoMessageId_PCType"
	}
	return "<UNSET>"
}

func ClientUpdateProtoMessageIdFromString(s string) (ClientUpdateProtoMessageId, error) {
	switch s {
	case "ClientUpdateProtoMessageId_IphoneType":
		return ClientUpdateProtoMessageId_IphoneType, nil
	case "ClientUpdateProtoMessageId_AndroidType":
		return ClientUpdateProtoMessageId_AndroidType, nil
	case "ClientUpdateProtoMessageId_PCType":
		return ClientUpdateProtoMessageId_PCType, nil
	}
	return ClientUpdateProtoMessageId(0), fmt.Errorf("not a valid ClientUpdateProtoMessageId string")
}

func ClientUpdateProtoMessageIdPtr(v ClientUpdateProtoMessageId) *ClientUpdateProtoMessageId {
	return &v
}

type CompleteInfoMessageId int64

const (
	CompleteInfoMessageId_tagAdd    CompleteInfoMessageId = 1
	CompleteInfoMessageId_tagUpdate CompleteInfoMessageId = 2
	CompleteInfoMessageId_tagDel    CompleteInfoMessageId = 3
)

func (p CompleteInfoMessageId) String() string {
	switch p {
	case CompleteInfoMessageId_tagAdd:
		return "CompleteInfoMessageId_tagAdd"
	case CompleteInfoMessageId_tagUpdate:
		return "CompleteInfoMessageId_tagUpdate"
	case CompleteInfoMessageId_tagDel:
		return "CompleteInfoMessageId_tagDel"
	}
	return "<UNSET>"
}

func CompleteInfoMessageIdFromString(s string) (CompleteInfoMessageId, error) {
	switch s {
	case "CompleteInfoMessageId_tagAdd":
		return CompleteInfoMessageId_tagAdd, nil
	case "CompleteInfoMessageId_tagUpdate":
		return CompleteInfoMessageId_tagUpdate, nil
	case "CompleteInfoMessageId_tagDel":
		return CompleteInfoMessageId_tagDel, nil
	}
	return CompleteInfoMessageId(0), fmt.Errorf("not a valid CompleteInfoMessageId string")
}

func CompleteInfoMessageIdPtr(v CompleteInfoMessageId) *CompleteInfoMessageId { return &v }

type InputType int64

const (
	InputType_SingleLine InputType = 1
	InputType_MultiLine  InputType = 2
	InputType_Number     InputType = 3
	InputType_Date       InputType = 4
)

func (p InputType) String() string {
	switch p {
	case InputType_SingleLine:
		return "InputType_SingleLine"
	case InputType_MultiLine:
		return "InputType_MultiLine"
	case InputType_Number:
		return "InputType_Number"
	case InputType_Date:
		return "InputType_Date"
	}
	return "<UNSET>"
}

func InputTypeFromString(s string) (InputType, error) {
	switch s {
	case "InputType_SingleLine":
		return InputType_SingleLine, nil
	case "InputType_MultiLine":
		return InputType_MultiLine, nil
	case "InputType_Number":
		return InputType_Number, nil
	case "InputType_Date":
		return InputType_Date, nil
	}
	return InputType(0), fmt.Errorf("not a valid InputType string")
}

func InputTypePtr(v InputType) *InputType { return &v }

type PwdRuleUpdateMessageId int64

const (
	PwdRuleUpdateMessageId_OutOfDateType PwdRuleUpdateMessageId = 1
	PwdRuleUpdateMessageId_ComplexType   PwdRuleUpdateMessageId = 2
)

func (p PwdRuleUpdateMessageId) String() string {
	switch p {
	case PwdRuleUpdateMessageId_OutOfDateType:
		return "PwdRuleUpdateMessageId_OutOfDateType"
	case PwdRuleUpdateMessageId_ComplexType:
		return "PwdRuleUpdateMessageId_ComplexType"
	}
	return "<UNSET>"
}

func PwdRuleUpdateMessageIdFromString(s string) (PwdRuleUpdateMessageId, error) {
	switch s {
	case "PwdRuleUpdateMessageId_OutOfDateType":
		return PwdRuleUpdateMessageId_OutOfDateType, nil
	case "PwdRuleUpdateMessageId_ComplexType":
		return PwdRuleUpdateMessageId_ComplexType, nil
	}
	return PwdRuleUpdateMessageId(0), fmt.Errorf("not a valid PwdRuleUpdateMessageId string")
}

func PwdRuleUpdateMessageIdPtr(v PwdRuleUpdateMessageId) *PwdRuleUpdateMessageId { return &v }

type PwdComplexType int64

const (
	PwdComplexType_type_1 PwdComplexType = 1
	PwdComplexType_type_2 PwdComplexType = 2
	PwdComplexType_type_3 PwdComplexType = 3
)

func (p PwdComplexType) String() string {
	switch p {
	case PwdComplexType_type_1:
		return "PwdComplexType_type_1"
	case PwdComplexType_type_2:
		return "PwdComplexType_type_2"
	case PwdComplexType_type_3:
		return "PwdComplexType_type_3"
	}
	return "<UNSET>"
}

func PwdComplexTypeFromString(s string) (PwdComplexType, error) {
	switch s {
	case "PwdComplexType_type_1":
		return PwdComplexType_type_1, nil
	case "PwdComplexType_type_2":
		return PwdComplexType_type_2, nil
	case "PwdComplexType_type_3":
		return PwdComplexType_type_3, nil
	}
	return PwdComplexType(0), fmt.Errorf("not a valid PwdComplexType string")
}

func PwdComplexTypePtr(v PwdComplexType) *PwdComplexType { return &v }

type ClientGuideMessageId int64

const (
	ClientGuideMessageId_MobileClientGuide ClientGuideMessageId = 1
	ClientGuideMessageId_PCClientGuide     ClientGuideMessageId = 2
)

func (p ClientGuideMessageId) String() string {
	switch p {
	case ClientGuideMessageId_MobileClientGuide:
		return "ClientGuideMessageId_MobileClientGuide"
	case ClientGuideMessageId_PCClientGuide:
		return "ClientGuideMessageId_PCClientGuide"
	}
	return "<UNSET>"
}

func ClientGuideMessageIdFromString(s string) (ClientGuideMessageId, error) {
	switch s {
	case "ClientGuideMessageId_MobileClientGuide":
		return ClientGuideMessageId_MobileClientGuide, nil
	case "ClientGuideMessageId_PCClientGuide":
		return ClientGuideMessageId_PCClientGuide, nil
	}
	return ClientGuideMessageId(0), fmt.Errorf("not a valid ClientGuideMessageId string")
}

func ClientGuideMessageIdPtr(v ClientGuideMessageId) *ClientGuideMessageId { return &v }

type FileTransmissionMessageType int64

const (
	FileTransmissionMessageType_DefaultType FileTransmissionMessageType = 1
)

func (p FileTransmissionMessageType) String() string {
	switch p {
	case FileTransmissionMessageType_DefaultType:
		return "FileTransmissionMessageType_DefaultType"
	}
	return "<UNSET>"
}

func FileTransmissionMessageTypeFromString(s string) (FileTransmissionMessageType, error) {
	switch s {
	case "FileTransmissionMessageType_DefaultType":
		return FileTransmissionMessageType_DefaultType, nil
	}
	return FileTransmissionMessageType(0), fmt.Errorf("not a valid FileTransmissionMessageType string")
}

func FileTransmissionMessageTypePtr(v FileTransmissionMessageType) *FileTransmissionMessageType {
	return &v
}

type FileTransmissionMessageId int64

const (
	FileTransmissionMessageId_TransInvite  FileTransmissionMessageId = 1
	FileTransmissionMessageId_TransReceive FileTransmissionMessageId = 2
	FileTransmissionMessageId_TransReject  FileTransmissionMessageId = 3
	FileTransmissionMessageId_TransStop    FileTransmissionMessageId = 4
)

func (p FileTransmissionMessageId) String() string {
	switch p {
	case FileTransmissionMessageId_TransInvite:
		return "FileTransmissionMessageId_TransInvite"
	case FileTransmissionMessageId_TransReceive:
		return "FileTransmissionMessageId_TransReceive"
	case FileTransmissionMessageId_TransReject:
		return "FileTransmissionMessageId_TransReject"
	case FileTransmissionMessageId_TransStop:
		return "FileTransmissionMessageId_TransStop"
	}
	return "<UNSET>"
}

func FileTransmissionMessageIdFromString(s string) (FileTransmissionMessageId, error) {
	switch s {
	case "FileTransmissionMessageId_TransInvite":
		return FileTransmissionMessageId_TransInvite, nil
	case "FileTransmissionMessageId_TransReceive":
		return FileTransmissionMessageId_TransReceive, nil
	case "FileTransmissionMessageId_TransReject":
		return FileTransmissionMessageId_TransReject, nil
	case "FileTransmissionMessageId_TransStop":
		return FileTransmissionMessageId_TransStop, nil
	}
	return FileTransmissionMessageId(0), fmt.Errorf("not a valid FileTransmissionMessageId string")
}

func FileTransmissionMessageIdPtr(v FileTransmissionMessageId) *FileTransmissionMessageId { return &v }

type OrganizeProtoMessageType int64

const (
	OrganizeProtoMessageType_OrganizeType OrganizeProtoMessageType = 1
)

func (p OrganizeProtoMessageType) String() string {
	switch p {
	case OrganizeProtoMessageType_OrganizeType:
		return "OrganizeProtoMessageType_OrganizeType"
	}
	return "<UNSET>"
}

func OrganizeProtoMessageTypeFromString(s string) (OrganizeProtoMessageType, error) {
	switch s {
	case "OrganizeProtoMessageType_OrganizeType":
		return OrganizeProtoMessageType_OrganizeType, nil
	}
	return OrganizeProtoMessageType(0), fmt.Errorf("not a valid OrganizeProtoMessageType string")
}

func OrganizeProtoMessageTypePtr(v OrganizeProtoMessageType) *OrganizeProtoMessageType { return &v }

type OrganizeProtoMessageId int64

const (
	OrganizeProtoMessageId_DeptUpdate           OrganizeProtoMessageId = 1
	OrganizeProtoMessageId_DeptTransfer         OrganizeProtoMessageId = 2
	OrganizeProtoMessageId_PositionUpdate       OrganizeProtoMessageId = 3
	OrganizeProtoMessageId_EmployeeEntry        OrganizeProtoMessageId = 4
	OrganizeProtoMessageId_EmployeeLeave        OrganizeProtoMessageId = 5
	OrganizeProtoMessageId_EmployeeRightsUpdate OrganizeProtoMessageId = 6
	OrganizeProtoMessageId_EmployeeJoin         OrganizeProtoMessageId = 7
	OrganizeProtoMessageId_DeptParentChange     OrganizeProtoMessageId = 8
	OrganizeProtoMessageId_CompanyJoin          OrganizeProtoMessageId = 9
	OrganizeProtoMessageId_DeptDelete           OrganizeProtoMessageId = 10
	OrganizeProtoMessageId_EmployeeEntryConfirm OrganizeProtoMessageId = 11
	OrganizeProtoMessageId_EmployeeLeaveConfirm OrganizeProtoMessageId = 12
	OrganizeProtoMessageId_DeptTransferConfirm  OrganizeProtoMessageId = 13
	OrganizeProtoMessageId_EmployeeEntryReject  OrganizeProtoMessageId = 14
	OrganizeProtoMessageId_EmployeeLeaveReject  OrganizeProtoMessageId = 15
	OrganizeProtoMessageId_DeptTransferReject   OrganizeProtoMessageId = 16
)

func (p OrganizeProtoMessageId) String() string {
	switch p {
	case OrganizeProtoMessageId_DeptUpdate:
		return "OrganizeProtoMessageId_DeptUpdate"
	case OrganizeProtoMessageId_DeptTransfer:
		return "OrganizeProtoMessageId_DeptTransfer"
	case OrganizeProtoMessageId_PositionUpdate:
		return "OrganizeProtoMessageId_PositionUpdate"
	case OrganizeProtoMessageId_EmployeeEntry:
		return "OrganizeProtoMessageId_EmployeeEntry"
	case OrganizeProtoMessageId_EmployeeLeave:
		return "OrganizeProtoMessageId_EmployeeLeave"
	case OrganizeProtoMessageId_EmployeeRightsUpdate:
		return "OrganizeProtoMessageId_EmployeeRightsUpdate"
	case OrganizeProtoMessageId_EmployeeJoin:
		return "OrganizeProtoMessageId_EmployeeJoin"
	case OrganizeProtoMessageId_DeptParentChange:
		return "OrganizeProtoMessageId_DeptParentChange"
	case OrganizeProtoMessageId_CompanyJoin:
		return "OrganizeProtoMessageId_CompanyJoin"
	case OrganizeProtoMessageId_DeptDelete:
		return "OrganizeProtoMessageId_DeptDelete"
	case OrganizeProtoMessageId_EmployeeEntryConfirm:
		return "OrganizeProtoMessageId_EmployeeEntryConfirm"
	case OrganizeProtoMessageId_EmployeeLeaveConfirm:
		return "OrganizeProtoMessageId_EmployeeLeaveConfirm"
	case OrganizeProtoMessageId_DeptTransferConfirm:
		return "OrganizeProtoMessageId_DeptTransferConfirm"
	case OrganizeProtoMessageId_EmployeeEntryReject:
		return "OrganizeProtoMessageId_EmployeeEntryReject"
	case OrganizeProtoMessageId_EmployeeLeaveReject:
		return "OrganizeProtoMessageId_EmployeeLeaveReject"
	case OrganizeProtoMessageId_DeptTransferReject:
		return "OrganizeProtoMessageId_DeptTransferReject"
	}
	return "<UNSET>"
}

func OrganizeProtoMessageIdFromString(s string) (OrganizeProtoMessageId, error) {
	switch s {
	case "OrganizeProtoMessageId_DeptUpdate":
		return OrganizeProtoMessageId_DeptUpdate, nil
	case "OrganizeProtoMessageId_DeptTransfer":
		return OrganizeProtoMessageId_DeptTransfer, nil
	case "OrganizeProtoMessageId_PositionUpdate":
		return OrganizeProtoMessageId_PositionUpdate, nil
	case "OrganizeProtoMessageId_EmployeeEntry":
		return OrganizeProtoMessageId_EmployeeEntry, nil
	case "OrganizeProtoMessageId_EmployeeLeave":
		return OrganizeProtoMessageId_EmployeeLeave, nil
	case "OrganizeProtoMessageId_EmployeeRightsUpdate":
		return OrganizeProtoMessageId_EmployeeRightsUpdate, nil
	case "OrganizeProtoMessageId_EmployeeJoin":
		return OrganizeProtoMessageId_EmployeeJoin, nil
	case "OrganizeProtoMessageId_DeptParentChange":
		return OrganizeProtoMessageId_DeptParentChange, nil
	case "OrganizeProtoMessageId_CompanyJoin":
		return OrganizeProtoMessageId_CompanyJoin, nil
	case "OrganizeProtoMessageId_DeptDelete":
		return OrganizeProtoMessageId_DeptDelete, nil
	case "OrganizeProtoMessageId_EmployeeEntryConfirm":
		return OrganizeProtoMessageId_EmployeeEntryConfirm, nil
	case "OrganizeProtoMessageId_EmployeeLeaveConfirm":
		return OrganizeProtoMessageId_EmployeeLeaveConfirm, nil
	case "OrganizeProtoMessageId_DeptTransferConfirm":
		return OrganizeProtoMessageId_DeptTransferConfirm, nil
	case "OrganizeProtoMessageId_EmployeeEntryReject":
		return OrganizeProtoMessageId_EmployeeEntryReject, nil
	case "OrganizeProtoMessageId_EmployeeLeaveReject":
		return OrganizeProtoMessageId_EmployeeLeaveReject, nil
	case "OrganizeProtoMessageId_DeptTransferReject":
		return OrganizeProtoMessageId_DeptTransferReject, nil
	}
	return OrganizeProtoMessageId(0), fmt.Errorf("not a valid OrganizeProtoMessageId string")
}

func OrganizeProtoMessageIdPtr(v OrganizeProtoMessageId) *OrganizeProtoMessageId { return &v }

type ConfMessageType int64

const (
	ConfMessageType_NormalInstantConfInviteMsg     ConfMessageType = 1
	ConfMessageType_ConfInviteMsg                  ConfMessageType = 2
	ConfMessageType_ConfUpdateMsg                  ConfMessageType = 3
	ConfMessageType_ConfCancelMsg                  ConfMessageType = 4
	ConfMessageType_ConfForwardMsg                 ConfMessageType = 5
	ConfMessageType_ConfAlertMsg                   ConfMessageType = 6
	ConfMessageType_ConfShareMsg                   ConfMessageType = 7
	ConfMessageType_DiscussionInstantConfInviteMsg ConfMessageType = 8
	ConfMessageType_ConfChatMsg                    ConfMessageType = 9
	ConfMessageType_ConfSummaryMsg                 ConfMessageType = 10
	ConfMessageType_ConfStateMsg                   ConfMessageType = 11
	ConfMessageType_ConfUploadMsg                  ConfMessageType = 12
	ConfMessageType_ConfDelDocMsg                  ConfMessageType = 13
	ConfMessageType_ConfReportMsg                  ConfMessageType = 14
)

func (p ConfMessageType) String() string {
	switch p {
	case ConfMessageType_NormalInstantConfInviteMsg:
		return "ConfMessageType_NormalInstantConfInviteMsg"
	case ConfMessageType_ConfInviteMsg:
		return "ConfMessageType_ConfInviteMsg"
	case ConfMessageType_ConfUpdateMsg:
		return "ConfMessageType_ConfUpdateMsg"
	case ConfMessageType_ConfCancelMsg:
		return "ConfMessageType_ConfCancelMsg"
	case ConfMessageType_ConfForwardMsg:
		return "ConfMessageType_ConfForwardMsg"
	case ConfMessageType_ConfAlertMsg:
		return "ConfMessageType_ConfAlertMsg"
	case ConfMessageType_ConfShareMsg:
		return "ConfMessageType_ConfShareMsg"
	case ConfMessageType_DiscussionInstantConfInviteMsg:
		return "ConfMessageType_DiscussionInstantConfInviteMsg"
	case ConfMessageType_ConfChatMsg:
		return "ConfMessageType_ConfChatMsg"
	case ConfMessageType_ConfSummaryMsg:
		return "ConfMessageType_ConfSummaryMsg"
	case ConfMessageType_ConfStateMsg:
		return "ConfMessageType_ConfStateMsg"
	case ConfMessageType_ConfUploadMsg:
		return "ConfMessageType_ConfUploadMsg"
	case ConfMessageType_ConfDelDocMsg:
		return "ConfMessageType_ConfDelDocMsg"
	case ConfMessageType_ConfReportMsg:
		return "ConfMessageType_ConfReportMsg"
	}
	return "<UNSET>"
}

func ConfMessageTypeFromString(s string) (ConfMessageType, error) {
	switch s {
	case "ConfMessageType_NormalInstantConfInviteMsg":
		return ConfMessageType_NormalInstantConfInviteMsg, nil
	case "ConfMessageType_ConfInviteMsg":
		return ConfMessageType_ConfInviteMsg, nil
	case "ConfMessageType_ConfUpdateMsg":
		return ConfMessageType_ConfUpdateMsg, nil
	case "ConfMessageType_ConfCancelMsg":
		return ConfMessageType_ConfCancelMsg, nil
	case "ConfMessageType_ConfForwardMsg":
		return ConfMessageType_ConfForwardMsg, nil
	case "ConfMessageType_ConfAlertMsg":
		return ConfMessageType_ConfAlertMsg, nil
	case "ConfMessageType_ConfShareMsg":
		return ConfMessageType_ConfShareMsg, nil
	case "ConfMessageType_DiscussionInstantConfInviteMsg":
		return ConfMessageType_DiscussionInstantConfInviteMsg, nil
	case "ConfMessageType_ConfChatMsg":
		return ConfMessageType_ConfChatMsg, nil
	case "ConfMessageType_ConfSummaryMsg":
		return ConfMessageType_ConfSummaryMsg, nil
	case "ConfMessageType_ConfStateMsg":
		return ConfMessageType_ConfStateMsg, nil
	case "ConfMessageType_ConfUploadMsg":
		return ConfMessageType_ConfUploadMsg, nil
	case "ConfMessageType_ConfDelDocMsg":
		return ConfMessageType_ConfDelDocMsg, nil
	case "ConfMessageType_ConfReportMsg":
		return ConfMessageType_ConfReportMsg, nil
	}
	return ConfMessageType(0), fmt.Errorf("not a valid ConfMessageType string")
}

func ConfMessageTypePtr(v ConfMessageType) *ConfMessageType { return &v }

type InstantConfInviteMessageId int64

const (
	InstantConfInviteMessageId_IQInvite  InstantConfInviteMessageId = 1
	InstantConfInviteMessageId_IQReceive InstantConfInviteMessageId = 2
	InstantConfInviteMessageId_IQReject  InstantConfInviteMessageId = 3
)

func (p InstantConfInviteMessageId) String() string {
	switch p {
	case InstantConfInviteMessageId_IQInvite:
		return "InstantConfInviteMessageId_IQInvite"
	case InstantConfInviteMessageId_IQReceive:
		return "InstantConfInviteMessageId_IQReceive"
	case InstantConfInviteMessageId_IQReject:
		return "InstantConfInviteMessageId_IQReject"
	}
	return "<UNSET>"
}

func InstantConfInviteMessageIdFromString(s string) (InstantConfInviteMessageId, error) {
	switch s {
	case "InstantConfInviteMessageId_IQInvite":
		return InstantConfInviteMessageId_IQInvite, nil
	case "InstantConfInviteMessageId_IQReceive":
		return InstantConfInviteMessageId_IQReceive, nil
	case "InstantConfInviteMessageId_IQReject":
		return InstantConfInviteMessageId_IQReject, nil
	}
	return InstantConfInviteMessageId(0), fmt.Errorf("not a valid InstantConfInviteMessageId string")
}

func InstantConfInviteMessageIdPtr(v InstantConfInviteMessageId) *InstantConfInviteMessageId {
	return &v
}

type ConfInviteMessageId int64

const (
	ConfInviteMessageId_IQInvite  ConfInviteMessageId = 1
	ConfInviteMessageId_IQReceive ConfInviteMessageId = 2
	ConfInviteMessageId_IQReject  ConfInviteMessageId = 3
)

func (p ConfInviteMessageId) String() string {
	switch p {
	case ConfInviteMessageId_IQInvite:
		return "ConfInviteMessageId_IQInvite"
	case ConfInviteMessageId_IQReceive:
		return "ConfInviteMessageId_IQReceive"
	case ConfInviteMessageId_IQReject:
		return "ConfInviteMessageId_IQReject"
	}
	return "<UNSET>"
}

func ConfInviteMessageIdFromString(s string) (ConfInviteMessageId, error) {
	switch s {
	case "ConfInviteMessageId_IQInvite":
		return ConfInviteMessageId_IQInvite, nil
	case "ConfInviteMessageId_IQReceive":
		return ConfInviteMessageId_IQReceive, nil
	case "ConfInviteMessageId_IQReject":
		return ConfInviteMessageId_IQReject, nil
	}
	return ConfInviteMessageId(0), fmt.Errorf("not a valid ConfInviteMessageId string")
}

func ConfInviteMessageIdPtr(v ConfInviteMessageId) *ConfInviteMessageId { return &v }

type ConfUpdateMessageId int64

const (
	ConfUpdateMessageId_IQInvite  ConfUpdateMessageId = 1
	ConfUpdateMessageId_IQReceive ConfUpdateMessageId = 2
	ConfUpdateMessageId_IQReject  ConfUpdateMessageId = 3
)

func (p ConfUpdateMessageId) String() string {
	switch p {
	case ConfUpdateMessageId_IQInvite:
		return "ConfUpdateMessageId_IQInvite"
	case ConfUpdateMessageId_IQReceive:
		return "ConfUpdateMessageId_IQReceive"
	case ConfUpdateMessageId_IQReject:
		return "ConfUpdateMessageId_IQReject"
	}
	return "<UNSET>"
}

func ConfUpdateMessageIdFromString(s string) (ConfUpdateMessageId, error) {
	switch s {
	case "ConfUpdateMessageId_IQInvite":
		return ConfUpdateMessageId_IQInvite, nil
	case "ConfUpdateMessageId_IQReceive":
		return ConfUpdateMessageId_IQReceive, nil
	case "ConfUpdateMessageId_IQReject":
		return ConfUpdateMessageId_IQReject, nil
	}
	return ConfUpdateMessageId(0), fmt.Errorf("not a valid ConfUpdateMessageId string")
}

func ConfUpdateMessageIdPtr(v ConfUpdateMessageId) *ConfUpdateMessageId { return &v }

type ConfCancelMessageId int64

const (
	ConfCancelMessageId_DefaultId           ConfCancelMessageId = 1
	ConfCancelMessageId_RecurrentConfCancel ConfCancelMessageId = 2
)

func (p ConfCancelMessageId) String() string {
	switch p {
	case ConfCancelMessageId_DefaultId:
		return "ConfCancelMessageId_DefaultId"
	case ConfCancelMessageId_RecurrentConfCancel:
		return "ConfCancelMessageId_RecurrentConfCancel"
	}
	return "<UNSET>"
}

func ConfCancelMessageIdFromString(s string) (ConfCancelMessageId, error) {
	switch s {
	case "ConfCancelMessageId_DefaultId":
		return ConfCancelMessageId_DefaultId, nil
	case "ConfCancelMessageId_RecurrentConfCancel":
		return ConfCancelMessageId_RecurrentConfCancel, nil
	}
	return ConfCancelMessageId(0), fmt.Errorf("not a valid ConfCancelMessageId string")
}

func ConfCancelMessageIdPtr(v ConfCancelMessageId) *ConfCancelMessageId { return &v }

type ConfAlertMessageId int64

const (
	ConfAlertMessageId_FifteenMinutesAlert ConfAlertMessageId = 1
	ConfAlertMessageId_ZeroMinutesAlert    ConfAlertMessageId = 2
	ConfAlertMessageId_ConfStartAlert      ConfAlertMessageId = 3
	ConfAlertMessageId_ConfEndAlert        ConfAlertMessageId = 4
	ConfAlertMessageId_PartJoinAlert       ConfAlertMessageId = 5
	ConfAlertMessageId_PartQuitAlert       ConfAlertMessageId = 6
)

func (p ConfAlertMessageId) String() string {
	switch p {
	case ConfAlertMessageId_FifteenMinutesAlert:
		return "ConfAlertMessageId_FifteenMinutesAlert"
	case ConfAlertMessageId_ZeroMinutesAlert:
		return "ConfAlertMessageId_ZeroMinutesAlert"
	case ConfAlertMessageId_ConfStartAlert:
		return "ConfAlertMessageId_ConfStartAlert"
	case ConfAlertMessageId_ConfEndAlert:
		return "ConfAlertMessageId_ConfEndAlert"
	case ConfAlertMessageId_PartJoinAlert:
		return "ConfAlertMessageId_PartJoinAlert"
	case ConfAlertMessageId_PartQuitAlert:
		return "ConfAlertMessageId_PartQuitAlert"
	}
	return "<UNSET>"
}

func ConfAlertMessageIdFromString(s string) (ConfAlertMessageId, error) {
	switch s {
	case "ConfAlertMessageId_FifteenMinutesAlert":
		return ConfAlertMessageId_FifteenMinutesAlert, nil
	case "ConfAlertMessageId_ZeroMinutesAlert":
		return ConfAlertMessageId_ZeroMinutesAlert, nil
	case "ConfAlertMessageId_ConfStartAlert":
		return ConfAlertMessageId_ConfStartAlert, nil
	case "ConfAlertMessageId_ConfEndAlert":
		return ConfAlertMessageId_ConfEndAlert, nil
	case "ConfAlertMessageId_PartJoinAlert":
		return ConfAlertMessageId_PartJoinAlert, nil
	case "ConfAlertMessageId_PartQuitAlert":
		return ConfAlertMessageId_PartQuitAlert, nil
	}
	return ConfAlertMessageId(0), fmt.Errorf("not a valid ConfAlertMessageId string")
}

func ConfAlertMessageIdPtr(v ConfAlertMessageId) *ConfAlertMessageId { return &v }

type RoleType int64

const (
	RoleType_Host    RoleType = 4
	RoleType_Speaker RoleType = 5
	RoleType_Part    RoleType = 0
)

func (p RoleType) String() string {
	switch p {
	case RoleType_Host:
		return "RoleType_Host"
	case RoleType_Speaker:
		return "RoleType_Speaker"
	case RoleType_Part:
		return "RoleType_Part"
	}
	return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
	switch s {
	case "RoleType_Host":
		return RoleType_Host, nil
	case "RoleType_Speaker":
		return RoleType_Speaker, nil
	case "RoleType_Part":
		return RoleType_Part, nil
	}
	return RoleType(0), fmt.Errorf("not a valid RoleType string")
}

func RoleTypePtr(v RoleType) *RoleType { return &v }

type ConfChatMessageId int64

const (
	ConfChatMessageId_TextType        ConfChatMessageId = 1
	ConfChatMessageId_MediaType       ConfChatMessageId = 2
	ConfChatMessageId_RevocationMsg   ConfChatMessageId = 3
	ConfChatMessageId_EmojiMsg        ConfChatMessageId = 4
	ConfChatMessageId_CloudFileCreate ConfChatMessageId = 5
)

func (p ConfChatMessageId) String() string {
	switch p {
	case ConfChatMessageId_TextType:
		return "ConfChatMessageId_TextType"
	case ConfChatMessageId_MediaType:
		return "ConfChatMessageId_MediaType"
	case ConfChatMessageId_RevocationMsg:
		return "ConfChatMessageId_RevocationMsg"
	case ConfChatMessageId_EmojiMsg:
		return "ConfChatMessageId_EmojiMsg"
	case ConfChatMessageId_CloudFileCreate:
		return "ConfChatMessageId_CloudFileCreate"
	}
	return "<UNSET>"
}

func ConfChatMessageIdFromString(s string) (ConfChatMessageId, error) {
	switch s {
	case "ConfChatMessageId_TextType":
		return ConfChatMessageId_TextType, nil
	case "ConfChatMessageId_MediaType":
		return ConfChatMessageId_MediaType, nil
	case "ConfChatMessageId_RevocationMsg":
		return ConfChatMessageId_RevocationMsg, nil
	case "ConfChatMessageId_EmojiMsg":
		return ConfChatMessageId_EmojiMsg, nil
	case "ConfChatMessageId_CloudFileCreate":
		return ConfChatMessageId_CloudFileCreate, nil
	}
	return ConfChatMessageId(0), fmt.Errorf("not a valid ConfChatMessageId string")
}

func ConfChatMessageIdPtr(v ConfChatMessageId) *ConfChatMessageId { return &v }

type ConfSummaryMessageId int64

const (
	ConfSummaryMessageId_SummaryCreate  ConfSummaryMessageId = 1
	ConfSummaryMessageId_SummaryUpdate  ConfSummaryMessageId = 2
	ConfSummaryMessageId_SummaryForward ConfSummaryMessageId = 3
)

func (p ConfSummaryMessageId) String() string {
	switch p {
	case ConfSummaryMessageId_SummaryCreate:
		return "ConfSummaryMessageId_SummaryCreate"
	case ConfSummaryMessageId_SummaryUpdate:
		return "ConfSummaryMessageId_SummaryUpdate"
	case ConfSummaryMessageId_SummaryForward:
		return "ConfSummaryMessageId_SummaryForward"
	}
	return "<UNSET>"
}

func ConfSummaryMessageIdFromString(s string) (ConfSummaryMessageId, error) {
	switch s {
	case "ConfSummaryMessageId_SummaryCreate":
		return ConfSummaryMessageId_SummaryCreate, nil
	case "ConfSummaryMessageId_SummaryUpdate":
		return ConfSummaryMessageId_SummaryUpdate, nil
	case "ConfSummaryMessageId_SummaryForward":
		return ConfSummaryMessageId_SummaryForward, nil
	}
	return ConfSummaryMessageId(0), fmt.Errorf("not a valid ConfSummaryMessageId string")
}

func ConfSummaryMessageIdPtr(v ConfSummaryMessageId) *ConfSummaryMessageId { return &v }

type ConfSummaryState int64

const (
	ConfSummaryState_StateNew     ConfSummaryState = 1
	ConfSummaryState_StatePublish ConfSummaryState = 2
	ConfSummaryState_StateDelete  ConfSummaryState = 3
)

func (p ConfSummaryState) String() string {
	switch p {
	case ConfSummaryState_StateNew:
		return "ConfSummaryState_StateNew"
	case ConfSummaryState_StatePublish:
		return "ConfSummaryState_StatePublish"
	case ConfSummaryState_StateDelete:
		return "ConfSummaryState_StateDelete"
	}
	return "<UNSET>"
}

func ConfSummaryStateFromString(s string) (ConfSummaryState, error) {
	switch s {
	case "ConfSummaryState_StateNew":
		return ConfSummaryState_StateNew, nil
	case "ConfSummaryState_StatePublish":
		return ConfSummaryState_StatePublish, nil
	case "ConfSummaryState_StateDelete":
		return ConfSummaryState_StateDelete, nil
	}
	return ConfSummaryState(0), fmt.Errorf("not a valid ConfSummaryState string")
}

func ConfSummaryStatePtr(v ConfSummaryState) *ConfSummaryState { return &v }

type ConfStateMessageId int64

const (
	ConfStateMessageId_callState ConfStateMessageId = 1
)

func (p ConfStateMessageId) String() string {
	switch p {
	case ConfStateMessageId_callState:
		return "ConfStateMessageId_callState"
	}
	return "<UNSET>"
}

func ConfStateMessageIdFromString(s string) (ConfStateMessageId, error) {
	switch s {
	case "ConfStateMessageId_callState":
		return ConfStateMessageId_callState, nil
	}
	return ConfStateMessageId(0), fmt.Errorf("not a valid ConfStateMessageId string")
}

func ConfStateMessageIdPtr(v ConfStateMessageId) *ConfStateMessageId { return &v }

type ConfFileMessageId int64

const (
	ConfFileMessageId_ConfFileUpload ConfFileMessageId = 1
)

func (p ConfFileMessageId) String() string {
	switch p {
	case ConfFileMessageId_ConfFileUpload:
		return "ConfFileMessageId_ConfFileUpload"
	}
	return "<UNSET>"
}

func ConfFileMessageIdFromString(s string) (ConfFileMessageId, error) {
	switch s {
	case "ConfFileMessageId_ConfFileUpload":
		return ConfFileMessageId_ConfFileUpload, nil
	}
	return ConfFileMessageId(0), fmt.Errorf("not a valid ConfFileMessageId string")
}

func ConfFileMessageIdPtr(v ConfFileMessageId) *ConfFileMessageId { return &v }

type CalendarMessageType int64

const (
	CalendarMessageType_CalendarShareType CalendarMessageType = 7
)

func (p CalendarMessageType) String() string {
	switch p {
	case CalendarMessageType_CalendarShareType:
		return "CalendarMessageType_CalendarShareType"
	}
	return "<UNSET>"
}

func CalendarMessageTypeFromString(s string) (CalendarMessageType, error) {
	switch s {
	case "CalendarMessageType_CalendarShareType":
		return CalendarMessageType_CalendarShareType, nil
	}
	return CalendarMessageType(0), fmt.Errorf("not a valid CalendarMessageType string")
}

func CalendarMessageTypePtr(v CalendarMessageType) *CalendarMessageType { return &v }

type ConfShareMessageId int64

const (
	ConfShareMessageId_ConfShareCreate          ConfShareMessageId = 1
	ConfShareMessageId_ConfShareCancel          ConfShareMessageId = 2
	ConfShareMessageId_ConfShareGrantorDisable  ConfShareMessageId = 3
	ConfShareMessageId_ConfShareGranteeDisable  ConfShareMessageId = 4
	ConfShareMessageId_ConfShareGranteeTransfer ConfShareMessageId = 5
	ConfShareMessageId_ConfShareGrantorLeave    ConfShareMessageId = 6
	ConfShareMessageId_ConfShareGranteeLeave    ConfShareMessageId = 7
)

func (p ConfShareMessageId) String() string {
	switch p {
	case ConfShareMessageId_ConfShareCreate:
		return "ConfShareMessageId_ConfShareCreate"
	case ConfShareMessageId_ConfShareCancel:
		return "ConfShareMessageId_ConfShareCancel"
	case ConfShareMessageId_ConfShareGrantorDisable:
		return "ConfShareMessageId_ConfShareGrantorDisable"
	case ConfShareMessageId_ConfShareGranteeDisable:
		return "ConfShareMessageId_ConfShareGranteeDisable"
	case ConfShareMessageId_ConfShareGranteeTransfer:
		return "ConfShareMessageId_ConfShareGranteeTransfer"
	case ConfShareMessageId_ConfShareGrantorLeave:
		return "ConfShareMessageId_ConfShareGrantorLeave"
	case ConfShareMessageId_ConfShareGranteeLeave:
		return "ConfShareMessageId_ConfShareGranteeLeave"
	}
	return "<UNSET>"
}

func ConfShareMessageIdFromString(s string) (ConfShareMessageId, error) {
	switch s {
	case "ConfShareMessageId_ConfShareCreate":
		return ConfShareMessageId_ConfShareCreate, nil
	case "ConfShareMessageId_ConfShareCancel":
		return ConfShareMessageId_ConfShareCancel, nil
	case "ConfShareMessageId_ConfShareGrantorDisable":
		return ConfShareMessageId_ConfShareGrantorDisable, nil
	case "ConfShareMessageId_ConfShareGranteeDisable":
		return ConfShareMessageId_ConfShareGranteeDisable, nil
	case "ConfShareMessageId_ConfShareGranteeTransfer":
		return ConfShareMessageId_ConfShareGranteeTransfer, nil
	case "ConfShareMessageId_ConfShareGrantorLeave":
		return ConfShareMessageId_ConfShareGrantorLeave, nil
	case "ConfShareMessageId_ConfShareGranteeLeave":
		return ConfShareMessageId_ConfShareGranteeLeave, nil
	}
	return ConfShareMessageId(0), fmt.Errorf("not a valid ConfShareMessageId string")
}

func ConfShareMessageIdPtr(v ConfShareMessageId) *ConfShareMessageId { return &v }

type AudioChatMessageType int64

const (
	AudioChatMessageType_DefaultType               AudioChatMessageType = 1
	AudioChatMessageType_AudioCallRecord           AudioChatMessageType = 2
	AudioChatMessageType_AudioUnfamiliarCallRecord AudioChatMessageType = 3
	AudioChatMessageType_DiscussionType            AudioChatMessageType = 4
	AudioChatMessageType_GroupType                 AudioChatMessageType = 5
)

func (p AudioChatMessageType) String() string {
	switch p {
	case AudioChatMessageType_DefaultType:
		return "AudioChatMessageType_DefaultType"
	case AudioChatMessageType_AudioCallRecord:
		return "AudioChatMessageType_AudioCallRecord"
	case AudioChatMessageType_AudioUnfamiliarCallRecord:
		return "AudioChatMessageType_AudioUnfamiliarCallRecord"
	case AudioChatMessageType_DiscussionType:
		return "AudioChatMessageType_DiscussionType"
	case AudioChatMessageType_GroupType:
		return "AudioChatMessageType_GroupType"
	}
	return "<UNSET>"
}

func AudioChatMessageTypeFromString(s string) (AudioChatMessageType, error) {
	switch s {
	case "AudioChatMessageType_DefaultType":
		return AudioChatMessageType_DefaultType, nil
	case "AudioChatMessageType_AudioCallRecord":
		return AudioChatMessageType_AudioCallRecord, nil
	case "AudioChatMessageType_AudioUnfamiliarCallRecord":
		return AudioChatMessageType_AudioUnfamiliarCallRecord, nil
	case "AudioChatMessageType_DiscussionType":
		return AudioChatMessageType_DiscussionType, nil
	case "AudioChatMessageType_GroupType":
		return AudioChatMessageType_GroupType, nil
	}
	return AudioChatMessageType(0), fmt.Errorf("not a valid AudioChatMessageType string")
}

func AudioChatMessageTypePtr(v AudioChatMessageType) *AudioChatMessageType { return &v }

type AudioChatMessageId int64

const (
	AudioChatMessageId_AudioInvite     AudioChatMessageId = 1
	AudioChatMessageId_AudioReceive    AudioChatMessageId = 2
	AudioChatMessageId_AudioReject     AudioChatMessageId = 3
	AudioChatMessageId_AudioStop       AudioChatMessageId = 4
	AudioChatMessageId_AudioCancelCall AudioChatMessageId = 5
	AudioChatMessageId_AudioBlockCall  AudioChatMessageId = 6
	AudioChatMessageId_AudioRejectCall AudioChatMessageId = 7
	AudioChatMessageId_AudioRecentCall AudioChatMessageId = 8
)

func (p AudioChatMessageId) String() string {
	switch p {
	case AudioChatMessageId_AudioInvite:
		return "AudioChatMessageId_AudioInvite"
	case AudioChatMessageId_AudioReceive:
		return "AudioChatMessageId_AudioReceive"
	case AudioChatMessageId_AudioReject:
		return "AudioChatMessageId_AudioReject"
	case AudioChatMessageId_AudioStop:
		return "AudioChatMessageId_AudioStop"
	case AudioChatMessageId_AudioCancelCall:
		return "AudioChatMessageId_AudioCancelCall"
	case AudioChatMessageId_AudioBlockCall:
		return "AudioChatMessageId_AudioBlockCall"
	case AudioChatMessageId_AudioRejectCall:
		return "AudioChatMessageId_AudioRejectCall"
	case AudioChatMessageId_AudioRecentCall:
		return "AudioChatMessageId_AudioRecentCall"
	}
	return "<UNSET>"
}

func AudioChatMessageIdFromString(s string) (AudioChatMessageId, error) {
	switch s {
	case "AudioChatMessageId_AudioInvite":
		return AudioChatMessageId_AudioInvite, nil
	case "AudioChatMessageId_AudioReceive":
		return AudioChatMessageId_AudioReceive, nil
	case "AudioChatMessageId_AudioReject":
		return AudioChatMessageId_AudioReject, nil
	case "AudioChatMessageId_AudioStop":
		return AudioChatMessageId_AudioStop, nil
	case "AudioChatMessageId_AudioCancelCall":
		return AudioChatMessageId_AudioCancelCall, nil
	case "AudioChatMessageId_AudioBlockCall":
		return AudioChatMessageId_AudioBlockCall, nil
	case "AudioChatMessageId_AudioRejectCall":
		return AudioChatMessageId_AudioRejectCall, nil
	case "AudioChatMessageId_AudioRecentCall":
		return AudioChatMessageId_AudioRecentCall, nil
	}
	return AudioChatMessageId(0), fmt.Errorf("not a valid AudioChatMessageId string")
}

func AudioChatMessageIdPtr(v AudioChatMessageId) *AudioChatMessageId { return &v }

type AudioCallMessageId int64

const (
	AudioCallMessageId_AudioBlockCall  AudioCallMessageId = 1
	AudioCallMessageId_AudioRejectCall AudioCallMessageId = 2
	AudioCallMessageId_AudioRecentCall AudioCallMessageId = 3
)

func (p AudioCallMessageId) String() string {
	switch p {
	case AudioCallMessageId_AudioBlockCall:
		return "AudioCallMessageId_AudioBlockCall"
	case AudioCallMessageId_AudioRejectCall:
		return "AudioCallMessageId_AudioRejectCall"
	case AudioCallMessageId_AudioRecentCall:
		return "AudioCallMessageId_AudioRecentCall"
	}
	return "<UNSET>"
}

func AudioCallMessageIdFromString(s string) (AudioCallMessageId, error) {
	switch s {
	case "AudioCallMessageId_AudioBlockCall":
		return AudioCallMessageId_AudioBlockCall, nil
	case "AudioCallMessageId_AudioRejectCall":
		return AudioCallMessageId_AudioRejectCall, nil
	case "AudioCallMessageId_AudioRecentCall":
		return AudioCallMessageId_AudioRecentCall, nil
	}
	return AudioCallMessageId(0), fmt.Errorf("not a valid AudioCallMessageId string")
}

func AudioCallMessageIdPtr(v AudioCallMessageId) *AudioCallMessageId { return &v }

type AddressBookMessageType int64

const (
	AddressBookMessageType_CardUpdateMsg              AddressBookMessageType = 1
	AddressBookMessageType_ContacterRelationUpdateMsg AddressBookMessageType = 2
	AddressBookMessageType_AttentionUpdate            AddressBookMessageType = 3
)

func (p AddressBookMessageType) String() string {
	switch p {
	case AddressBookMessageType_CardUpdateMsg:
		return "AddressBookMessageType_CardUpdateMsg"
	case AddressBookMessageType_ContacterRelationUpdateMsg:
		return "AddressBookMessageType_ContacterRelationUpdateMsg"
	case AddressBookMessageType_AttentionUpdate:
		return "AddressBookMessageType_AttentionUpdate"
	}
	return "<UNSET>"
}

func AddressBookMessageTypeFromString(s string) (AddressBookMessageType, error) {
	switch s {
	case "AddressBookMessageType_CardUpdateMsg":
		return AddressBookMessageType_CardUpdateMsg, nil
	case "AddressBookMessageType_ContacterRelationUpdateMsg":
		return AddressBookMessageType_ContacterRelationUpdateMsg, nil
	case "AddressBookMessageType_AttentionUpdate":
		return AddressBookMessageType_AttentionUpdate, nil
	}
	return AddressBookMessageType(0), fmt.Errorf("not a valid AddressBookMessageType string")
}

func AddressBookMessageTypePtr(v AddressBookMessageType) *AddressBookMessageType { return &v }

type CardUpdateMessageId int64

const (
	CardUpdateMessageId_DefaultId CardUpdateMessageId = 1
)

func (p CardUpdateMessageId) String() string {
	switch p {
	case CardUpdateMessageId_DefaultId:
		return "CardUpdateMessageId_DefaultId"
	}
	return "<UNSET>"
}

func CardUpdateMessageIdFromString(s string) (CardUpdateMessageId, error) {
	switch s {
	case "CardUpdateMessageId_DefaultId":
		return CardUpdateMessageId_DefaultId, nil
	}
	return CardUpdateMessageId(0), fmt.Errorf("not a valid CardUpdateMessageId string")
}

func CardUpdateMessageIdPtr(v CardUpdateMessageId) *CardUpdateMessageId { return &v }

type ContacterRelationUpdateMessageId int64

const (
	ContacterRelationUpdateMessageId_ContacterAdd ContacterRelationUpdateMessageId = 1
	ContacterRelationUpdateMessageId_ContacterDel ContacterRelationUpdateMessageId = 2
)

func (p ContacterRelationUpdateMessageId) String() string {
	switch p {
	case ContacterRelationUpdateMessageId_ContacterAdd:
		return "ContacterRelationUpdateMessageId_ContacterAdd"
	case ContacterRelationUpdateMessageId_ContacterDel:
		return "ContacterRelationUpdateMessageId_ContacterDel"
	}
	return "<UNSET>"
}

func ContacterRelationUpdateMessageIdFromString(s string) (ContacterRelationUpdateMessageId, error) {
	switch s {
	case "ContacterRelationUpdateMessageId_ContacterAdd":
		return ContacterRelationUpdateMessageId_ContacterAdd, nil
	case "ContacterRelationUpdateMessageId_ContacterDel":
		return ContacterRelationUpdateMessageId_ContacterDel, nil
	}
	return ContacterRelationUpdateMessageId(0), fmt.Errorf("not a valid ContacterRelationUpdateMessageId string")
}

func ContacterRelationUpdateMessageIdPtr(v ContacterRelationUpdateMessageId) *ContacterRelationUpdateMessageId {
	return &v
}

type AttentionUpdateMessageId int64

const (
	AttentionUpdateMessageId_AttentionCreate AttentionUpdateMessageId = 1
	AttentionUpdateMessageId_AttentionCancel AttentionUpdateMessageId = 2
)

func (p AttentionUpdateMessageId) String() string {
	switch p {
	case AttentionUpdateMessageId_AttentionCreate:
		return "AttentionUpdateMessageId_AttentionCreate"
	case AttentionUpdateMessageId_AttentionCancel:
		return "AttentionUpdateMessageId_AttentionCancel"
	}
	return "<UNSET>"
}

func AttentionUpdateMessageIdFromString(s string) (AttentionUpdateMessageId, error) {
	switch s {
	case "AttentionUpdateMessageId_AttentionCreate":
		return AttentionUpdateMessageId_AttentionCreate, nil
	case "AttentionUpdateMessageId_AttentionCancel":
		return AttentionUpdateMessageId_AttentionCancel, nil
	}
	return AttentionUpdateMessageId(0), fmt.Errorf("not a valid AttentionUpdateMessageId string")
}

func AttentionUpdateMessageIdPtr(v AttentionUpdateMessageId) *AttentionUpdateMessageId { return &v }

type TimeNewsMessageType int64

const (
	TimeNewsMessageType_DefaultType TimeNewsMessageType = 1
)

func (p TimeNewsMessageType) String() string {
	switch p {
	case TimeNewsMessageType_DefaultType:
		return "TimeNewsMessageType_DefaultType"
	}
	return "<UNSET>"
}

func TimeNewsMessageTypeFromString(s string) (TimeNewsMessageType, error) {
	switch s {
	case "TimeNewsMessageType_DefaultType":
		return TimeNewsMessageType_DefaultType, nil
	}
	return TimeNewsMessageType(0), fmt.Errorf("not a valid TimeNewsMessageType string")
}

func TimeNewsMessageTypePtr(v TimeNewsMessageType) *TimeNewsMessageType { return &v }

type TimeNewsMessageId int64

const (
	TimeNewsMessageId_WB_ATTENTION        TimeNewsMessageId = 1
	TimeNewsMessageId_WB_TIMENEWS_PUBLISH TimeNewsMessageId = 2
	TimeNewsMessageId_WB_TIMENEWS_COMMENT TimeNewsMessageId = 3
	TimeNewsMessageId_WB_TIMENEWS_FORWARD TimeNewsMessageId = 4
	TimeNewsMessageId_WB_TIMENEWS_PRAISE  TimeNewsMessageId = 5
)

func (p TimeNewsMessageId) String() string {
	switch p {
	case TimeNewsMessageId_WB_ATTENTION:
		return "TimeNewsMessageId_WB_ATTENTION"
	case TimeNewsMessageId_WB_TIMENEWS_PUBLISH:
		return "TimeNewsMessageId_WB_TIMENEWS_PUBLISH"
	case TimeNewsMessageId_WB_TIMENEWS_COMMENT:
		return "TimeNewsMessageId_WB_TIMENEWS_COMMENT"
	case TimeNewsMessageId_WB_TIMENEWS_FORWARD:
		return "TimeNewsMessageId_WB_TIMENEWS_FORWARD"
	case TimeNewsMessageId_WB_TIMENEWS_PRAISE:
		return "TimeNewsMessageId_WB_TIMENEWS_PRAISE"
	}
	return "<UNSET>"
}

func TimeNewsMessageIdFromString(s string) (TimeNewsMessageId, error) {
	switch s {
	case "TimeNewsMessageId_WB_ATTENTION":
		return TimeNewsMessageId_WB_ATTENTION, nil
	case "TimeNewsMessageId_WB_TIMENEWS_PUBLISH":
		return TimeNewsMessageId_WB_TIMENEWS_PUBLISH, nil
	case "TimeNewsMessageId_WB_TIMENEWS_COMMENT":
		return TimeNewsMessageId_WB_TIMENEWS_COMMENT, nil
	case "TimeNewsMessageId_WB_TIMENEWS_FORWARD":
		return TimeNewsMessageId_WB_TIMENEWS_FORWARD, nil
	case "TimeNewsMessageId_WB_TIMENEWS_PRAISE":
		return TimeNewsMessageId_WB_TIMENEWS_PRAISE, nil
	}
	return TimeNewsMessageId(0), fmt.Errorf("not a valid TimeNewsMessageId string")
}

func TimeNewsMessageIdPtr(v TimeNewsMessageId) *TimeNewsMessageId { return &v }

type CaseMessageType int64

const (
	CaseMessageType_DefaultType CaseMessageType = 1
)

func (p CaseMessageType) String() string {
	switch p {
	case CaseMessageType_DefaultType:
		return "CaseMessageType_DefaultType"
	}
	return "<UNSET>"
}

func CaseMessageTypeFromString(s string) (CaseMessageType, error) {
	switch s {
	case "CaseMessageType_DefaultType":
		return CaseMessageType_DefaultType, nil
	}
	return CaseMessageType(0), fmt.Errorf("not a valid CaseMessageType string")
}

func CaseMessageTypePtr(v CaseMessageType) *CaseMessageType { return &v }

type CaseMessageId int64

const (
	CaseMessageId_WB_CASE_PUBLISH CaseMessageId = 1
	CaseMessageId_WB_CASE_COMMENT CaseMessageId = 2
	CaseMessageId_WB_CASE_FORWARD CaseMessageId = 3
	CaseMessageId_WB_CASE_PRAISE  CaseMessageId = 4
)

func (p CaseMessageId) String() string {
	switch p {
	case CaseMessageId_WB_CASE_PUBLISH:
		return "CaseMessageId_WB_CASE_PUBLISH"
	case CaseMessageId_WB_CASE_COMMENT:
		return "CaseMessageId_WB_CASE_COMMENT"
	case CaseMessageId_WB_CASE_FORWARD:
		return "CaseMessageId_WB_CASE_FORWARD"
	case CaseMessageId_WB_CASE_PRAISE:
		return "CaseMessageId_WB_CASE_PRAISE"
	}
	return "<UNSET>"
}

func CaseMessageIdFromString(s string) (CaseMessageId, error) {
	switch s {
	case "CaseMessageId_WB_CASE_PUBLISH":
		return CaseMessageId_WB_CASE_PUBLISH, nil
	case "CaseMessageId_WB_CASE_COMMENT":
		return CaseMessageId_WB_CASE_COMMENT, nil
	case "CaseMessageId_WB_CASE_FORWARD":
		return CaseMessageId_WB_CASE_FORWARD, nil
	case "CaseMessageId_WB_CASE_PRAISE":
		return CaseMessageId_WB_CASE_PRAISE, nil
	}
	return CaseMessageId(0), fmt.Errorf("not a valid CaseMessageId string")
}

func CaseMessageIdPtr(v CaseMessageId) *CaseMessageId { return &v }

type PollMessageType int64

const (
	PollMessageType_DefaultType PollMessageType = 1
)

func (p PollMessageType) String() string {
	switch p {
	case PollMessageType_DefaultType:
		return "PollMessageType_DefaultType"
	}
	return "<UNSET>"
}

func PollMessageTypeFromString(s string) (PollMessageType, error) {
	switch s {
	case "PollMessageType_DefaultType":
		return PollMessageType_DefaultType, nil
	}
	return PollMessageType(0), fmt.Errorf("not a valid PollMessageType string")
}

func PollMessageTypePtr(v PollMessageType) *PollMessageType { return &v }

type PollMessageId int64

const (
	PollMessageId_WB_POLL_PUBLISH  PollMessageId = 1
	PollMessageId_WB_POLL_COMMENT  PollMessageId = 2
	PollMessageId_WB_POLL_FORWARD  PollMessageId = 3
	PollMessageId_WB_POLL_RESPONSE PollMessageId = 4
	PollMessageId_WB_POLL_PRAISE   PollMessageId = 5
)

func (p PollMessageId) String() string {
	switch p {
	case PollMessageId_WB_POLL_PUBLISH:
		return "PollMessageId_WB_POLL_PUBLISH"
	case PollMessageId_WB_POLL_COMMENT:
		return "PollMessageId_WB_POLL_COMMENT"
	case PollMessageId_WB_POLL_FORWARD:
		return "PollMessageId_WB_POLL_FORWARD"
	case PollMessageId_WB_POLL_RESPONSE:
		return "PollMessageId_WB_POLL_RESPONSE"
	case PollMessageId_WB_POLL_PRAISE:
		return "PollMessageId_WB_POLL_PRAISE"
	}
	return "<UNSET>"
}

func PollMessageIdFromString(s string) (PollMessageId, error) {
	switch s {
	case "PollMessageId_WB_POLL_PUBLISH":
		return PollMessageId_WB_POLL_PUBLISH, nil
	case "PollMessageId_WB_POLL_COMMENT":
		return PollMessageId_WB_POLL_COMMENT, nil
	case "PollMessageId_WB_POLL_FORWARD":
		return PollMessageId_WB_POLL_FORWARD, nil
	case "PollMessageId_WB_POLL_RESPONSE":
		return PollMessageId_WB_POLL_RESPONSE, nil
	case "PollMessageId_WB_POLL_PRAISE":
		return PollMessageId_WB_POLL_PRAISE, nil
	}
	return PollMessageId(0), fmt.Errorf("not a valid PollMessageId string")
}

func PollMessageIdPtr(v PollMessageId) *PollMessageId { return &v }

type RemoteAssistanceMessageType int64

const (
	RemoteAssistanceMessageType_DefaultType RemoteAssistanceMessageType = 1
)

func (p RemoteAssistanceMessageType) String() string {
	switch p {
	case RemoteAssistanceMessageType_DefaultType:
		return "RemoteAssistanceMessageType_DefaultType"
	}
	return "<UNSET>"
}

func RemoteAssistanceMessageTypeFromString(s string) (RemoteAssistanceMessageType, error) {
	switch s {
	case "RemoteAssistanceMessageType_DefaultType":
		return RemoteAssistanceMessageType_DefaultType, nil
	}
	return RemoteAssistanceMessageType(0), fmt.Errorf("not a valid RemoteAssistanceMessageType string")
}

func RemoteAssistanceMessageTypePtr(v RemoteAssistanceMessageType) *RemoteAssistanceMessageType {
	return &v
}

type RemoteAssistanceMessageId int64

const (
	RemoteAssistanceMessageId_RemoteAssistanceInvite RemoteAssistanceMessageId = 1
	RemoteAssistanceMessageId_RemoteAssistanceAccept RemoteAssistanceMessageId = 2
	RemoteAssistanceMessageId_RemoteAssistanceReject RemoteAssistanceMessageId = 3
	RemoteAssistanceMessageId_RemoteAssistanceEnd    RemoteAssistanceMessageId = 4
	RemoteAssistanceMessageId_RemoteAssistanceCancel RemoteAssistanceMessageId = 5
)

func (p RemoteAssistanceMessageId) String() string {
	switch p {
	case RemoteAssistanceMessageId_RemoteAssistanceInvite:
		return "RemoteAssistanceMessageId_RemoteAssistanceInvite"
	case RemoteAssistanceMessageId_RemoteAssistanceAccept:
		return "RemoteAssistanceMessageId_RemoteAssistanceAccept"
	case RemoteAssistanceMessageId_RemoteAssistanceReject:
		return "RemoteAssistanceMessageId_RemoteAssistanceReject"
	case RemoteAssistanceMessageId_RemoteAssistanceEnd:
		return "RemoteAssistanceMessageId_RemoteAssistanceEnd"
	case RemoteAssistanceMessageId_RemoteAssistanceCancel:
		return "RemoteAssistanceMessageId_RemoteAssistanceCancel"
	}
	return "<UNSET>"
}

func RemoteAssistanceMessageIdFromString(s string) (RemoteAssistanceMessageId, error) {
	switch s {
	case "RemoteAssistanceMessageId_RemoteAssistanceInvite":
		return RemoteAssistanceMessageId_RemoteAssistanceInvite, nil
	case "RemoteAssistanceMessageId_RemoteAssistanceAccept":
		return RemoteAssistanceMessageId_RemoteAssistanceAccept, nil
	case "RemoteAssistanceMessageId_RemoteAssistanceReject":
		return RemoteAssistanceMessageId_RemoteAssistanceReject, nil
	case "RemoteAssistanceMessageId_RemoteAssistanceEnd":
		return RemoteAssistanceMessageId_RemoteAssistanceEnd, nil
	case "RemoteAssistanceMessageId_RemoteAssistanceCancel":
		return RemoteAssistanceMessageId_RemoteAssistanceCancel, nil
	}
	return RemoteAssistanceMessageId(0), fmt.Errorf("not a valid RemoteAssistanceMessageId string")
}

func RemoteAssistanceMessageIdPtr(v RemoteAssistanceMessageId) *RemoteAssistanceMessageId { return &v }

type SyncMessageType int64

const (
	SyncMessageType_SessionTopType       SyncMessageType = 1
	SyncMessageType_AtMessageType        SyncMessageType = 2
	SyncMessageType_UserLoginType        SyncMessageType = 3
	SyncMessageType_GroupScopeType       SyncMessageType = 4
	SyncMessageType_ContactsRelationType SyncMessageType = 5
	SyncMessageType_UserSettingType      SyncMessageType = 6
	SyncMessageType_TripRemindType       SyncMessageType = 7
)

func (p SyncMessageType) String() string {
	switch p {
	case SyncMessageType_SessionTopType:
		return "SyncMessageType_SessionTopType"
	case SyncMessageType_AtMessageType:
		return "SyncMessageType_AtMessageType"
	case SyncMessageType_UserLoginType:
		return "SyncMessageType_UserLoginType"
	case SyncMessageType_GroupScopeType:
		return "SyncMessageType_GroupScopeType"
	case SyncMessageType_ContactsRelationType:
		return "SyncMessageType_ContactsRelationType"
	case SyncMessageType_UserSettingType:
		return "SyncMessageType_UserSettingType"
	case SyncMessageType_TripRemindType:
		return "SyncMessageType_TripRemindType"
	}
	return "<UNSET>"
}

func SyncMessageTypeFromString(s string) (SyncMessageType, error) {
	switch s {
	case "SyncMessageType_SessionTopType":
		return SyncMessageType_SessionTopType, nil
	case "SyncMessageType_AtMessageType":
		return SyncMessageType_AtMessageType, nil
	case "SyncMessageType_UserLoginType":
		return SyncMessageType_UserLoginType, nil
	case "SyncMessageType_GroupScopeType":
		return SyncMessageType_GroupScopeType, nil
	case "SyncMessageType_ContactsRelationType":
		return SyncMessageType_ContactsRelationType, nil
	case "SyncMessageType_UserSettingType":
		return SyncMessageType_UserSettingType, nil
	case "SyncMessageType_TripRemindType":
		return SyncMessageType_TripRemindType, nil
	}
	return SyncMessageType(0), fmt.Errorf("not a valid SyncMessageType string")
}

func SyncMessageTypePtr(v SyncMessageType) *SyncMessageType { return &v }

type SyncMessageId int64

const (
	SyncMessageId_SessionTopSet             SyncMessageId = 1
	SyncMessageId_SessionTopUnset           SyncMessageId = 2
	SyncMessageId_AtMessageReaded           SyncMessageId = 16
	SyncMessageId_UserLoginNotify           SyncMessageId = 32
	SyncMessageId_GroupScopeNotify          SyncMessageId = 48
	SyncMessageId_ContactsRelationNotify    SyncMessageId = 64
	SyncMessageId_MeetingAlertSettingNotify SyncMessageId = 80
	SyncMessageId_TripRemindNotify          SyncMessageId = 81
)

func (p SyncMessageId) String() string {
	switch p {
	case SyncMessageId_SessionTopSet:
		return "SyncMessageId_SessionTopSet"
	case SyncMessageId_SessionTopUnset:
		return "SyncMessageId_SessionTopUnset"
	case SyncMessageId_AtMessageReaded:
		return "SyncMessageId_AtMessageReaded"
	case SyncMessageId_UserLoginNotify:
		return "SyncMessageId_UserLoginNotify"
	case SyncMessageId_GroupScopeNotify:
		return "SyncMessageId_GroupScopeNotify"
	case SyncMessageId_ContactsRelationNotify:
		return "SyncMessageId_ContactsRelationNotify"
	case SyncMessageId_MeetingAlertSettingNotify:
		return "SyncMessageId_MeetingAlertSettingNotify"
	case SyncMessageId_TripRemindNotify:
		return "SyncMessageId_TripRemindNotify"
	}
	return "<UNSET>"
}

func SyncMessageIdFromString(s string) (SyncMessageId, error) {
	switch s {
	case "SyncMessageId_SessionTopSet":
		return SyncMessageId_SessionTopSet, nil
	case "SyncMessageId_SessionTopUnset":
		return SyncMessageId_SessionTopUnset, nil
	case "SyncMessageId_AtMessageReaded":
		return SyncMessageId_AtMessageReaded, nil
	case "SyncMessageId_UserLoginNotify":
		return SyncMessageId_UserLoginNotify, nil
	case "SyncMessageId_GroupScopeNotify":
		return SyncMessageId_GroupScopeNotify, nil
	case "SyncMessageId_ContactsRelationNotify":
		return SyncMessageId_ContactsRelationNotify, nil
	case "SyncMessageId_MeetingAlertSettingNotify":
		return SyncMessageId_MeetingAlertSettingNotify, nil
	case "SyncMessageId_TripRemindNotify":
		return SyncMessageId_TripRemindNotify, nil
	}
	return SyncMessageId(0), fmt.Errorf("not a valid SyncMessageId string")
}

func SyncMessageIdPtr(v SyncMessageId) *SyncMessageId { return &v }

type APIMessageType int64

const (
	APIMessageType_AppMsg     APIMessageType = 1
	APIMessageType_AppAck     APIMessageType = 2
	APIMessageType_AppControl APIMessageType = 3
)

func (p APIMessageType) String() string {
	switch p {
	case APIMessageType_AppMsg:
		return "APIMessageType_AppMsg"
	case APIMessageType_AppAck:
		return "APIMessageType_AppAck"
	case APIMessageType_AppControl:
		return "APIMessageType_AppControl"
	}
	return "<UNSET>"
}

func APIMessageTypeFromString(s string) (APIMessageType, error) {
	switch s {
	case "APIMessageType_AppMsg":
		return APIMessageType_AppMsg, nil
	case "APIMessageType_AppAck":
		return APIMessageType_AppAck, nil
	case "APIMessageType_AppControl":
		return APIMessageType_AppControl, nil
	}
	return APIMessageType(0), fmt.Errorf("not a valid APIMessageType string")
}

func APIMessageTypePtr(v APIMessageType) *APIMessageType { return &v }

type APIMessageId int64

const (
	APIMessageId_Text       APIMessageId = 1
	APIMessageId_Image      APIMessageId = 2
	APIMessageId_File       APIMessageId = 3
	APIMessageId_OA         APIMessageId = 4
	APIMessageId_Customized APIMessageId = 5
)

func (p APIMessageId) String() string {
	switch p {
	case APIMessageId_Text:
		return "APIMessageId_Text"
	case APIMessageId_Image:
		return "APIMessageId_Image"
	case APIMessageId_File:
		return "APIMessageId_File"
	case APIMessageId_OA:
		return "APIMessageId_OA"
	case APIMessageId_Customized:
		return "APIMessageId_Customized"
	}
	return "<UNSET>"
}

func APIMessageIdFromString(s string) (APIMessageId, error) {
	switch s {
	case "APIMessageId_Text":
		return APIMessageId_Text, nil
	case "APIMessageId_Image":
		return APIMessageId_Image, nil
	case "APIMessageId_File":
		return APIMessageId_File, nil
	case "APIMessageId_OA":
		return APIMessageId_OA, nil
	case "APIMessageId_Customized":
		return APIMessageId_Customized, nil
	}
	return APIMessageId(0), fmt.Errorf("not a valid APIMessageId string")
}

func APIMessageIdPtr(v APIMessageId) *APIMessageId { return &v }

type APITextDetailType int64

const (
	APITextDetailType_TextType APITextDetailType = 0
	APITextDetailType_URLType  APITextDetailType = 1
)

func (p APITextDetailType) String() string {
	switch p {
	case APITextDetailType_TextType:
		return "APITextDetailType_TextType"
	case APITextDetailType_URLType:
		return "APITextDetailType_URLType"
	}
	return "<UNSET>"
}

func APITextDetailTypeFromString(s string) (APITextDetailType, error) {
	switch s {
	case "APITextDetailType_TextType":
		return APITextDetailType_TextType, nil
	case "APITextDetailType_URLType":
		return APITextDetailType_URLType, nil
	}
	return APITextDetailType(0), fmt.Errorf("not a valid APITextDetailType string")
}

func APITextDetailTypePtr(v APITextDetailType) *APITextDetailType { return &v }

type APIFileDetailType int64

const (
	APIFileDetailType_FSType  APIFileDetailType = 1
	APIFileDetailType_URLType APIFileDetailType = 2
)

func (p APIFileDetailType) String() string {
	switch p {
	case APIFileDetailType_FSType:
		return "APIFileDetailType_FSType"
	case APIFileDetailType_URLType:
		return "APIFileDetailType_URLType"
	}
	return "<UNSET>"
}

func APIFileDetailTypeFromString(s string) (APIFileDetailType, error) {
	switch s {
	case "APIFileDetailType_FSType":
		return APIFileDetailType_FSType, nil
	case "APIFileDetailType_URLType":
		return APIFileDetailType_URLType, nil
	}
	return APIFileDetailType(0), fmt.Errorf("not a valid APIFileDetailType string")
}

func APIFileDetailTypePtr(v APIFileDetailType) *APIFileDetailType { return &v }

type APIAckMessageId int64

const (
	APIAckMessageId_AckSent APIAckMessageId = 1
)

func (p APIAckMessageId) String() string {
	switch p {
	case APIAckMessageId_AckSent:
		return "APIAckMessageId_AckSent"
	}
	return "<UNSET>"
}

func APIAckMessageIdFromString(s string) (APIAckMessageId, error) {
	switch s {
	case "APIAckMessageId_AckSent":
		return APIAckMessageId_AckSent, nil
	}
	return APIAckMessageId(0), fmt.Errorf("not a valid APIAckMessageId string")
}

func APIAckMessageIdPtr(v APIAckMessageId) *APIAckMessageId { return &v }

type APIControlMessageId int64

const (
	APIControlMessageId_OAStatusChange       APIControlMessageId = 1
	APIControlMessageId_AppChangeNotify      APIControlMessageId = 2
	APIControlMessageId_AppEventChangeNotify APIControlMessageId = 3
)

func (p APIControlMessageId) String() string {
	switch p {
	case APIControlMessageId_OAStatusChange:
		return "APIControlMessageId_OAStatusChange"
	case APIControlMessageId_AppChangeNotify:
		return "APIControlMessageId_AppChangeNotify"
	case APIControlMessageId_AppEventChangeNotify:
		return "APIControlMessageId_AppEventChangeNotify"
	}
	return "<UNSET>"
}

func APIControlMessageIdFromString(s string) (APIControlMessageId, error) {
	switch s {
	case "APIControlMessageId_OAStatusChange":
		return APIControlMessageId_OAStatusChange, nil
	case "APIControlMessageId_AppChangeNotify":
		return APIControlMessageId_AppChangeNotify, nil
	case "APIControlMessageId_AppEventChangeNotify":
		return APIControlMessageId_AppEventChangeNotify, nil
	}
	return APIControlMessageId(0), fmt.Errorf("not a valid APIControlMessageId string")
}

func APIControlMessageIdPtr(v APIControlMessageId) *APIControlMessageId { return &v }

type APIAppChangeEventType int64

const (
	APIAppChangeEventType_AppChangeEventAdd     APIAppChangeEventType = 1
	APIAppChangeEventType_AppChangeEventDisable APIAppChangeEventType = 2
	APIAppChangeEventType_AppChangeEventModify  APIAppChangeEventType = 3
)

func (p APIAppChangeEventType) String() string {
	switch p {
	case APIAppChangeEventType_AppChangeEventAdd:
		return "APIAppChangeEventType_AppChangeEventAdd"
	case APIAppChangeEventType_AppChangeEventDisable:
		return "APIAppChangeEventType_AppChangeEventDisable"
	case APIAppChangeEventType_AppChangeEventModify:
		return "APIAppChangeEventType_AppChangeEventModify"
	}
	return "<UNSET>"
}

func APIAppChangeEventTypeFromString(s string) (APIAppChangeEventType, error) {
	switch s {
	case "APIAppChangeEventType_AppChangeEventAdd":
		return APIAppChangeEventType_AppChangeEventAdd, nil
	case "APIAppChangeEventType_AppChangeEventDisable":
		return APIAppChangeEventType_AppChangeEventDisable, nil
	case "APIAppChangeEventType_AppChangeEventModify":
		return APIAppChangeEventType_AppChangeEventModify, nil
	}
	return APIAppChangeEventType(0), fmt.Errorf("not a valid APIAppChangeEventType string")
}

func APIAppChangeEventTypePtr(v APIAppChangeEventType) *APIAppChangeEventType { return &v }

type AppId int64

const (
	AppId_AppChat             AppId = 1
	AppId_AppHeartbeat        AppId = 2
	AppId_AppPresence         AppId = 3
	AppId_AppNotify           AppId = 4
	AppId_AppFiletransfer     AppId = 5
	AppId_AppCalendar         AppId = 6
	AppId_AppMeeting          AppId = 7
	AppId_AppOrganization     AppId = 8
	AppId_AppCommon_notify    AppId = 9
	AppId_AppAck              AppId = 10
	AppId_AppAudio            AppId = 11
	AppId_AppAddressBook      AppId = 12
	AppId_AppSleep            AppId = 13
	AppId_AppTimeNews         AppId = 14
	AppId_AppCase             AppId = 15
	AppId_AppPoll             AppId = 16
	AppId_AppRemoteAssistance AppId = 17
	AppId_AppSync             AppId = 18
	AppId_AppTodoTask         AppId = 19
	AppId_AppAPI              AppId = 256
)

func (p AppId) String() string {
	switch p {
	case AppId_AppChat:
		return "AppId_AppChat"
	case AppId_AppHeartbeat:
		return "AppId_AppHeartbeat"
	case AppId_AppPresence:
		return "AppId_AppPresence"
	case AppId_AppNotify:
		return "AppId_AppNotify"
	case AppId_AppFiletransfer:
		return "AppId_AppFiletransfer"
	case AppId_AppCalendar:
		return "AppId_AppCalendar"
	case AppId_AppMeeting:
		return "AppId_AppMeeting"
	case AppId_AppOrganization:
		return "AppId_AppOrganization"
	case AppId_AppCommon_notify:
		return "AppId_AppCommon_notify"
	case AppId_AppAck:
		return "AppId_AppAck"
	case AppId_AppAudio:
		return "AppId_AppAudio"
	case AppId_AppAddressBook:
		return "AppId_AppAddressBook"
	case AppId_AppSleep:
		return "AppId_AppSleep"
	case AppId_AppTimeNews:
		return "AppId_AppTimeNews"
	case AppId_AppCase:
		return "AppId_AppCase"
	case AppId_AppPoll:
		return "AppId_AppPoll"
	case AppId_AppRemoteAssistance:
		return "AppId_AppRemoteAssistance"
	case AppId_AppSync:
		return "AppId_AppSync"
	case AppId_AppTodoTask:
		return "AppId_AppTodoTask"
	case AppId_AppAPI:
		return "AppId_AppAPI"
	}
	return "<UNSET>"
}

func AppIdFromString(s string) (AppId, error) {
	switch s {
	case "AppId_AppChat":
		return AppId_AppChat, nil
	case "AppId_AppHeartbeat":
		return AppId_AppHeartbeat, nil
	case "AppId_AppPresence":
		return AppId_AppPresence, nil
	case "AppId_AppNotify":
		return AppId_AppNotify, nil
	case "AppId_AppFiletransfer":
		return AppId_AppFiletransfer, nil
	case "AppId_AppCalendar":
		return AppId_AppCalendar, nil
	case "AppId_AppMeeting":
		return AppId_AppMeeting, nil
	case "AppId_AppOrganization":
		return AppId_AppOrganization, nil
	case "AppId_AppCommon_notify":
		return AppId_AppCommon_notify, nil
	case "AppId_AppAck":
		return AppId_AppAck, nil
	case "AppId_AppAudio":
		return AppId_AppAudio, nil
	case "AppId_AppAddressBook":
		return AppId_AppAddressBook, nil
	case "AppId_AppSleep":
		return AppId_AppSleep, nil
	case "AppId_AppTimeNews":
		return AppId_AppTimeNews, nil
	case "AppId_AppCase":
		return AppId_AppCase, nil
	case "AppId_AppPoll":
		return AppId_AppPoll, nil
	case "AppId_AppRemoteAssistance":
		return AppId_AppRemoteAssistance, nil
	case "AppId_AppSync":
		return AppId_AppSync, nil
	case "AppId_AppTodoTask":
		return AppId_AppTodoTask, nil
	case "AppId_AppAPI":
		return AppId_AppAPI, nil
	}
	return AppId(0), fmt.Errorf("not a valid AppId string")
}

func AppIdPtr(v AppId) *AppId { return &v }

type JID struct {
	UserID int32 `thrift:"userID,1,required" json:"userID"`
	SiteID int32 `thrift:"siteID,2,required" json:"siteID"`
	ResID  int32 `thrift:"resID,3,required" json:"resID"`
}

func NewJID() *JID {
	return &JID{}
}

func (p *JID) GetUserID() int32 {
	return p.UserID
}

func (p *JID) GetSiteID() int32 {
	return p.SiteID
}

func (p *JID) GetResID() int32 {
	return p.ResID
}
func (p *JID) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *JID) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *JID) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SiteID = v
	}
	return nil
}

func (p *JID) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ResID = v
	}
	return nil
}

func (p *JID) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JID"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *JID) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return fmt.Errorf("%T.userID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userID: %s", p, err)
	}
	return err
}

func (p *JID) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("siteID", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:siteID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SiteID)); err != nil {
		return fmt.Errorf("%T.siteID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:siteID: %s", p, err)
	}
	return err
}

func (p *JID) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resID", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:resID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResID)); err != nil {
		return fmt.Errorf("%T.resID (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:resID: %s", p, err)
	}
	return err
}

func (p *JID) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JID(%+v)", *p)
}

type MessagePresence struct {
	Pri        int32         `thrift:"pri,1" json:"pri"`
	Show       string        `thrift:"show,2" json:"show"`
	Status     PresenceType  `thrift:"status,3" json:"status"`
	DeviceType DeviceType    `thrift:"deviceType,4" json:"deviceType"`
	OldStatus  *PresenceType `thrift:"oldStatus,5" json:"oldStatus"`
}

func NewMessagePresence() *MessagePresence {
	return &MessagePresence{}
}

func (p *MessagePresence) GetPri() int32 {
	return p.Pri
}

func (p *MessagePresence) GetShow() string {
	return p.Show
}

func (p *MessagePresence) GetStatus() PresenceType {
	return p.Status
}

func (p *MessagePresence) GetDeviceType() DeviceType {
	return p.DeviceType
}

var MessagePresence_OldStatus_DEFAULT PresenceType

func (p *MessagePresence) GetOldStatus() PresenceType {
	if !p.IsSetOldStatus() {
		return MessagePresence_OldStatus_DEFAULT
	}
	return *p.OldStatus
}
func (p *MessagePresence) IsSetOldStatus() bool {
	return p.OldStatus != nil
}

func (p *MessagePresence) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessagePresence) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Pri = v
	}
	return nil
}

func (p *MessagePresence) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Show = v
	}
	return nil
}

func (p *MessagePresence) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PresenceType(v)
		p.Status = temp
	}
	return nil
}

func (p *MessagePresence) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := DeviceType(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *MessagePresence) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := PresenceType(v)
		p.OldStatus = &temp
	}
	return nil
}

func (p *MessagePresence) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessagePresence"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessagePresence) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pri", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pri: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Pri)); err != nil {
		return fmt.Errorf("%T.pri (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pri: %s", p, err)
	}
	return err
}

func (p *MessagePresence) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("show", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:show: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Show)); err != nil {
		return fmt.Errorf("%T.show (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:show: %s", p, err)
	}
	return err
}

func (p *MessagePresence) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:status: %s", p, err)
	}
	return err
}

func (p *MessagePresence) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deviceType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return fmt.Errorf("%T.deviceType (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deviceType: %s", p, err)
	}
	return err
}

func (p *MessagePresence) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOldStatus() {
		if err := oprot.WriteFieldBegin("oldStatus", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:oldStatus: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OldStatus)); err != nil {
			return fmt.Errorf("%T.oldStatus (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:oldStatus: %s", p, err)
		}
	}
	return err
}

func (p *MessagePresence) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessagePresence(%+v)", *p)
}

type MessagePing struct {
	Interval   int32      `thrift:"interval,1,required" json:"interval"`
	DeviceType DeviceType `thrift:"deviceType,2,required" json:"deviceType"`
}

func NewMessagePing() *MessagePing {
	return &MessagePing{}
}

func (p *MessagePing) GetInterval() int32 {
	return p.Interval
}

func (p *MessagePing) GetDeviceType() DeviceType {
	return p.DeviceType
}
func (p *MessagePing) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessagePing) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Interval = v
	}
	return nil
}

func (p *MessagePing) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := DeviceType(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *MessagePing) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessagePing"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessagePing) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interval", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:interval: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Interval)); err != nil {
		return fmt.Errorf("%T.interval (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:interval: %s", p, err)
	}
	return err
}

func (p *MessagePing) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deviceType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return fmt.Errorf("%T.deviceType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deviceType: %s", p, err)
	}
	return err
}

func (p *MessagePing) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessagePing(%+v)", *p)
}

type AckSent struct {
	Id          int32 `thrift:"id,1" json:"id"`
	Seq         int64 `thrift:"seq,2" json:"seq"`
	TopicId     int32 `thrift:"topicId,3" json:"topicId"`
	SessionType *int8 `thrift:"sessionType,4" json:"sessionType"`
}

func NewAckSent() *AckSent {
	return &AckSent{}
}

func (p *AckSent) GetId() int32 {
	return p.Id
}

func (p *AckSent) GetSeq() int64 {
	return p.Seq
}

func (p *AckSent) GetTopicId() int32 {
	return p.TopicId
}

var AckSent_SessionType_DEFAULT int8

func (p *AckSent) GetSessionType() int8 {
	if !p.IsSetSessionType() {
		return AckSent_SessionType_DEFAULT
	}
	return *p.SessionType
}
func (p *AckSent) IsSetSessionType() bool {
	return p.SessionType != nil
}

func (p *AckSent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckSent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *AckSent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *AckSent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TopicId = v
	}
	return nil
}

func (p *AckSent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = &temp
	}
	return nil
}

func (p *AckSent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckSent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckSent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *AckSent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *AckSent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:topicId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TopicId)); err != nil {
		return fmt.Errorf("%T.topicId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:topicId: %s", p, err)
	}
	return err
}

func (p *AckSent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionType() {
		if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:sessionType: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.SessionType)); err != nil {
			return fmt.Errorf("%T.sessionType (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:sessionType: %s", p, err)
		}
	}
	return err
}

func (p *AckSent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckSent(%+v)", *p)
}

type AckReceived struct {
	Id          int32 `thrift:"id,1" json:"id"`
	Seq         int64 `thrift:"seq,2" json:"seq"`
	SessionType *int8 `thrift:"sessionType,3" json:"sessionType"`
}

func NewAckReceived() *AckReceived {
	return &AckReceived{}
}

func (p *AckReceived) GetId() int32 {
	return p.Id
}

func (p *AckReceived) GetSeq() int64 {
	return p.Seq
}

var AckReceived_SessionType_DEFAULT int8

func (p *AckReceived) GetSessionType() int8 {
	if !p.IsSetSessionType() {
		return AckReceived_SessionType_DEFAULT
	}
	return *p.SessionType
}
func (p *AckReceived) IsSetSessionType() bool {
	return p.SessionType != nil
}

func (p *AckReceived) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckReceived) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *AckReceived) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *AckReceived) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = &temp
	}
	return nil
}

func (p *AckReceived) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckReceived"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckReceived) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *AckReceived) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *AckReceived) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionType() {
		if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:sessionType: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.SessionType)); err != nil {
			return fmt.Errorf("%T.sessionType (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:sessionType: %s", p, err)
		}
	}
	return err
}

func (p *AckReceived) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckReceived(%+v)", *p)
}

type AckRead struct {
	Id          int32 `thrift:"id,1" json:"id"`
	Seq         int64 `thrift:"seq,2" json:"seq"`
	SessionType *int8 `thrift:"sessionType,3" json:"sessionType"`
	AckedUser   *JID  `thrift:"ackedUser,4" json:"ackedUser"`
}

func NewAckRead() *AckRead {
	return &AckRead{}
}

func (p *AckRead) GetId() int32 {
	return p.Id
}

func (p *AckRead) GetSeq() int64 {
	return p.Seq
}

var AckRead_SessionType_DEFAULT int8

func (p *AckRead) GetSessionType() int8 {
	if !p.IsSetSessionType() {
		return AckRead_SessionType_DEFAULT
	}
	return *p.SessionType
}

var AckRead_AckedUser_DEFAULT *JID

func (p *AckRead) GetAckedUser() *JID {
	if !p.IsSetAckedUser() {
		return AckRead_AckedUser_DEFAULT
	}
	return p.AckedUser
}
func (p *AckRead) IsSetSessionType() bool {
	return p.SessionType != nil
}

func (p *AckRead) IsSetAckedUser() bool {
	return p.AckedUser != nil
}

func (p *AckRead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckRead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *AckRead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *AckRead) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = &temp
	}
	return nil
}

func (p *AckRead) ReadField4(iprot thrift.TProtocol) error {
	p.AckedUser = &JID{}
	if err := p.AckedUser.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AckedUser, err)
	}
	return nil
}

func (p *AckRead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckRead"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckRead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *AckRead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *AckRead) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionType() {
		if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:sessionType: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.SessionType)); err != nil {
			return fmt.Errorf("%T.sessionType (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:sessionType: %s", p, err)
		}
	}
	return err
}

func (p *AckRead) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckedUser() {
		if err := oprot.WriteFieldBegin("ackedUser", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:ackedUser: %s", p, err)
		}
		if err := p.AckedUser.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AckedUser, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:ackedUser: %s", p, err)
		}
	}
	return err
}

func (p *AckRead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckRead(%+v)", *p)
}

type AckPlay struct {
	Id          int32 `thrift:"id,1" json:"id"`
	Seq         int64 `thrift:"seq,2" json:"seq"`
	SessionType *int8 `thrift:"sessionType,3" json:"sessionType"`
}

func NewAckPlay() *AckPlay {
	return &AckPlay{}
}

func (p *AckPlay) GetId() int32 {
	return p.Id
}

func (p *AckPlay) GetSeq() int64 {
	return p.Seq
}

var AckPlay_SessionType_DEFAULT int8

func (p *AckPlay) GetSessionType() int8 {
	if !p.IsSetSessionType() {
		return AckPlay_SessionType_DEFAULT
	}
	return *p.SessionType
}
func (p *AckPlay) IsSetSessionType() bool {
	return p.SessionType != nil
}

func (p *AckPlay) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckPlay) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *AckPlay) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *AckPlay) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = &temp
	}
	return nil
}

func (p *AckPlay) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckPlay"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckPlay) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *AckPlay) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *AckPlay) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionType() {
		if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:sessionType: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.SessionType)); err != nil {
			return fmt.Errorf("%T.sessionType (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:sessionType: %s", p, err)
		}
	}
	return err
}

func (p *AckPlay) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckPlay(%+v)", *p)
}

type BatchAckRead struct {
	SessionType int8    `thrift:"sessionType,1,required" json:"sessionType"`
	SeqList     []int64 `thrift:"seqList,2" json:"seqList"`
	AckedUser   *JID    `thrift:"ackedUser,3" json:"ackedUser"`
	StartSeq    *int64  `thrift:"startSeq,4" json:"startSeq"`
	EndSeq      *int64  `thrift:"endSeq,5" json:"endSeq"`
}

func NewBatchAckRead() *BatchAckRead {
	return &BatchAckRead{}
}

func (p *BatchAckRead) GetSessionType() int8 {
	return p.SessionType
}

var BatchAckRead_SeqList_DEFAULT []int64

func (p *BatchAckRead) GetSeqList() []int64 {
	return p.SeqList
}

var BatchAckRead_AckedUser_DEFAULT *JID

func (p *BatchAckRead) GetAckedUser() *JID {
	if !p.IsSetAckedUser() {
		return BatchAckRead_AckedUser_DEFAULT
	}
	return p.AckedUser
}

var BatchAckRead_StartSeq_DEFAULT int64

func (p *BatchAckRead) GetStartSeq() int64 {
	if !p.IsSetStartSeq() {
		return BatchAckRead_StartSeq_DEFAULT
	}
	return *p.StartSeq
}

var BatchAckRead_EndSeq_DEFAULT int64

func (p *BatchAckRead) GetEndSeq() int64 {
	if !p.IsSetEndSeq() {
		return BatchAckRead_EndSeq_DEFAULT
	}
	return *p.EndSeq
}
func (p *BatchAckRead) IsSetSeqList() bool {
	return p.SeqList != nil
}

func (p *BatchAckRead) IsSetAckedUser() bool {
	return p.AckedUser != nil
}

func (p *BatchAckRead) IsSetStartSeq() bool {
	return p.StartSeq != nil
}

func (p *BatchAckRead) IsSetEndSeq() bool {
	return p.EndSeq != nil
}

func (p *BatchAckRead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BatchAckRead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = temp
	}
	return nil
}

func (p *BatchAckRead) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.SeqList = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.SeqList = append(p.SeqList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *BatchAckRead) ReadField3(iprot thrift.TProtocol) error {
	p.AckedUser = &JID{}
	if err := p.AckedUser.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AckedUser, err)
	}
	return nil
}

func (p *BatchAckRead) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartSeq = &v
	}
	return nil
}

func (p *BatchAckRead) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EndSeq = &v
	}
	return nil
}

func (p *BatchAckRead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchAckRead"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BatchAckRead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.SessionType)); err != nil {
		return fmt.Errorf("%T.sessionType (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionType: %s", p, err)
	}
	return err
}

func (p *BatchAckRead) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeqList() {
		if err := oprot.WriteFieldBegin("seqList", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:seqList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.SeqList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.SeqList {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:seqList: %s", p, err)
		}
	}
	return err
}

func (p *BatchAckRead) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckedUser() {
		if err := oprot.WriteFieldBegin("ackedUser", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:ackedUser: %s", p, err)
		}
		if err := p.AckedUser.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AckedUser, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:ackedUser: %s", p, err)
		}
	}
	return err
}

func (p *BatchAckRead) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartSeq() {
		if err := oprot.WriteFieldBegin("startSeq", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:startSeq: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartSeq)); err != nil {
			return fmt.Errorf("%T.startSeq (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:startSeq: %s", p, err)
		}
	}
	return err
}

func (p *BatchAckRead) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndSeq() {
		if err := oprot.WriteFieldBegin("endSeq", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:endSeq: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndSeq)); err != nil {
			return fmt.Errorf("%T.endSeq (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:endSeq: %s", p, err)
		}
	}
	return err
}

func (p *BatchAckRead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchAckRead(%+v)", *p)
}

type SleepSet struct {
	Mode        SleepMode `thrift:"mode,1,required" json:"mode"`
	UnreadCount *int32    `thrift:"unreadCount,2" json:"unreadCount"`
}

func NewSleepSet() *SleepSet {
	return &SleepSet{}
}

func (p *SleepSet) GetMode() SleepMode {
	return p.Mode
}

var SleepSet_UnreadCount_DEFAULT int32

func (p *SleepSet) GetUnreadCount() int32 {
	if !p.IsSetUnreadCount() {
		return SleepSet_UnreadCount_DEFAULT
	}
	return *p.UnreadCount
}
func (p *SleepSet) IsSetUnreadCount() bool {
	return p.UnreadCount != nil
}

func (p *SleepSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SleepSet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := SleepMode(v)
		p.Mode = temp
	}
	return nil
}

func (p *SleepSet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UnreadCount = &v
	}
	return nil
}

func (p *SleepSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SleepSet"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SleepSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Mode)); err != nil {
		return fmt.Errorf("%T.mode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mode: %s", p, err)
	}
	return err
}

func (p *SleepSet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadCount() {
		if err := oprot.WriteFieldBegin("unreadCount", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:unreadCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.UnreadCount)); err != nil {
			return fmt.Errorf("%T.unreadCount (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:unreadCount: %s", p, err)
		}
	}
	return err
}

func (p *SleepSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SleepSet(%+v)", *p)
}

type WakeupResult_ struct {
}

func NewWakeupResult_() *WakeupResult_ {
	return &WakeupResult_{}
}

func (p *WakeupResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WakeupResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WakeupResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *WakeupResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WakeupResult_(%+v)", *p)
}

type TextContent struct {
	TypeA1    int8    `thrift:"type,1,required" json:"type"`
	Text      string  `thrift:"text,2,required" json:"text"`
	TextStyle *string `thrift:"text_style,3" json:"text_style"`
}

func NewTextContent() *TextContent {
	return &TextContent{}
}

func (p *TextContent) GetTypeA1() int8 {
	return p.TypeA1
}

func (p *TextContent) GetText() string {
	return p.Text
}

var TextContent_TextStyle_DEFAULT string

func (p *TextContent) GetTextStyle() string {
	if !p.IsSetTextStyle() {
		return TextContent_TextStyle_DEFAULT
	}
	return *p.TextStyle
}
func (p *TextContent) IsSetTextStyle() bool {
	return p.TextStyle != nil
}

func (p *TextContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TextContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *TextContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *TextContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TextStyle = &v
	}
	return nil
}

func (p *TextContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TextContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TextContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *TextContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:text: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return fmt.Errorf("%T.text (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:text: %s", p, err)
	}
	return err
}

func (p *TextContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextStyle() {
		if err := oprot.WriteFieldBegin("text_style", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:text_style: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TextStyle)); err != nil {
			return fmt.Errorf("%T.text_style (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:text_style: %s", p, err)
		}
	}
	return err
}

func (p *TextContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextContent(%+v)", *p)
}

type MediaContent struct {
	MediaFilename  *string       `thrift:"media_filename,1" json:"media_filename"`
	MediaFilesize  int32         `thrift:"media_filesize,2,required" json:"media_filesize"`
	MediaType      ChatMediaType `thrift:"media_type,3,required" json:"media_type"`
	MediaDownUrl   string        `thrift:"media_down_url,4,required" json:"media_down_url"`
	MediaThumb     *string       `thrift:"media_thumb,5" json:"media_thumb"`
	MediaDuration  *int32        `thrift:"media_duration,6" json:"media_duration"`
	OperatorId     *int32        `thrift:"operatorId,7" json:"operatorId"`
	OperatorName   *string       `thrift:"operatorName,8" json:"operatorName"`
	OperatorAvatar *string       `thrift:"operatorAvatar,9" json:"operatorAvatar"`
	MediaThumbUrl  *string       `thrift:"media_thumb_url,10" json:"media_thumb_url"`
}

func NewMediaContent() *MediaContent {
	return &MediaContent{}
}

var MediaContent_MediaFilename_DEFAULT string

func (p *MediaContent) GetMediaFilename() string {
	if !p.IsSetMediaFilename() {
		return MediaContent_MediaFilename_DEFAULT
	}
	return *p.MediaFilename
}

func (p *MediaContent) GetMediaFilesize() int32 {
	return p.MediaFilesize
}

func (p *MediaContent) GetMediaType() ChatMediaType {
	return p.MediaType
}

func (p *MediaContent) GetMediaDownUrl() string {
	return p.MediaDownUrl
}

var MediaContent_MediaThumb_DEFAULT string

func (p *MediaContent) GetMediaThumb() string {
	if !p.IsSetMediaThumb() {
		return MediaContent_MediaThumb_DEFAULT
	}
	return *p.MediaThumb
}

var MediaContent_MediaDuration_DEFAULT int32

func (p *MediaContent) GetMediaDuration() int32 {
	if !p.IsSetMediaDuration() {
		return MediaContent_MediaDuration_DEFAULT
	}
	return *p.MediaDuration
}

var MediaContent_OperatorId_DEFAULT int32

func (p *MediaContent) GetOperatorId() int32 {
	if !p.IsSetOperatorId() {
		return MediaContent_OperatorId_DEFAULT
	}
	return *p.OperatorId
}

var MediaContent_OperatorName_DEFAULT string

func (p *MediaContent) GetOperatorName() string {
	if !p.IsSetOperatorName() {
		return MediaContent_OperatorName_DEFAULT
	}
	return *p.OperatorName
}

var MediaContent_OperatorAvatar_DEFAULT string

func (p *MediaContent) GetOperatorAvatar() string {
	if !p.IsSetOperatorAvatar() {
		return MediaContent_OperatorAvatar_DEFAULT
	}
	return *p.OperatorAvatar
}

var MediaContent_MediaThumbUrl_DEFAULT string

func (p *MediaContent) GetMediaThumbUrl() string {
	if !p.IsSetMediaThumbUrl() {
		return MediaContent_MediaThumbUrl_DEFAULT
	}
	return *p.MediaThumbUrl
}
func (p *MediaContent) IsSetMediaFilename() bool {
	return p.MediaFilename != nil
}

func (p *MediaContent) IsSetMediaThumb() bool {
	return p.MediaThumb != nil
}

func (p *MediaContent) IsSetMediaDuration() bool {
	return p.MediaDuration != nil
}

func (p *MediaContent) IsSetOperatorId() bool {
	return p.OperatorId != nil
}

func (p *MediaContent) IsSetOperatorName() bool {
	return p.OperatorName != nil
}

func (p *MediaContent) IsSetOperatorAvatar() bool {
	return p.OperatorAvatar != nil
}

func (p *MediaContent) IsSetMediaThumbUrl() bool {
	return p.MediaThumbUrl != nil
}

func (p *MediaContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MediaContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MediaFilename = &v
	}
	return nil
}

func (p *MediaContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MediaFilesize = v
	}
	return nil
}

func (p *MediaContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := ChatMediaType(v)
		p.MediaType = temp
	}
	return nil
}

func (p *MediaContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MediaDownUrl = v
	}
	return nil
}

func (p *MediaContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MediaThumb = &v
	}
	return nil
}

func (p *MediaContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.MediaDuration = &v
	}
	return nil
}

func (p *MediaContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.OperatorId = &v
	}
	return nil
}

func (p *MediaContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.OperatorName = &v
	}
	return nil
}

func (p *MediaContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.OperatorAvatar = &v
	}
	return nil
}

func (p *MediaContent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.MediaThumbUrl = &v
	}
	return nil
}

func (p *MediaContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MediaContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MediaContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaFilename() {
		if err := oprot.WriteFieldBegin("media_filename", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:media_filename: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MediaFilename)); err != nil {
			return fmt.Errorf("%T.media_filename (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:media_filename: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("media_filesize", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:media_filesize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MediaFilesize)); err != nil {
		return fmt.Errorf("%T.media_filesize (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:media_filesize: %s", p, err)
	}
	return err
}

func (p *MediaContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("media_type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:media_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
		return fmt.Errorf("%T.media_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:media_type: %s", p, err)
	}
	return err
}

func (p *MediaContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("media_down_url", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:media_down_url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MediaDownUrl)); err != nil {
		return fmt.Errorf("%T.media_down_url (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:media_down_url: %s", p, err)
	}
	return err
}

func (p *MediaContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaThumb() {
		if err := oprot.WriteFieldBegin("media_thumb", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:media_thumb: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MediaThumb)); err != nil {
			return fmt.Errorf("%T.media_thumb (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:media_thumb: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaDuration() {
		if err := oprot.WriteFieldBegin("media_duration", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:media_duration: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MediaDuration)); err != nil {
			return fmt.Errorf("%T.media_duration (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:media_duration: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorId() {
		if err := oprot.WriteFieldBegin("operatorId", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:operatorId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OperatorId)); err != nil {
			return fmt.Errorf("%T.operatorId (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:operatorId: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorName() {
		if err := oprot.WriteFieldBegin("operatorName", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:operatorName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OperatorName)); err != nil {
			return fmt.Errorf("%T.operatorName (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:operatorName: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorAvatar() {
		if err := oprot.WriteFieldBegin("operatorAvatar", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:operatorAvatar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OperatorAvatar)); err != nil {
			return fmt.Errorf("%T.operatorAvatar (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:operatorAvatar: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaThumbUrl() {
		if err := oprot.WriteFieldBegin("media_thumb_url", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:media_thumb_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MediaThumbUrl)); err != nil {
			return fmt.Errorf("%T.media_thumb_url (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:media_thumb_url: %s", p, err)
		}
	}
	return err
}

func (p *MediaContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaContent(%+v)", *p)
}

type EmojiContent struct {
	TypeA1      int8    `thrift:"type,1,required" json:"type"`
	PackageId   *string `thrift:"packageId,2" json:"packageId"`
	EmIndex     *string `thrift:"emIndex,3" json:"emIndex"`
	DownloadUrl *string `thrift:"downloadUrl,4" json:"downloadUrl"`
}

func NewEmojiContent() *EmojiContent {
	return &EmojiContent{}
}

func (p *EmojiContent) GetTypeA1() int8 {
	return p.TypeA1
}

var EmojiContent_PackageId_DEFAULT string

func (p *EmojiContent) GetPackageId() string {
	if !p.IsSetPackageId() {
		return EmojiContent_PackageId_DEFAULT
	}
	return *p.PackageId
}

var EmojiContent_EmIndex_DEFAULT string

func (p *EmojiContent) GetEmIndex() string {
	if !p.IsSetEmIndex() {
		return EmojiContent_EmIndex_DEFAULT
	}
	return *p.EmIndex
}

var EmojiContent_DownloadUrl_DEFAULT string

func (p *EmojiContent) GetDownloadUrl() string {
	if !p.IsSetDownloadUrl() {
		return EmojiContent_DownloadUrl_DEFAULT
	}
	return *p.DownloadUrl
}
func (p *EmojiContent) IsSetPackageId() bool {
	return p.PackageId != nil
}

func (p *EmojiContent) IsSetEmIndex() bool {
	return p.EmIndex != nil
}

func (p *EmojiContent) IsSetDownloadUrl() bool {
	return p.DownloadUrl != nil
}

func (p *EmojiContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmojiContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *EmojiContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PackageId = &v
	}
	return nil
}

func (p *EmojiContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EmIndex = &v
	}
	return nil
}

func (p *EmojiContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DownloadUrl = &v
	}
	return nil
}

func (p *EmojiContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmojiContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmojiContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *EmojiContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackageId() {
		if err := oprot.WriteFieldBegin("packageId", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:packageId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PackageId)); err != nil {
			return fmt.Errorf("%T.packageId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:packageId: %s", p, err)
		}
	}
	return err
}

func (p *EmojiContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmIndex() {
		if err := oprot.WriteFieldBegin("emIndex", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:emIndex: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.EmIndex)); err != nil {
			return fmt.Errorf("%T.emIndex (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:emIndex: %s", p, err)
		}
	}
	return err
}

func (p *EmojiContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadUrl() {
		if err := oprot.WriteFieldBegin("downloadUrl", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:downloadUrl: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DownloadUrl)); err != nil {
			return fmt.Errorf("%T.downloadUrl (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:downloadUrl: %s", p, err)
		}
	}
	return err
}

func (p *EmojiContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmojiContent(%+v)", *p)
}

type ReportContent struct {
	EventId      *int64  `thrift:"eventId,1" json:"eventId"`
	ReportTitle  string  `thrift:"reportTitle,2,required" json:"reportTitle"`
	ReportUrl    string  `thrift:"reportUrl,3,required" json:"reportUrl"`
	ExternalData *string `thrift:"externalData,4" json:"externalData"`
}

func NewReportContent() *ReportContent {
	return &ReportContent{}
}

var ReportContent_EventId_DEFAULT int64

func (p *ReportContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return ReportContent_EventId_DEFAULT
	}
	return *p.EventId
}

func (p *ReportContent) GetReportTitle() string {
	return p.ReportTitle
}

func (p *ReportContent) GetReportUrl() string {
	return p.ReportUrl
}

var ReportContent_ExternalData_DEFAULT string

func (p *ReportContent) GetExternalData() string {
	if !p.IsSetExternalData() {
		return ReportContent_ExternalData_DEFAULT
	}
	return *p.ExternalData
}
func (p *ReportContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *ReportContent) IsSetExternalData() bool {
	return p.ExternalData != nil
}

func (p *ReportContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *ReportContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReportTitle = v
	}
	return nil
}

func (p *ReportContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ReportUrl = v
	}
	return nil
}

func (p *ReportContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ExternalData = &v
	}
	return nil
}

func (p *ReportContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:eventId: %s", p, err)
		}
	}
	return err
}

func (p *ReportContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportTitle", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:reportTitle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReportTitle)); err != nil {
		return fmt.Errorf("%T.reportTitle (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:reportTitle: %s", p, err)
	}
	return err
}

func (p *ReportContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportUrl", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:reportUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReportUrl)); err != nil {
		return fmt.Errorf("%T.reportUrl (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:reportUrl: %s", p, err)
	}
	return err
}

func (p *ReportContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalData() {
		if err := oprot.WriteFieldBegin("externalData", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:externalData: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ExternalData)); err != nil {
			return fmt.Errorf("%T.externalData (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:externalData: %s", p, err)
		}
	}
	return err
}

func (p *ReportContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportContent(%+v)", *p)
}

type GroupMemberInfo struct {
	MemberId  int32 `thrift:"memberId,1,required" json:"memberId"`
	JoinTime  int32 `thrift:"join_time,2,required" json:"join_time"`
	JoinState *int8 `thrift:"join_state,3" json:"join_state"`
	Role      *int8 `thrift:"role,4" json:"role"`
}

func NewGroupMemberInfo() *GroupMemberInfo {
	return &GroupMemberInfo{}
}

func (p *GroupMemberInfo) GetMemberId() int32 {
	return p.MemberId
}

func (p *GroupMemberInfo) GetJoinTime() int32 {
	return p.JoinTime
}

var GroupMemberInfo_JoinState_DEFAULT int8

func (p *GroupMemberInfo) GetJoinState() int8 {
	if !p.IsSetJoinState() {
		return GroupMemberInfo_JoinState_DEFAULT
	}
	return *p.JoinState
}

var GroupMemberInfo_Role_DEFAULT int8

func (p *GroupMemberInfo) GetRole() int8 {
	if !p.IsSetRole() {
		return GroupMemberInfo_Role_DEFAULT
	}
	return *p.Role
}
func (p *GroupMemberInfo) IsSetJoinState() bool {
	return p.JoinState != nil
}

func (p *GroupMemberInfo) IsSetRole() bool {
	return p.Role != nil
}

func (p *GroupMemberInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupMemberInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *GroupMemberInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.JoinTime = v
	}
	return nil
}

func (p *GroupMemberInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.JoinState = &temp
	}
	return nil
}

func (p *GroupMemberInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.Role = &temp
	}
	return nil
}

func (p *GroupMemberInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupMemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:memberId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MemberId)); err != nil {
		return fmt.Errorf("%T.memberId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:memberId: %s", p, err)
	}
	return err
}

func (p *GroupMemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("join_time", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:join_time: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.JoinTime)); err != nil {
		return fmt.Errorf("%T.join_time (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:join_time: %s", p, err)
	}
	return err
}

func (p *GroupMemberInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJoinState() {
		if err := oprot.WriteFieldBegin("join_state", thrift.BYTE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:join_state: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.JoinState)); err != nil {
			return fmt.Errorf("%T.join_state (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:join_state: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.BYTE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:role: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.Role)); err != nil {
			return fmt.Errorf("%T.role (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:role: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberInfo(%+v)", *p)
}

type GroupMemberAddContent struct {
	Operatorid int32              `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid    int32              `thrift:"groupid,2,required" json:"groupid"`
	MemberList []*GroupMemberInfo `thrift:"memberList,3,required" json:"memberList"`
	Avatar     *string            `thrift:"avatar,4" json:"avatar"`
	GroupName  *string            `thrift:"group_name,5" json:"group_name"`
	NamePinyin *string            `thrift:"name_pinyin,6" json:"name_pinyin"`
	NameFlag   *int8              `thrift:"name_flag,7" json:"name_flag"`
}

func NewGroupMemberAddContent() *GroupMemberAddContent {
	return &GroupMemberAddContent{}
}

func (p *GroupMemberAddContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupMemberAddContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupMemberAddContent) GetMemberList() []*GroupMemberInfo {
	return p.MemberList
}

var GroupMemberAddContent_Avatar_DEFAULT string

func (p *GroupMemberAddContent) GetAvatar() string {
	if !p.IsSetAvatar() {
		return GroupMemberAddContent_Avatar_DEFAULT
	}
	return *p.Avatar
}

var GroupMemberAddContent_GroupName_DEFAULT string

func (p *GroupMemberAddContent) GetGroupName() string {
	if !p.IsSetGroupName() {
		return GroupMemberAddContent_GroupName_DEFAULT
	}
	return *p.GroupName
}

var GroupMemberAddContent_NamePinyin_DEFAULT string

func (p *GroupMemberAddContent) GetNamePinyin() string {
	if !p.IsSetNamePinyin() {
		return GroupMemberAddContent_NamePinyin_DEFAULT
	}
	return *p.NamePinyin
}

var GroupMemberAddContent_NameFlag_DEFAULT int8

func (p *GroupMemberAddContent) GetNameFlag() int8 {
	if !p.IsSetNameFlag() {
		return GroupMemberAddContent_NameFlag_DEFAULT
	}
	return *p.NameFlag
}
func (p *GroupMemberAddContent) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *GroupMemberAddContent) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *GroupMemberAddContent) IsSetNamePinyin() bool {
	return p.NamePinyin != nil
}

func (p *GroupMemberAddContent) IsSetNameFlag() bool {
	return p.NameFlag != nil
}

func (p *GroupMemberAddContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*GroupMemberInfo, 0, size)
	p.MemberList = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &GroupMemberInfo{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.MemberList = append(p.MemberList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NamePinyin = &v
	}
	return nil
}

func (p *GroupMemberAddContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.NameFlag = &temp
	}
	return nil
}

func (p *GroupMemberAddContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberAddContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupMemberAddContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupMemberAddContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupMemberAddContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberList", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:memberList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MemberList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MemberList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:memberList: %s", p, err)
	}
	return err
}

func (p *GroupMemberAddContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:avatar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Avatar)); err != nil {
			return fmt.Errorf("%T.avatar (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:avatar: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberAddContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:group_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return fmt.Errorf("%T.group_name (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:group_name: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberAddContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamePinyin() {
		if err := oprot.WriteFieldBegin("name_pinyin", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:name_pinyin: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.NamePinyin)); err != nil {
			return fmt.Errorf("%T.name_pinyin (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:name_pinyin: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberAddContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNameFlag() {
		if err := oprot.WriteFieldBegin("name_flag", thrift.BYTE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:name_flag: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.NameFlag)); err != nil {
			return fmt.Errorf("%T.name_flag (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:name_flag: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberAddContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberAddContent(%+v)", *p)
}

type GroupMemberDelContent struct {
	Operatorid int32   `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid    int32   `thrift:"groupid,2,required" json:"groupid"`
	MemberId   int32   `thrift:"memberId,3,required" json:"memberId"`
	Avatar     *string `thrift:"avatar,4" json:"avatar"`
	GroupName  *string `thrift:"group_name,5" json:"group_name"`
	NamePinyin *string `thrift:"name_pinyin,6" json:"name_pinyin"`
	NameFlag   *int8   `thrift:"name_flag,7" json:"name_flag"`
}

func NewGroupMemberDelContent() *GroupMemberDelContent {
	return &GroupMemberDelContent{}
}

func (p *GroupMemberDelContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupMemberDelContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupMemberDelContent) GetMemberId() int32 {
	return p.MemberId
}

var GroupMemberDelContent_Avatar_DEFAULT string

func (p *GroupMemberDelContent) GetAvatar() string {
	if !p.IsSetAvatar() {
		return GroupMemberDelContent_Avatar_DEFAULT
	}
	return *p.Avatar
}

var GroupMemberDelContent_GroupName_DEFAULT string

func (p *GroupMemberDelContent) GetGroupName() string {
	if !p.IsSetGroupName() {
		return GroupMemberDelContent_GroupName_DEFAULT
	}
	return *p.GroupName
}

var GroupMemberDelContent_NamePinyin_DEFAULT string

func (p *GroupMemberDelContent) GetNamePinyin() string {
	if !p.IsSetNamePinyin() {
		return GroupMemberDelContent_NamePinyin_DEFAULT
	}
	return *p.NamePinyin
}

var GroupMemberDelContent_NameFlag_DEFAULT int8

func (p *GroupMemberDelContent) GetNameFlag() int8 {
	if !p.IsSetNameFlag() {
		return GroupMemberDelContent_NameFlag_DEFAULT
	}
	return *p.NameFlag
}
func (p *GroupMemberDelContent) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *GroupMemberDelContent) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *GroupMemberDelContent) IsSetNamePinyin() bool {
	return p.NamePinyin != nil
}

func (p *GroupMemberDelContent) IsSetNameFlag() bool {
	return p.NameFlag != nil
}

func (p *GroupMemberDelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NamePinyin = &v
	}
	return nil
}

func (p *GroupMemberDelContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.NameFlag = &temp
	}
	return nil
}

func (p *GroupMemberDelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberDelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupMemberDelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupMemberDelContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupMemberDelContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:memberId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MemberId)); err != nil {
		return fmt.Errorf("%T.memberId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:memberId: %s", p, err)
	}
	return err
}

func (p *GroupMemberDelContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:avatar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Avatar)); err != nil {
			return fmt.Errorf("%T.avatar (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:avatar: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberDelContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:group_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return fmt.Errorf("%T.group_name (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:group_name: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberDelContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamePinyin() {
		if err := oprot.WriteFieldBegin("name_pinyin", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:name_pinyin: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.NamePinyin)); err != nil {
			return fmt.Errorf("%T.name_pinyin (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:name_pinyin: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberDelContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNameFlag() {
		if err := oprot.WriteFieldBegin("name_flag", thrift.BYTE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:name_flag: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.NameFlag)); err != nil {
			return fmt.Errorf("%T.name_flag (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:name_flag: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberDelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberDelContent(%+v)", *p)
}

type GroupNameUpdateContent struct {
	Operatorid int32  `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid    int32  `thrift:"groupid,2,required" json:"groupid"`
	GroupName  string `thrift:"group_name,3,required" json:"group_name"`
	NamePinyin string `thrift:"name_pinyin,4,required" json:"name_pinyin"`
	NameFlag   int8   `thrift:"name_flag,5,required" json:"name_flag"`
}

func NewGroupNameUpdateContent() *GroupNameUpdateContent {
	return &GroupNameUpdateContent{}
}

func (p *GroupNameUpdateContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupNameUpdateContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupNameUpdateContent) GetGroupName() string {
	return p.GroupName
}

func (p *GroupNameUpdateContent) GetNamePinyin() string {
	return p.NamePinyin
}

func (p *GroupNameUpdateContent) GetNameFlag() int8 {
	return p.NameFlag
}
func (p *GroupNameUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupNameUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupNameUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupNameUpdateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *GroupNameUpdateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NamePinyin = v
	}
	return nil
}

func (p *GroupNameUpdateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := int8(v)
		p.NameFlag = temp
	}
	return nil
}

func (p *GroupNameUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupNameUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupNameUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupNameUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupNameUpdateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:group_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return fmt.Errorf("%T.group_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:group_name: %s", p, err)
	}
	return err
}

func (p *GroupNameUpdateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name_pinyin", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:name_pinyin: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NamePinyin)); err != nil {
		return fmt.Errorf("%T.name_pinyin (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:name_pinyin: %s", p, err)
	}
	return err
}

func (p *GroupNameUpdateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name_flag", thrift.BYTE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:name_flag: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.NameFlag)); err != nil {
		return fmt.Errorf("%T.name_flag (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:name_flag: %s", p, err)
	}
	return err
}

func (p *GroupNameUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupNameUpdateContent(%+v)", *p)
}

type GroupCreateContent struct {
	Operatorid       int32              `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid          int32              `thrift:"groupid,2,required" json:"groupid"`
	MemberList       []*GroupMemberInfo `thrift:"memberList,3,required" json:"memberList"`
	Avatar           *string            `thrift:"avatar,4" json:"avatar"`
	GroupName        *string            `thrift:"group_name,5" json:"group_name"`
	NamePinyin       *string            `thrift:"name_pinyin,6" json:"name_pinyin"`
	CreateTime       int32              `thrift:"create_time,7,required" json:"create_time"`
	SiteID           int32              `thrift:"siteID,8,required" json:"siteID"`
	NameFlag         int8               `thrift:"name_flag,9,required" json:"name_flag"`
	GroupType        *int8              `thrift:"group_type,10" json:"group_type"`
	MemberCount      *int32             `thrift:"memberCount,11" json:"memberCount"`
	GroupStatus      *int32             `thrift:"group_status,12" json:"group_status"`
	StatusInfo       *string            `thrift:"status_info,13" json:"status_info"`
	CloudLibraryInfo *string            `thrift:"cloud_library_info,14" json:"cloud_library_info"`
	DisplayScope     *int32             `thrift:"display_scope,15" json:"display_scope"`
}

func NewGroupCreateContent() *GroupCreateContent {
	return &GroupCreateContent{}
}

func (p *GroupCreateContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupCreateContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupCreateContent) GetMemberList() []*GroupMemberInfo {
	return p.MemberList
}

var GroupCreateContent_Avatar_DEFAULT string

func (p *GroupCreateContent) GetAvatar() string {
	if !p.IsSetAvatar() {
		return GroupCreateContent_Avatar_DEFAULT
	}
	return *p.Avatar
}

var GroupCreateContent_GroupName_DEFAULT string

func (p *GroupCreateContent) GetGroupName() string {
	if !p.IsSetGroupName() {
		return GroupCreateContent_GroupName_DEFAULT
	}
	return *p.GroupName
}

var GroupCreateContent_NamePinyin_DEFAULT string

func (p *GroupCreateContent) GetNamePinyin() string {
	if !p.IsSetNamePinyin() {
		return GroupCreateContent_NamePinyin_DEFAULT
	}
	return *p.NamePinyin
}

func (p *GroupCreateContent) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *GroupCreateContent) GetSiteID() int32 {
	return p.SiteID
}

func (p *GroupCreateContent) GetNameFlag() int8 {
	return p.NameFlag
}

var GroupCreateContent_GroupType_DEFAULT int8

func (p *GroupCreateContent) GetGroupType() int8 {
	if !p.IsSetGroupType() {
		return GroupCreateContent_GroupType_DEFAULT
	}
	return *p.GroupType
}

var GroupCreateContent_MemberCount_DEFAULT int32

func (p *GroupCreateContent) GetMemberCount() int32 {
	if !p.IsSetMemberCount() {
		return GroupCreateContent_MemberCount_DEFAULT
	}
	return *p.MemberCount
}

var GroupCreateContent_GroupStatus_DEFAULT int32

func (p *GroupCreateContent) GetGroupStatus() int32 {
	if !p.IsSetGroupStatus() {
		return GroupCreateContent_GroupStatus_DEFAULT
	}
	return *p.GroupStatus
}

var GroupCreateContent_StatusInfo_DEFAULT string

func (p *GroupCreateContent) GetStatusInfo() string {
	if !p.IsSetStatusInfo() {
		return GroupCreateContent_StatusInfo_DEFAULT
	}
	return *p.StatusInfo
}

var GroupCreateContent_CloudLibraryInfo_DEFAULT string

func (p *GroupCreateContent) GetCloudLibraryInfo() string {
	if !p.IsSetCloudLibraryInfo() {
		return GroupCreateContent_CloudLibraryInfo_DEFAULT
	}
	return *p.CloudLibraryInfo
}

var GroupCreateContent_DisplayScope_DEFAULT int32

func (p *GroupCreateContent) GetDisplayScope() int32 {
	if !p.IsSetDisplayScope() {
		return GroupCreateContent_DisplayScope_DEFAULT
	}
	return *p.DisplayScope
}
func (p *GroupCreateContent) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *GroupCreateContent) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *GroupCreateContent) IsSetNamePinyin() bool {
	return p.NamePinyin != nil
}

func (p *GroupCreateContent) IsSetGroupType() bool {
	return p.GroupType != nil
}

func (p *GroupCreateContent) IsSetMemberCount() bool {
	return p.MemberCount != nil
}

func (p *GroupCreateContent) IsSetGroupStatus() bool {
	return p.GroupStatus != nil
}

func (p *GroupCreateContent) IsSetStatusInfo() bool {
	return p.StatusInfo != nil
}

func (p *GroupCreateContent) IsSetCloudLibraryInfo() bool {
	return p.CloudLibraryInfo != nil
}

func (p *GroupCreateContent) IsSetDisplayScope() bool {
	return p.DisplayScope != nil
}

func (p *GroupCreateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupCreateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupCreateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupCreateContent) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*GroupMemberInfo, 0, size)
	p.MemberList = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &GroupMemberInfo{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.MemberList = append(p.MemberList, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GroupCreateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NamePinyin = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GroupCreateContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.SiteID = v
	}
	return nil
}

func (p *GroupCreateContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := int8(v)
		p.NameFlag = temp
	}
	return nil
}

func (p *GroupCreateContent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := int8(v)
		p.GroupType = &temp
	}
	return nil
}

func (p *GroupCreateContent) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.MemberCount = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.GroupStatus = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.StatusInfo = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.CloudLibraryInfo = &v
	}
	return nil
}

func (p *GroupCreateContent) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.DisplayScope = &v
	}
	return nil
}

func (p *GroupCreateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupCreateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupCreateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupCreateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupCreateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberList", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:memberList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MemberList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MemberList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:memberList: %s", p, err)
	}
	return err
}

func (p *GroupCreateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:avatar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Avatar)); err != nil {
			return fmt.Errorf("%T.avatar (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:avatar: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:group_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return fmt.Errorf("%T.group_name (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:group_name: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamePinyin() {
		if err := oprot.WriteFieldBegin("name_pinyin", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:name_pinyin: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.NamePinyin)); err != nil {
			return fmt.Errorf("%T.name_pinyin (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:name_pinyin: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_time", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:create_time: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.create_time (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:create_time: %s", p, err)
	}
	return err
}

func (p *GroupCreateContent) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("siteID", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:siteID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SiteID)); err != nil {
		return fmt.Errorf("%T.siteID (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:siteID: %s", p, err)
	}
	return err
}

func (p *GroupCreateContent) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name_flag", thrift.BYTE, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:name_flag: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.NameFlag)); err != nil {
		return fmt.Errorf("%T.name_flag (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:name_flag: %s", p, err)
	}
	return err
}

func (p *GroupCreateContent) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupType() {
		if err := oprot.WriteFieldBegin("group_type", thrift.BYTE, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:group_type: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.GroupType)); err != nil {
			return fmt.Errorf("%T.group_type (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:group_type: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberCount() {
		if err := oprot.WriteFieldBegin("memberCount", thrift.I32, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:memberCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MemberCount)); err != nil {
			return fmt.Errorf("%T.memberCount (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:memberCount: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupStatus() {
		if err := oprot.WriteFieldBegin("group_status", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:group_status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.GroupStatus)); err != nil {
			return fmt.Errorf("%T.group_status (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:group_status: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusInfo() {
		if err := oprot.WriteFieldBegin("status_info", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:status_info: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.StatusInfo)); err != nil {
			return fmt.Errorf("%T.status_info (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:status_info: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudLibraryInfo() {
		if err := oprot.WriteFieldBegin("cloud_library_info", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:cloud_library_info: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.CloudLibraryInfo)); err != nil {
			return fmt.Errorf("%T.cloud_library_info (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:cloud_library_info: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayScope() {
		if err := oprot.WriteFieldBegin("display_scope", thrift.I32, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:display_scope: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DisplayScope)); err != nil {
			return fmt.Errorf("%T.display_scope (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:display_scope: %s", p, err)
		}
	}
	return err
}

func (p *GroupCreateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupCreateContent(%+v)", *p)
}

type GroupMemberKickContent struct {
	Operatorid int32   `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid    int32   `thrift:"groupid,2,required" json:"groupid"`
	MemberList []int32 `thrift:"memberList,3,required" json:"memberList"`
	Avatar     *string `thrift:"avatar,4" json:"avatar"`
	GroupName  *string `thrift:"group_name,5" json:"group_name"`
	NamePinyin *string `thrift:"name_pinyin,6" json:"name_pinyin"`
	NameFlag   *int8   `thrift:"name_flag,7" json:"name_flag"`
}

func NewGroupMemberKickContent() *GroupMemberKickContent {
	return &GroupMemberKickContent{}
}

func (p *GroupMemberKickContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupMemberKickContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupMemberKickContent) GetMemberList() []int32 {
	return p.MemberList
}

var GroupMemberKickContent_Avatar_DEFAULT string

func (p *GroupMemberKickContent) GetAvatar() string {
	if !p.IsSetAvatar() {
		return GroupMemberKickContent_Avatar_DEFAULT
	}
	return *p.Avatar
}

var GroupMemberKickContent_GroupName_DEFAULT string

func (p *GroupMemberKickContent) GetGroupName() string {
	if !p.IsSetGroupName() {
		return GroupMemberKickContent_GroupName_DEFAULT
	}
	return *p.GroupName
}

var GroupMemberKickContent_NamePinyin_DEFAULT string

func (p *GroupMemberKickContent) GetNamePinyin() string {
	if !p.IsSetNamePinyin() {
		return GroupMemberKickContent_NamePinyin_DEFAULT
	}
	return *p.NamePinyin
}

var GroupMemberKickContent_NameFlag_DEFAULT int8

func (p *GroupMemberKickContent) GetNameFlag() int8 {
	if !p.IsSetNameFlag() {
		return GroupMemberKickContent_NameFlag_DEFAULT
	}
	return *p.NameFlag
}
func (p *GroupMemberKickContent) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *GroupMemberKickContent) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *GroupMemberKickContent) IsSetNamePinyin() bool {
	return p.NamePinyin != nil
}

func (p *GroupMemberKickContent) IsSetNameFlag() bool {
	return p.NameFlag != nil
}

func (p *GroupMemberKickContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.MemberList = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.MemberList = append(p.MemberList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NamePinyin = &v
	}
	return nil
}

func (p *GroupMemberKickContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.NameFlag = &temp
	}
	return nil
}

func (p *GroupMemberKickContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberKickContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupMemberKickContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupMemberKickContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupMemberKickContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberList", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:memberList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.MemberList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MemberList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:memberList: %s", p, err)
	}
	return err
}

func (p *GroupMemberKickContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:avatar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Avatar)); err != nil {
			return fmt.Errorf("%T.avatar (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:avatar: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberKickContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:group_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return fmt.Errorf("%T.group_name (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:group_name: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberKickContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamePinyin() {
		if err := oprot.WriteFieldBegin("name_pinyin", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:name_pinyin: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.NamePinyin)); err != nil {
			return fmt.Errorf("%T.name_pinyin (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:name_pinyin: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberKickContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNameFlag() {
		if err := oprot.WriteFieldBegin("name_flag", thrift.BYTE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:name_flag: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.NameFlag)); err != nil {
			return fmt.Errorf("%T.name_flag (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:name_flag: %s", p, err)
		}
	}
	return err
}

func (p *GroupMemberKickContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberKickContent(%+v)", *p)
}

type GroupAvatarUpdateContent struct {
	Operatorid int32  `thrift:"operatorid,1,required" json:"operatorid"`
	Avatar     string `thrift:"avatar,2,required" json:"avatar"`
	Groupid    int32  `thrift:"groupid,3,required" json:"groupid"`
}

func NewGroupAvatarUpdateContent() *GroupAvatarUpdateContent {
	return &GroupAvatarUpdateContent{}
}

func (p *GroupAvatarUpdateContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupAvatarUpdateContent) GetAvatar() string {
	return p.Avatar
}

func (p *GroupAvatarUpdateContent) GetGroupid() int32 {
	return p.Groupid
}
func (p *GroupAvatarUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupAvatarUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupAvatarUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *GroupAvatarUpdateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupAvatarUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupAvatarUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupAvatarUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupAvatarUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:avatar: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return fmt.Errorf("%T.avatar (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:avatar: %s", p, err)
	}
	return err
}

func (p *GroupAvatarUpdateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:groupid: %s", p, err)
	}
	return err
}

func (p *GroupAvatarUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupAvatarUpdateContent(%+v)", *p)
}

type GroupStateUpdateContent struct {
	GroupStatus int32   `thrift:"group_status,1,required" json:"group_status"`
	StatusInfo  *string `thrift:"status_info,2" json:"status_info"`
}

func NewGroupStateUpdateContent() *GroupStateUpdateContent {
	return &GroupStateUpdateContent{}
}

func (p *GroupStateUpdateContent) GetGroupStatus() int32 {
	return p.GroupStatus
}

var GroupStateUpdateContent_StatusInfo_DEFAULT string

func (p *GroupStateUpdateContent) GetStatusInfo() string {
	if !p.IsSetStatusInfo() {
		return GroupStateUpdateContent_StatusInfo_DEFAULT
	}
	return *p.StatusInfo
}
func (p *GroupStateUpdateContent) IsSetStatusInfo() bool {
	return p.StatusInfo != nil
}

func (p *GroupStateUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupStateUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.GroupStatus = v
	}
	return nil
}

func (p *GroupStateUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StatusInfo = &v
	}
	return nil
}

func (p *GroupStateUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupStateUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupStateUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_status", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:group_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GroupStatus)); err != nil {
		return fmt.Errorf("%T.group_status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:group_status: %s", p, err)
	}
	return err
}

func (p *GroupStateUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusInfo() {
		if err := oprot.WriteFieldBegin("status_info", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:status_info: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.StatusInfo)); err != nil {
			return fmt.Errorf("%T.status_info (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:status_info: %s", p, err)
		}
	}
	return err
}

func (p *GroupStateUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupStateUpdateContent(%+v)", *p)
}

type GroupTopContent struct {
	Operatorid int32 `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid    int32 `thrift:"groupid,2,required" json:"groupid"`
	IsTop      int8  `thrift:"isTop,3,required" json:"isTop"`
}

func NewGroupTopContent() *GroupTopContent {
	return &GroupTopContent{}
}

func (p *GroupTopContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupTopContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupTopContent) GetIsTop() int8 {
	return p.IsTop
}
func (p *GroupTopContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupTopContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupTopContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupTopContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.IsTop = temp
	}
	return nil
}

func (p *GroupTopContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupTopContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupTopContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupTopContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupTopContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isTop", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:isTop: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.IsTop)); err != nil {
		return fmt.Errorf("%T.isTop (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:isTop: %s", p, err)
	}
	return err
}

func (p *GroupTopContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupTopContent(%+v)", *p)
}

type GroupScopeContent struct {
	Operatorid   int32 `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid      int32 `thrift:"groupid,2,required" json:"groupid"`
	DisplayScope int32 `thrift:"display_scope,3,required" json:"display_scope"`
}

func NewGroupScopeContent() *GroupScopeContent {
	return &GroupScopeContent{}
}

func (p *GroupScopeContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupScopeContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupScopeContent) GetDisplayScope() int32 {
	return p.DisplayScope
}
func (p *GroupScopeContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupScopeContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupScopeContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupScopeContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DisplayScope = v
	}
	return nil
}

func (p *GroupScopeContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupScopeContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupScopeContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupScopeContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupScopeContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("display_scope", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:display_scope: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DisplayScope)); err != nil {
		return fmt.Errorf("%T.display_scope (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:display_scope: %s", p, err)
	}
	return err
}

func (p *GroupScopeContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupScopeContent(%+v)", *p)
}

type GroupOwnerTransferContent struct {
	Operatorid int32 `thrift:"operatorid,1,required" json:"operatorid"`
	Groupid    int32 `thrift:"groupid,2,required" json:"groupid"`
	Transferee int32 `thrift:"transferee,3,required" json:"transferee"`
}

func NewGroupOwnerTransferContent() *GroupOwnerTransferContent {
	return &GroupOwnerTransferContent{}
}

func (p *GroupOwnerTransferContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *GroupOwnerTransferContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupOwnerTransferContent) GetTransferee() int32 {
	return p.Transferee
}
func (p *GroupOwnerTransferContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupOwnerTransferContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *GroupOwnerTransferContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupOwnerTransferContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Transferee = v
	}
	return nil
}

func (p *GroupOwnerTransferContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupOwnerTransferContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupOwnerTransferContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *GroupOwnerTransferContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
	}
	return err
}

func (p *GroupOwnerTransferContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transferee", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:transferee: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Transferee)); err != nil {
		return fmt.Errorf("%T.transferee (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:transferee: %s", p, err)
	}
	return err
}

func (p *GroupOwnerTransferContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupOwnerTransferContent(%+v)", *p)
}

type SummaryCreateContent struct {
	Operatorid  int32   `thrift:"operatorid,1,required" json:"operatorid"`
	SummaryName string  `thrift:"summary_name,2,required" json:"summary_name"`
	DownUrl     *string `thrift:"down_url,3" json:"down_url"`
	Size        *int32  `thrift:"size,4" json:"size"`
	ContentId   *int64  `thrift:"contentId,5" json:"contentId"`
}

func NewSummaryCreateContent() *SummaryCreateContent {
	return &SummaryCreateContent{}
}

func (p *SummaryCreateContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *SummaryCreateContent) GetSummaryName() string {
	return p.SummaryName
}

var SummaryCreateContent_DownUrl_DEFAULT string

func (p *SummaryCreateContent) GetDownUrl() string {
	if !p.IsSetDownUrl() {
		return SummaryCreateContent_DownUrl_DEFAULT
	}
	return *p.DownUrl
}

var SummaryCreateContent_Size_DEFAULT int32

func (p *SummaryCreateContent) GetSize() int32 {
	if !p.IsSetSize() {
		return SummaryCreateContent_Size_DEFAULT
	}
	return *p.Size
}

var SummaryCreateContent_ContentId_DEFAULT int64

func (p *SummaryCreateContent) GetContentId() int64 {
	if !p.IsSetContentId() {
		return SummaryCreateContent_ContentId_DEFAULT
	}
	return *p.ContentId
}
func (p *SummaryCreateContent) IsSetDownUrl() bool {
	return p.DownUrl != nil
}

func (p *SummaryCreateContent) IsSetSize() bool {
	return p.Size != nil
}

func (p *SummaryCreateContent) IsSetContentId() bool {
	return p.ContentId != nil
}

func (p *SummaryCreateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SummaryCreateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *SummaryCreateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SummaryName = v
	}
	return nil
}

func (p *SummaryCreateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DownUrl = &v
	}
	return nil
}

func (p *SummaryCreateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *SummaryCreateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ContentId = &v
	}
	return nil
}

func (p *SummaryCreateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SummaryCreateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SummaryCreateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *SummaryCreateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("summary_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:summary_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SummaryName)); err != nil {
		return fmt.Errorf("%T.summary_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:summary_name: %s", p, err)
	}
	return err
}

func (p *SummaryCreateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownUrl() {
		if err := oprot.WriteFieldBegin("down_url", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:down_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DownUrl)); err != nil {
			return fmt.Errorf("%T.down_url (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:down_url: %s", p, err)
		}
	}
	return err
}

func (p *SummaryCreateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:size: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Size)); err != nil {
			return fmt.Errorf("%T.size (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:size: %s", p, err)
		}
	}
	return err
}

func (p *SummaryCreateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentId() {
		if err := oprot.WriteFieldBegin("contentId", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:contentId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ContentId)); err != nil {
			return fmt.Errorf("%T.contentId (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:contentId: %s", p, err)
		}
	}
	return err
}

func (p *SummaryCreateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SummaryCreateContent(%+v)", *p)
}

type DocumentContent struct {
	Operatorid int32  `thrift:"operatorid,1,required" json:"operatorid"`
	DocName    string `thrift:"doc_name,2,required" json:"doc_name"`
	DownUrl    string `thrift:"down_url,3,required" json:"down_url"`
	Size       *int32 `thrift:"size,4" json:"size"`
	ContentId  *int64 `thrift:"contentId,5" json:"contentId"`
}

func NewDocumentContent() *DocumentContent {
	return &DocumentContent{}
}

func (p *DocumentContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *DocumentContent) GetDocName() string {
	return p.DocName
}

func (p *DocumentContent) GetDownUrl() string {
	return p.DownUrl
}

var DocumentContent_Size_DEFAULT int32

func (p *DocumentContent) GetSize() int32 {
	if !p.IsSetSize() {
		return DocumentContent_Size_DEFAULT
	}
	return *p.Size
}

var DocumentContent_ContentId_DEFAULT int64

func (p *DocumentContent) GetContentId() int64 {
	if !p.IsSetContentId() {
		return DocumentContent_ContentId_DEFAULT
	}
	return *p.ContentId
}
func (p *DocumentContent) IsSetSize() bool {
	return p.Size != nil
}

func (p *DocumentContent) IsSetContentId() bool {
	return p.ContentId != nil
}

func (p *DocumentContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DocumentContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *DocumentContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DocName = v
	}
	return nil
}

func (p *DocumentContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DownUrl = v
	}
	return nil
}

func (p *DocumentContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *DocumentContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ContentId = &v
	}
	return nil
}

func (p *DocumentContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DocumentContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DocumentContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *DocumentContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("doc_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:doc_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DocName)); err != nil {
		return fmt.Errorf("%T.doc_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:doc_name: %s", p, err)
	}
	return err
}

func (p *DocumentContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("down_url", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:down_url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DownUrl)); err != nil {
		return fmt.Errorf("%T.down_url (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:down_url: %s", p, err)
	}
	return err
}

func (p *DocumentContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:size: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Size)); err != nil {
			return fmt.Errorf("%T.size (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:size: %s", p, err)
		}
	}
	return err
}

func (p *DocumentContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentId() {
		if err := oprot.WriteFieldBegin("contentId", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:contentId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ContentId)); err != nil {
			return fmt.Errorf("%T.contentId (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:contentId: %s", p, err)
		}
	}
	return err
}

func (p *DocumentContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentContent(%+v)", *p)
}

type DocumentDelContent struct {
	Operatorid int32   `thrift:"operatorid,1,required" json:"operatorid"`
	ContentId  int64   `thrift:"contentId,2,required" json:"contentId"`
	DocName    *string `thrift:"doc_name,3" json:"doc_name"`
}

func NewDocumentDelContent() *DocumentDelContent {
	return &DocumentDelContent{}
}

func (p *DocumentDelContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *DocumentDelContent) GetContentId() int64 {
	return p.ContentId
}

var DocumentDelContent_DocName_DEFAULT string

func (p *DocumentDelContent) GetDocName() string {
	if !p.IsSetDocName() {
		return DocumentDelContent_DocName_DEFAULT
	}
	return *p.DocName
}
func (p *DocumentDelContent) IsSetDocName() bool {
	return p.DocName != nil
}

func (p *DocumentDelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DocumentDelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *DocumentDelContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *DocumentDelContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DocName = &v
	}
	return nil
}

func (p *DocumentDelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DocumentDelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DocumentDelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *DocumentDelContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:contentId: %s", p, err)
	}
	return err
}

func (p *DocumentDelContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocName() {
		if err := oprot.WriteFieldBegin("doc_name", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:doc_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DocName)); err != nil {
			return fmt.Errorf("%T.doc_name (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:doc_name: %s", p, err)
		}
	}
	return err
}

func (p *DocumentDelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentDelContent(%+v)", *p)
}

type CodeCreateContent struct {
	ContentId    int64   `thrift:"contentId,1,required" json:"contentId"`
	Title        string  `thrift:"title,2,required" json:"title"`
	LangType     string  `thrift:"langType,3,required" json:"langType"`
	ContentHead  string  `thrift:"contentHead,4,required" json:"contentHead"`
	Desc         *string `thrift:"desc,5" json:"desc"`
	Size         int32   `thrift:"size,6,required" json:"size"`
	Operatorid   int32   `thrift:"operatorid,7,required" json:"operatorid"`
	OperatorName *string `thrift:"operatorName,8" json:"operatorName"`
	DownUrl      string  `thrift:"downUrl,9,required" json:"downUrl"`
	TotalLines   int32   `thrift:"totalLines,10,required" json:"totalLines"`
	CreateTime   int64   `thrift:"createTime,11,required" json:"createTime"`
}

func NewCodeCreateContent() *CodeCreateContent {
	return &CodeCreateContent{}
}

func (p *CodeCreateContent) GetContentId() int64 {
	return p.ContentId
}

func (p *CodeCreateContent) GetTitle() string {
	return p.Title
}

func (p *CodeCreateContent) GetLangType() string {
	return p.LangType
}

func (p *CodeCreateContent) GetContentHead() string {
	return p.ContentHead
}

var CodeCreateContent_Desc_DEFAULT string

func (p *CodeCreateContent) GetDesc() string {
	if !p.IsSetDesc() {
		return CodeCreateContent_Desc_DEFAULT
	}
	return *p.Desc
}

func (p *CodeCreateContent) GetSize() int32 {
	return p.Size
}

func (p *CodeCreateContent) GetOperatorid() int32 {
	return p.Operatorid
}

var CodeCreateContent_OperatorName_DEFAULT string

func (p *CodeCreateContent) GetOperatorName() string {
	if !p.IsSetOperatorName() {
		return CodeCreateContent_OperatorName_DEFAULT
	}
	return *p.OperatorName
}

func (p *CodeCreateContent) GetDownUrl() string {
	return p.DownUrl
}

func (p *CodeCreateContent) GetTotalLines() int32 {
	return p.TotalLines
}

func (p *CodeCreateContent) GetCreateTime() int64 {
	return p.CreateTime
}
func (p *CodeCreateContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *CodeCreateContent) IsSetOperatorName() bool {
	return p.OperatorName != nil
}

func (p *CodeCreateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CodeCreateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LangType = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ContentHead = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *CodeCreateContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.OperatorName = &v
	}
	return nil
}

func (p *CodeCreateContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.DownUrl = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.TotalLines = v
	}
	return nil
}

func (p *CodeCreateContent) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CodeCreateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CodeCreateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CodeCreateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:contentId: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:title: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("langType", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:langType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LangType)); err != nil {
		return fmt.Errorf("%T.langType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:langType: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentHead", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:contentHead: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ContentHead)); err != nil {
		return fmt.Errorf("%T.contentHead (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:contentHead: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:desc: %s", p, err)
		}
	}
	return err
}

func (p *CodeCreateContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:size: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:operatorid: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorName() {
		if err := oprot.WriteFieldBegin("operatorName", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:operatorName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OperatorName)); err != nil {
			return fmt.Errorf("%T.operatorName (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:operatorName: %s", p, err)
		}
	}
	return err
}

func (p *CodeCreateContent) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("downUrl", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:downUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DownUrl)); err != nil {
		return fmt.Errorf("%T.downUrl (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:downUrl: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalLines", thrift.I32, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:totalLines: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalLines)); err != nil {
		return fmt.Errorf("%T.totalLines (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:totalLines: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:createTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:createTime: %s", p, err)
	}
	return err
}

func (p *CodeCreateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CodeCreateContent(%+v)", *p)
}

type CodeDelContent struct {
	Operatorid int32   `thrift:"operatorid,1,required" json:"operatorid"`
	ContentId  int64   `thrift:"contentId,2,required" json:"contentId"`
	Title      *string `thrift:"title,3" json:"title"`
}

func NewCodeDelContent() *CodeDelContent {
	return &CodeDelContent{}
}

func (p *CodeDelContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *CodeDelContent) GetContentId() int64 {
	return p.ContentId
}

var CodeDelContent_Title_DEFAULT string

func (p *CodeDelContent) GetTitle() string {
	if !p.IsSetTitle() {
		return CodeDelContent_Title_DEFAULT
	}
	return *p.Title
}
func (p *CodeDelContent) IsSetTitle() bool {
	return p.Title != nil
}

func (p *CodeDelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CodeDelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *CodeDelContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *CodeDelContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *CodeDelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CodeDelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CodeDelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *CodeDelContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:contentId: %s", p, err)
	}
	return err
}

func (p *CodeDelContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:title: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return fmt.Errorf("%T.title (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:title: %s", p, err)
		}
	}
	return err
}

func (p *CodeDelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CodeDelContent(%+v)", *p)
}

type CommentCreateContent struct {
	Operatorid   int32   `thrift:"operatorid,1,required" json:"operatorid"`
	OperatorName *string `thrift:"operatorName,2" json:"operatorName"`
	CommentId    int64   `thrift:"commentId,3,required" json:"commentId"`
	CommentDesc  string  `thrift:"commentDesc,4,required" json:"commentDesc"`
	ContentId    int64   `thrift:"contentId,5,required" json:"contentId"`
	ContentName  string  `thrift:"contentName,6,required" json:"contentName"`
	ContentType  int8    `thrift:"contentType,7,required" json:"contentType"`
	CreateTime   int64   `thrift:"createTime,8,required" json:"createTime"`
	CloudType    *int16  `thrift:"cloudType,9" json:"cloudType"`
}

func NewCommentCreateContent() *CommentCreateContent {
	return &CommentCreateContent{}
}

func (p *CommentCreateContent) GetOperatorid() int32 {
	return p.Operatorid
}

var CommentCreateContent_OperatorName_DEFAULT string

func (p *CommentCreateContent) GetOperatorName() string {
	if !p.IsSetOperatorName() {
		return CommentCreateContent_OperatorName_DEFAULT
	}
	return *p.OperatorName
}

func (p *CommentCreateContent) GetCommentId() int64 {
	return p.CommentId
}

func (p *CommentCreateContent) GetCommentDesc() string {
	return p.CommentDesc
}

func (p *CommentCreateContent) GetContentId() int64 {
	return p.ContentId
}

func (p *CommentCreateContent) GetContentName() string {
	return p.ContentName
}

func (p *CommentCreateContent) GetContentType() int8 {
	return p.ContentType
}

func (p *CommentCreateContent) GetCreateTime() int64 {
	return p.CreateTime
}

var CommentCreateContent_CloudType_DEFAULT int16

func (p *CommentCreateContent) GetCloudType() int16 {
	if !p.IsSetCloudType() {
		return CommentCreateContent_CloudType_DEFAULT
	}
	return *p.CloudType
}
func (p *CommentCreateContent) IsSetOperatorName() bool {
	return p.OperatorName != nil
}

func (p *CommentCreateContent) IsSetCloudType() bool {
	return p.CloudType != nil
}

func (p *CommentCreateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommentCreateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *CommentCreateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OperatorName = &v
	}
	return nil
}

func (p *CommentCreateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CommentId = v
	}
	return nil
}

func (p *CommentCreateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CommentDesc = v
	}
	return nil
}

func (p *CommentCreateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *CommentCreateContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ContentName = v
	}
	return nil
}

func (p *CommentCreateContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.ContentType = temp
	}
	return nil
}

func (p *CommentCreateContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CommentCreateContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.CloudType = &v
	}
	return nil
}

func (p *CommentCreateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommentCreateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommentCreateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorName() {
		if err := oprot.WriteFieldBegin("operatorName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:operatorName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OperatorName)); err != nil {
			return fmt.Errorf("%T.operatorName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:operatorName: %s", p, err)
		}
	}
	return err
}

func (p *CommentCreateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commentId", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:commentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CommentId)); err != nil {
		return fmt.Errorf("%T.commentId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:commentId: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commentDesc", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:commentDesc: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CommentDesc)); err != nil {
		return fmt.Errorf("%T.commentDesc (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:commentDesc: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:contentId: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentName", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:contentName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ContentName)); err != nil {
		return fmt.Errorf("%T.contentName (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:contentName: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentType", thrift.BYTE, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:contentType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.ContentType)); err != nil {
		return fmt.Errorf("%T.contentType (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:contentType: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:createTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:createTime: %s", p, err)
	}
	return err
}

func (p *CommentCreateContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudType() {
		if err := oprot.WriteFieldBegin("cloudType", thrift.I16, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:cloudType: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.CloudType)); err != nil {
			return fmt.Errorf("%T.cloudType (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:cloudType: %s", p, err)
		}
	}
	return err
}

func (p *CommentCreateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentCreateContent(%+v)", *p)
}

type CommentDelContent struct {
	Operatorid  int32   `thrift:"operatorid,1,required" json:"operatorid"`
	CommentId   int64   `thrift:"commentId,2,required" json:"commentId"`
	ContentId   *int64  `thrift:"contentId,3" json:"contentId"`
	ContentName *string `thrift:"contentName,4" json:"contentName"`
}

func NewCommentDelContent() *CommentDelContent {
	return &CommentDelContent{}
}

func (p *CommentDelContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *CommentDelContent) GetCommentId() int64 {
	return p.CommentId
}

var CommentDelContent_ContentId_DEFAULT int64

func (p *CommentDelContent) GetContentId() int64 {
	if !p.IsSetContentId() {
		return CommentDelContent_ContentId_DEFAULT
	}
	return *p.ContentId
}

var CommentDelContent_ContentName_DEFAULT string

func (p *CommentDelContent) GetContentName() string {
	if !p.IsSetContentName() {
		return CommentDelContent_ContentName_DEFAULT
	}
	return *p.ContentName
}
func (p *CommentDelContent) IsSetContentId() bool {
	return p.ContentId != nil
}

func (p *CommentDelContent) IsSetContentName() bool {
	return p.ContentName != nil
}

func (p *CommentDelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommentDelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *CommentDelContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CommentId = v
	}
	return nil
}

func (p *CommentDelContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ContentId = &v
	}
	return nil
}

func (p *CommentDelContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ContentName = &v
	}
	return nil
}

func (p *CommentDelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommentDelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommentDelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *CommentDelContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commentId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:commentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CommentId)); err != nil {
		return fmt.Errorf("%T.commentId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:commentId: %s", p, err)
	}
	return err
}

func (p *CommentDelContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentId() {
		if err := oprot.WriteFieldBegin("contentId", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:contentId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ContentId)); err != nil {
			return fmt.Errorf("%T.contentId (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:contentId: %s", p, err)
		}
	}
	return err
}

func (p *CommentDelContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentName() {
		if err := oprot.WriteFieldBegin("contentName", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:contentName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ContentName)); err != nil {
			return fmt.Errorf("%T.contentName (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:contentName: %s", p, err)
		}
	}
	return err
}

func (p *CommentDelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentDelContent(%+v)", *p)
}

type AlertRuleContent struct {
	Groupid int32 `thrift:"groupid,1,required" json:"groupid"`
	State   int8  `thrift:"state,2,required" json:"state"`
	Rule    int32 `thrift:"rule,3,required" json:"rule"`
	Time    int32 `thrift:"time,4,required" json:"time"`
}

func NewAlertRuleContent() *AlertRuleContent {
	return &AlertRuleContent{}
}

func (p *AlertRuleContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *AlertRuleContent) GetState() int8 {
	return p.State
}

func (p *AlertRuleContent) GetRule() int32 {
	return p.Rule
}

func (p *AlertRuleContent) GetTime() int32 {
	return p.Time
}
func (p *AlertRuleContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlertRuleContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *AlertRuleContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.State = temp
	}
	return nil
}

func (p *AlertRuleContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Rule = v
	}
	return nil
}

func (p *AlertRuleContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *AlertRuleContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlertRuleContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlertRuleContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:groupid: %s", p, err)
	}
	return err
}

func (p *AlertRuleContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:state: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.State)); err != nil {
		return fmt.Errorf("%T.state (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:state: %s", p, err)
	}
	return err
}

func (p *AlertRuleContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rule", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:rule: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Rule)); err != nil {
		return fmt.Errorf("%T.rule (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:rule: %s", p, err)
	}
	return err
}

func (p *AlertRuleContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:time: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Time)); err != nil {
		return fmt.Errorf("%T.time (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:time: %s", p, err)
	}
	return err
}

func (p *AlertRuleContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertRuleContent(%+v)", *p)
}

type DiscussionClose struct {
	OperatorId int32 `thrift:"operatorId,1,required" json:"operatorId"`
}

func NewDiscussionClose() *DiscussionClose {
	return &DiscussionClose{}
}

func (p *DiscussionClose) GetOperatorId() int32 {
	return p.OperatorId
}
func (p *DiscussionClose) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DiscussionClose) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *DiscussionClose) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscussionClose"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DiscussionClose) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operatorId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorId: %s", p, err)
	}
	return err
}

func (p *DiscussionClose) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiscussionClose(%+v)", *p)
}

type MsgNotifyContent struct {
	Groupid int32 `thrift:"groupid,1,required" json:"groupid"`
	State   int8  `thrift:"state,2,required" json:"state"`
}

func NewMsgNotifyContent() *MsgNotifyContent {
	return &MsgNotifyContent{}
}

func (p *MsgNotifyContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *MsgNotifyContent) GetState() int8 {
	return p.State
}
func (p *MsgNotifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MsgNotifyContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *MsgNotifyContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.State = temp
	}
	return nil
}

func (p *MsgNotifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MsgNotifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MsgNotifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:groupid: %s", p, err)
	}
	return err
}

func (p *MsgNotifyContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:state: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.State)); err != nil {
		return fmt.Errorf("%T.state (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:state: %s", p, err)
	}
	return err
}

func (p *MsgNotifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MsgNotifyContent(%+v)", *p)
}

type CloudFileContent struct {
	OperatorId    int32   `thrift:"operatorId,1,required" json:"operatorId"`
	OperatorName  string  `thrift:"operatorName,2,required" json:"operatorName"`
	FileName      string  `thrift:"fileName,3,required" json:"fileName"`
	FileNameTo    *string `thrift:"fileNameTo,4" json:"fileNameTo"`
	Size          int64   `thrift:"size,5,required" json:"size"`
	FileCounts    *int32  `thrift:"fileCounts,6" json:"fileCounts"`
	IsDir         int8    `thrift:"isDir,7,required" json:"isDir"`
	CloudType     int16   `thrift:"cloudType,8,required" json:"cloudType"`
	DetailType    int8    `thrift:"detailType,9,required" json:"detailType"`
	DetailContent string  `thrift:"detailContent,10,required" json:"detailContent"`
	CreateTime    int64   `thrift:"createTime,11,required" json:"createTime"`
	ContentId     int64   `thrift:"contentId,12,required" json:"contentId"`
}

func NewCloudFileContent() *CloudFileContent {
	return &CloudFileContent{}
}

func (p *CloudFileContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *CloudFileContent) GetOperatorName() string {
	return p.OperatorName
}

func (p *CloudFileContent) GetFileName() string {
	return p.FileName
}

var CloudFileContent_FileNameTo_DEFAULT string

func (p *CloudFileContent) GetFileNameTo() string {
	if !p.IsSetFileNameTo() {
		return CloudFileContent_FileNameTo_DEFAULT
	}
	return *p.FileNameTo
}

func (p *CloudFileContent) GetSize() int64 {
	return p.Size
}

var CloudFileContent_FileCounts_DEFAULT int32

func (p *CloudFileContent) GetFileCounts() int32 {
	if !p.IsSetFileCounts() {
		return CloudFileContent_FileCounts_DEFAULT
	}
	return *p.FileCounts
}

func (p *CloudFileContent) GetIsDir() int8 {
	return p.IsDir
}

func (p *CloudFileContent) GetCloudType() int16 {
	return p.CloudType
}

func (p *CloudFileContent) GetDetailType() int8 {
	return p.DetailType
}

func (p *CloudFileContent) GetDetailContent() string {
	return p.DetailContent
}

func (p *CloudFileContent) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *CloudFileContent) GetContentId() int64 {
	return p.ContentId
}
func (p *CloudFileContent) IsSetFileNameTo() bool {
	return p.FileNameTo != nil
}

func (p *CloudFileContent) IsSetFileCounts() bool {
	return p.FileCounts != nil
}

func (p *CloudFileContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CloudFileContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *CloudFileContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OperatorName = v
	}
	return nil
}

func (p *CloudFileContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *CloudFileContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.FileNameTo = &v
	}
	return nil
}

func (p *CloudFileContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *CloudFileContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.FileCounts = &v
	}
	return nil
}

func (p *CloudFileContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.IsDir = temp
	}
	return nil
}

func (p *CloudFileContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.CloudType = v
	}
	return nil
}

func (p *CloudFileContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := int8(v)
		p.DetailType = temp
	}
	return nil
}

func (p *CloudFileContent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.DetailContent = v
	}
	return nil
}

func (p *CloudFileContent) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CloudFileContent) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *CloudFileContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloudFileContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CloudFileContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operatorId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorId: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:operatorName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OperatorName)); err != nil {
		return fmt.Errorf("%T.operatorName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:operatorName: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:fileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.fileName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:fileName: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileNameTo() {
		if err := oprot.WriteFieldBegin("fileNameTo", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:fileNameTo: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FileNameTo)); err != nil {
			return fmt.Errorf("%T.fileNameTo (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:fileNameTo: %s", p, err)
		}
	}
	return err
}

func (p *CloudFileContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:size: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Size)); err != nil {
		return fmt.Errorf("%T.size (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:size: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileCounts() {
		if err := oprot.WriteFieldBegin("fileCounts", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:fileCounts: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.FileCounts)); err != nil {
			return fmt.Errorf("%T.fileCounts (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:fileCounts: %s", p, err)
		}
	}
	return err
}

func (p *CloudFileContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isDir", thrift.BYTE, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:isDir: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.IsDir)); err != nil {
		return fmt.Errorf("%T.isDir (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:isDir: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cloudType", thrift.I16, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:cloudType: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.CloudType)); err != nil {
		return fmt.Errorf("%T.cloudType (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:cloudType: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detailType", thrift.BYTE, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:detailType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DetailType)); err != nil {
		return fmt.Errorf("%T.detailType (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:detailType: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detailContent", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:detailContent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DetailContent)); err != nil {
		return fmt.Errorf("%T.detailContent (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:detailContent: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:createTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:createTime: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:contentId: %s", p, err)
	}
	return err
}

func (p *CloudFileContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudFileContent(%+v)", *p)
}

type MemberRoleUpdateContent struct {
	RoleMap map[int32]int8 `thrift:"roleMap,1,required" json:"roleMap"`
}

func NewMemberRoleUpdateContent() *MemberRoleUpdateContent {
	return &MemberRoleUpdateContent{}
}

func (p *MemberRoleUpdateContent) GetRoleMap() map[int32]int8 {
	return p.RoleMap
}
func (p *MemberRoleUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MemberRoleUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int32]int8, size)
	p.RoleMap = tMap
	for i := 0; i < size; i++ {
		var _key4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key4 = v
		}
		var _val5 int8
		if v, err := iprot.ReadByte(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := int8(v)
			_val5 = temp
		}
		p.RoleMap[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MemberRoleUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberRoleUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MemberRoleUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleMap", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roleMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.BYTE, len(p.RoleMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.RoleMap {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteByte(byte(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roleMap: %s", p, err)
	}
	return err
}

func (p *MemberRoleUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberRoleUpdateContent(%+v)", *p)
}

type RevocationContent struct {
	Seq    int64  `thrift:"seq,1,required" json:"seq"`
	TypeA1 *int16 `thrift:"type,2" json:"type"`
}

func NewRevocationContent() *RevocationContent {
	return &RevocationContent{}
}

func (p *RevocationContent) GetSeq() int64 {
	return p.Seq
}

var RevocationContent_TypeA1_DEFAULT int16

func (p *RevocationContent) GetTypeA1() int16 {
	if !p.IsSetTypeA1() {
		return RevocationContent_TypeA1_DEFAULT
	}
	return *p.TypeA1
}
func (p *RevocationContent) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *RevocationContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevocationContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *RevocationContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TypeA1 = &v
	}
	return nil
}

func (p *RevocationContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RevocationContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevocationContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *RevocationContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I16, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:type: %s", p, err)
		}
	}
	return err
}

func (p *RevocationContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevocationContent(%+v)", *p)
}

type PasswordModifyContent struct {
	Password *string `thrift:"password,1" json:"password"`
}

func NewPasswordModifyContent() *PasswordModifyContent {
	return &PasswordModifyContent{}
}

var PasswordModifyContent_Password_DEFAULT string

func (p *PasswordModifyContent) GetPassword() string {
	if !p.IsSetPassword() {
		return PasswordModifyContent_Password_DEFAULT
	}
	return *p.Password
}
func (p *PasswordModifyContent) IsSetPassword() bool {
	return p.Password != nil
}

func (p *PasswordModifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PasswordModifyContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *PasswordModifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PasswordModifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PasswordModifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin("password", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:password: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Password)); err != nil {
			return fmt.Errorf("%T.password (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:password: %s", p, err)
		}
	}
	return err
}

func (p *PasswordModifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PasswordModifyContent(%+v)", *p)
}

type SystemWelcomeContent struct {
	Title      string  `thrift:"title,1,required" json:"title"`
	ImageUrl   string  `thrift:"image_url,2,required" json:"image_url"`
	Desc       *string `thrift:"desc,3" json:"desc"`
	TargetLink *string `thrift:"target_link,4" json:"target_link"`
}

func NewSystemWelcomeContent() *SystemWelcomeContent {
	return &SystemWelcomeContent{}
}

func (p *SystemWelcomeContent) GetTitle() string {
	return p.Title
}

func (p *SystemWelcomeContent) GetImageUrl() string {
	return p.ImageUrl
}

var SystemWelcomeContent_Desc_DEFAULT string

func (p *SystemWelcomeContent) GetDesc() string {
	if !p.IsSetDesc() {
		return SystemWelcomeContent_Desc_DEFAULT
	}
	return *p.Desc
}

var SystemWelcomeContent_TargetLink_DEFAULT string

func (p *SystemWelcomeContent) GetTargetLink() string {
	if !p.IsSetTargetLink() {
		return SystemWelcomeContent_TargetLink_DEFAULT
	}
	return *p.TargetLink
}
func (p *SystemWelcomeContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *SystemWelcomeContent) IsSetTargetLink() bool {
	return p.TargetLink != nil
}

func (p *SystemWelcomeContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SystemWelcomeContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *SystemWelcomeContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ImageUrl = v
	}
	return nil
}

func (p *SystemWelcomeContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *SystemWelcomeContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.TargetLink = &v
	}
	return nil
}

func (p *SystemWelcomeContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SystemWelcomeContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SystemWelcomeContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:title: %s", p, err)
	}
	return err
}

func (p *SystemWelcomeContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image_url", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:image_url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ImageUrl)); err != nil {
		return fmt.Errorf("%T.image_url (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:image_url: %s", p, err)
	}
	return err
}

func (p *SystemWelcomeContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:desc: %s", p, err)
		}
	}
	return err
}

func (p *SystemWelcomeContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetLink() {
		if err := oprot.WriteFieldBegin("target_link", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:target_link: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TargetLink)); err != nil {
			return fmt.Errorf("%T.target_link (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:target_link: %s", p, err)
		}
	}
	return err
}

func (p *SystemWelcomeContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemWelcomeContent(%+v)", *p)
}

type ClientUpdateContent struct {
	VersionCode    int32  `thrift:"version_code,1,required" json:"version_code"`
	IsForceUpgrade int8   `thrift:"is_force_upgrade,2,required" json:"is_force_upgrade"`
	MaxSdkVersion  *int16 `thrift:"max_sdk_version,3" json:"max_sdk_version"`
	MinSdkVersion  int16  `thrift:"min_sdk_version,4,required" json:"min_sdk_version"`
	VersionName    string `thrift:"version_name,5,required" json:"version_name"`
	Desc           string `thrift:"desc,6,required" json:"desc"`
	Url            string `thrift:"url,7,required" json:"url"`
}

func NewClientUpdateContent() *ClientUpdateContent {
	return &ClientUpdateContent{}
}

func (p *ClientUpdateContent) GetVersionCode() int32 {
	return p.VersionCode
}

func (p *ClientUpdateContent) GetIsForceUpgrade() int8 {
	return p.IsForceUpgrade
}

var ClientUpdateContent_MaxSdkVersion_DEFAULT int16

func (p *ClientUpdateContent) GetMaxSdkVersion() int16 {
	if !p.IsSetMaxSdkVersion() {
		return ClientUpdateContent_MaxSdkVersion_DEFAULT
	}
	return *p.MaxSdkVersion
}

func (p *ClientUpdateContent) GetMinSdkVersion() int16 {
	return p.MinSdkVersion
}

func (p *ClientUpdateContent) GetVersionName() string {
	return p.VersionName
}

func (p *ClientUpdateContent) GetDesc() string {
	return p.Desc
}

func (p *ClientUpdateContent) GetUrl() string {
	return p.Url
}
func (p *ClientUpdateContent) IsSetMaxSdkVersion() bool {
	return p.MaxSdkVersion != nil
}

func (p *ClientUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClientUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VersionCode = v
	}
	return nil
}

func (p *ClientUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.IsForceUpgrade = temp
	}
	return nil
}

func (p *ClientUpdateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxSdkVersion = &v
	}
	return nil
}

func (p *ClientUpdateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MinSdkVersion = v
	}
	return nil
}

func (p *ClientUpdateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.VersionName = v
	}
	return nil
}

func (p *ClientUpdateContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = v
	}
	return nil
}

func (p *ClientUpdateContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Url = v
	}
	return nil
}

func (p *ClientUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClientUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ClientUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version_code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.VersionCode)); err != nil {
		return fmt.Errorf("%T.version_code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version_code: %s", p, err)
	}
	return err
}

func (p *ClientUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_force_upgrade", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:is_force_upgrade: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.IsForceUpgrade)); err != nil {
		return fmt.Errorf("%T.is_force_upgrade (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:is_force_upgrade: %s", p, err)
	}
	return err
}

func (p *ClientUpdateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxSdkVersion() {
		if err := oprot.WriteFieldBegin("max_sdk_version", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:max_sdk_version: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.MaxSdkVersion)); err != nil {
			return fmt.Errorf("%T.max_sdk_version (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:max_sdk_version: %s", p, err)
		}
	}
	return err
}

func (p *ClientUpdateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min_sdk_version", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:min_sdk_version: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MinSdkVersion)); err != nil {
		return fmt.Errorf("%T.min_sdk_version (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:min_sdk_version: %s", p, err)
	}
	return err
}

func (p *ClientUpdateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:version_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionName)); err != nil {
		return fmt.Errorf("%T.version_name (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:version_name: %s", p, err)
	}
	return err
}

func (p *ClientUpdateContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Desc)); err != nil {
		return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
	}
	return err
}

func (p *ClientUpdateContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Url)); err != nil {
		return fmt.Errorf("%T.url (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:url: %s", p, err)
	}
	return err
}

func (p *ClientUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientUpdateContent(%+v)", *p)
}

type InfoCell struct {
	TagId     int32   `thrift:"tagId,1,required" json:"tagId"`
	Label     string  `thrift:"label,2,required" json:"label"`
	InputType *int16  `thrift:"inputType,3" json:"inputType"`
	Scope     int16   `thrift:"scope,4,required" json:"scope"`
	TypeA1    int16   `thrift:"type,5,required" json:"type"`
	State     int16   `thrift:"state,6,required" json:"state"`
	Value     *string `thrift:"value,7" json:"value"`
}

func NewInfoCell() *InfoCell {
	return &InfoCell{}
}

func (p *InfoCell) GetTagId() int32 {
	return p.TagId
}

func (p *InfoCell) GetLabel() string {
	return p.Label
}

var InfoCell_InputType_DEFAULT int16

func (p *InfoCell) GetInputType() int16 {
	if !p.IsSetInputType() {
		return InfoCell_InputType_DEFAULT
	}
	return *p.InputType
}

func (p *InfoCell) GetScope() int16 {
	return p.Scope
}

func (p *InfoCell) GetTypeA1() int16 {
	return p.TypeA1
}

func (p *InfoCell) GetState() int16 {
	return p.State
}

var InfoCell_Value_DEFAULT string

func (p *InfoCell) GetValue() string {
	if !p.IsSetValue() {
		return InfoCell_Value_DEFAULT
	}
	return *p.Value
}
func (p *InfoCell) IsSetInputType() bool {
	return p.InputType != nil
}

func (p *InfoCell) IsSetValue() bool {
	return p.Value != nil
}

func (p *InfoCell) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InfoCell) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TagId = v
	}
	return nil
}

func (p *InfoCell) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *InfoCell) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.InputType = &v
	}
	return nil
}

func (p *InfoCell) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Scope = v
	}
	return nil
}

func (p *InfoCell) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *InfoCell) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *InfoCell) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *InfoCell) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InfoCell"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InfoCell) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tagId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TagId)); err != nil {
		return fmt.Errorf("%T.tagId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tagId: %s", p, err)
	}
	return err
}

func (p *InfoCell) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:label: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return fmt.Errorf("%T.label (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:label: %s", p, err)
	}
	return err
}

func (p *InfoCell) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputType() {
		if err := oprot.WriteFieldBegin("inputType", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:inputType: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.InputType)); err != nil {
			return fmt.Errorf("%T.inputType (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:inputType: %s", p, err)
		}
	}
	return err
}

func (p *InfoCell) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scope", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:scope: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Scope)); err != nil {
		return fmt.Errorf("%T.scope (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:scope: %s", p, err)
	}
	return err
}

func (p *InfoCell) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I16, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:type: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:type: %s", p, err)
	}
	return err
}

func (p *InfoCell) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I16, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:state: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.State)); err != nil {
		return fmt.Errorf("%T.state (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:state: %s", p, err)
	}
	return err
}

func (p *InfoCell) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:value: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return fmt.Errorf("%T.value (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:value: %s", p, err)
		}
	}
	return err
}

func (p *InfoCell) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoCell(%+v)", *p)
}

type CompleteInfoContent struct {
	InfoCellList []*InfoCell `thrift:"info_cell_list,1,required" json:"info_cell_list"`
	Desc         *string     `thrift:"desc,2" json:"desc"`
}

func NewCompleteInfoContent() *CompleteInfoContent {
	return &CompleteInfoContent{}
}

func (p *CompleteInfoContent) GetInfoCellList() []*InfoCell {
	return p.InfoCellList
}

var CompleteInfoContent_Desc_DEFAULT string

func (p *CompleteInfoContent) GetDesc() string {
	if !p.IsSetDesc() {
		return CompleteInfoContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *CompleteInfoContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *CompleteInfoContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompleteInfoContent) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*InfoCell, 0, size)
	p.InfoCellList = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &InfoCell{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.InfoCellList = append(p.InfoCellList, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CompleteInfoContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *CompleteInfoContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompleteInfoContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CompleteInfoContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info_cell_list", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:info_cell_list: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InfoCellList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.InfoCellList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:info_cell_list: %s", p, err)
	}
	return err
}

func (p *CompleteInfoContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:desc: %s", p, err)
		}
	}
	return err
}

func (p *CompleteInfoContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompleteInfoContent(%+v)", *p)
}

type TagDelContent struct {
	DelTagIds []int32 `thrift:"delTagIds,1,required" json:"delTagIds"`
}

func NewTagDelContent() *TagDelContent {
	return &TagDelContent{}
}

func (p *TagDelContent) GetDelTagIds() []int32 {
	return p.DelTagIds
}
func (p *TagDelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TagDelContent) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.DelTagIds = tSlice
	for i := 0; i < size; i++ {
		var _elem7 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.DelTagIds = append(p.DelTagIds, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TagDelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TagDelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TagDelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delTagIds", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:delTagIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DelTagIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DelTagIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:delTagIds: %s", p, err)
	}
	return err
}

func (p *TagDelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagDelContent(%+v)", *p)
}

type PwdComplexUpdateContent struct {
	TypeA1 PwdComplexType `thrift:"type,1,required" json:"type"`
}

func NewPwdComplexUpdateContent() *PwdComplexUpdateContent {
	return &PwdComplexUpdateContent{}
}

func (p *PwdComplexUpdateContent) GetTypeA1() PwdComplexType {
	return p.TypeA1
}
func (p *PwdComplexUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PwdComplexUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := PwdComplexType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *PwdComplexUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PwdComplexUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PwdComplexUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *PwdComplexUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PwdComplexUpdateContent(%+v)", *p)
}

type PwdExpireContent struct {
	DueDays int32 `thrift:"dueDays,1,required" json:"dueDays"`
}

func NewPwdExpireContent() *PwdExpireContent {
	return &PwdExpireContent{}
}

func (p *PwdExpireContent) GetDueDays() int32 {
	return p.DueDays
}
func (p *PwdExpireContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PwdExpireContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DueDays = v
	}
	return nil
}

func (p *PwdExpireContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PwdExpireContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PwdExpireContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dueDays", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dueDays: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DueDays)); err != nil {
		return fmt.Errorf("%T.dueDays (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dueDays: %s", p, err)
	}
	return err
}

func (p *PwdExpireContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PwdExpireContent(%+v)", *p)
}

type PCClientGuide struct {
	DownUrl string `thrift:"downUrl,1,required" json:"downUrl"`
}

func NewPCClientGuide() *PCClientGuide {
	return &PCClientGuide{}
}

func (p *PCClientGuide) GetDownUrl() string {
	return p.DownUrl
}
func (p *PCClientGuide) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PCClientGuide) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DownUrl = v
	}
	return nil
}

func (p *PCClientGuide) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PCClientGuide"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PCClientGuide) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("downUrl", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:downUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DownUrl)); err != nil {
		return fmt.Errorf("%T.downUrl (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:downUrl: %s", p, err)
	}
	return err
}

func (p *PCClientGuide) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PCClientGuide(%+v)", *p)
}

type MobileClientGuide struct {
	AndroidMarketUrl string `thrift:"androidMarketUrl,1,required" json:"androidMarketUrl"`
	IphoneMarketUrl  string `thrift:"iphoneMarketUrl,2,required" json:"iphoneMarketUrl"`
}

func NewMobileClientGuide() *MobileClientGuide {
	return &MobileClientGuide{}
}

func (p *MobileClientGuide) GetAndroidMarketUrl() string {
	return p.AndroidMarketUrl
}

func (p *MobileClientGuide) GetIphoneMarketUrl() string {
	return p.IphoneMarketUrl
}
func (p *MobileClientGuide) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MobileClientGuide) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AndroidMarketUrl = v
	}
	return nil
}

func (p *MobileClientGuide) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IphoneMarketUrl = v
	}
	return nil
}

func (p *MobileClientGuide) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MobileClientGuide"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MobileClientGuide) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("androidMarketUrl", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:androidMarketUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AndroidMarketUrl)); err != nil {
		return fmt.Errorf("%T.androidMarketUrl (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:androidMarketUrl: %s", p, err)
	}
	return err
}

func (p *MobileClientGuide) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iphoneMarketUrl", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:iphoneMarketUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IphoneMarketUrl)); err != nil {
		return fmt.Errorf("%T.iphoneMarketUrl (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:iphoneMarketUrl: %s", p, err)
	}
	return err
}

func (p *MobileClientGuide) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MobileClientGuide(%+v)", *p)
}

type GroupRemindContent struct {
	GroupIdList []int32 `thrift:"groupIdList,1,required" json:"groupIdList"`
}

func NewGroupRemindContent() *GroupRemindContent {
	return &GroupRemindContent{}
}

func (p *GroupRemindContent) GetGroupIdList() []int32 {
	return p.GroupIdList
}
func (p *GroupRemindContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupRemindContent) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.GroupIdList = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem8 = v
		}
		p.GroupIdList = append(p.GroupIdList, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GroupRemindContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupRemindContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupRemindContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupIdList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:groupIdList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.GroupIdList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupIdList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:groupIdList: %s", p, err)
	}
	return err
}

func (p *GroupRemindContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupRemindContent(%+v)", *p)
}

type FileTransmissionInviteContent struct {
	FileMD5   string `thrift:"fileMD5,1,required" json:"fileMD5"`
	FileName  string `thrift:"fileName,2,required" json:"fileName"`
	FileSize  int64  `thrift:"fileSize,3,required" json:"fileSize"`
	BlockSize int64  `thrift:"blockSize,4,required" json:"blockSize"`
	NZip      int8   `thrift:"nZip,5,required" json:"nZip"`
	TaskId    int64  `thrift:"taskId,6,required" json:"taskId"`
}

func NewFileTransmissionInviteContent() *FileTransmissionInviteContent {
	return &FileTransmissionInviteContent{}
}

func (p *FileTransmissionInviteContent) GetFileMD5() string {
	return p.FileMD5
}

func (p *FileTransmissionInviteContent) GetFileName() string {
	return p.FileName
}

func (p *FileTransmissionInviteContent) GetFileSize() int64 {
	return p.FileSize
}

func (p *FileTransmissionInviteContent) GetBlockSize() int64 {
	return p.BlockSize
}

func (p *FileTransmissionInviteContent) GetNZip() int8 {
	return p.NZip
}

func (p *FileTransmissionInviteContent) GetTaskId() int64 {
	return p.TaskId
}
func (p *FileTransmissionInviteContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FileTransmissionInviteContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FileMD5 = v
	}
	return nil
}

func (p *FileTransmissionInviteContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *FileTransmissionInviteContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FileSize = v
	}
	return nil
}

func (p *FileTransmissionInviteContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BlockSize = v
	}
	return nil
}

func (p *FileTransmissionInviteContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := int8(v)
		p.NZip = temp
	}
	return nil
}

func (p *FileTransmissionInviteContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *FileTransmissionInviteContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileTransmissionInviteContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FileTransmissionInviteContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileMD5", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:fileMD5: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileMD5)); err != nil {
		return fmt.Errorf("%T.fileMD5 (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:fileMD5: %s", p, err)
	}
	return err
}

func (p *FileTransmissionInviteContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:fileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.fileName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:fileName: %s", p, err)
	}
	return err
}

func (p *FileTransmissionInviteContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:fileSize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
		return fmt.Errorf("%T.fileSize (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:fileSize: %s", p, err)
	}
	return err
}

func (p *FileTransmissionInviteContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockSize", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:blockSize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.BlockSize)); err != nil {
		return fmt.Errorf("%T.blockSize (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:blockSize: %s", p, err)
	}
	return err
}

func (p *FileTransmissionInviteContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nZip", thrift.BYTE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:nZip: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.NZip)); err != nil {
		return fmt.Errorf("%T.nZip (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:nZip: %s", p, err)
	}
	return err
}

func (p *FileTransmissionInviteContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:taskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TaskId)); err != nil {
		return fmt.Errorf("%T.taskId (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:taskId: %s", p, err)
	}
	return err
}

func (p *FileTransmissionInviteContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileTransmissionInviteContent(%+v)", *p)
}

type FileTransmissionReceiveContent struct {
	SendTaskId    int64  `thrift:"sendTaskId,1,required" json:"sendTaskId"`
	ReceiveTaskId int64  `thrift:"receiveTaskId,2,required" json:"receiveTaskId"`
	Ip            string `thrift:"ip,3,required" json:"ip"`
	Port          int16  `thrift:"port,4,required" json:"port"`
	ServerList    string `thrift:"serverList,5,required" json:"serverList"`
	TransType     int8   `thrift:"transType,6,required" json:"transType"`
	TransPoint    int64  `thrift:"transPoint,7,required" json:"transPoint"`
}

func NewFileTransmissionReceiveContent() *FileTransmissionReceiveContent {
	return &FileTransmissionReceiveContent{}
}

func (p *FileTransmissionReceiveContent) GetSendTaskId() int64 {
	return p.SendTaskId
}

func (p *FileTransmissionReceiveContent) GetReceiveTaskId() int64 {
	return p.ReceiveTaskId
}

func (p *FileTransmissionReceiveContent) GetIp() string {
	return p.Ip
}

func (p *FileTransmissionReceiveContent) GetPort() int16 {
	return p.Port
}

func (p *FileTransmissionReceiveContent) GetServerList() string {
	return p.ServerList
}

func (p *FileTransmissionReceiveContent) GetTransType() int8 {
	return p.TransType
}

func (p *FileTransmissionReceiveContent) GetTransPoint() int64 {
	return p.TransPoint
}
func (p *FileTransmissionReceiveContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SendTaskId = v
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiveTaskId = v
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Ip = v
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ServerList = v
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.TransType = temp
	}
	return nil
}

func (p *FileTransmissionReceiveContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TransPoint = v
	}
	return nil
}

func (p *FileTransmissionReceiveContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileTransmissionReceiveContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FileTransmissionReceiveContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendTaskId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sendTaskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SendTaskId)); err != nil {
		return fmt.Errorf("%T.sendTaskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sendTaskId: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiveTaskId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiveTaskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ReceiveTaskId)); err != nil {
		return fmt.Errorf("%T.receiveTaskId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiveTaskId: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ip: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:port: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Port)); err != nil {
		return fmt.Errorf("%T.port (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:port: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverList", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:serverList: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServerList)); err != nil {
		return fmt.Errorf("%T.serverList (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:serverList: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transType", thrift.BYTE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:transType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.TransType)); err != nil {
		return fmt.Errorf("%T.transType (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:transType: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transPoint", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:transPoint: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TransPoint)); err != nil {
		return fmt.Errorf("%T.transPoint (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:transPoint: %s", p, err)
	}
	return err
}

func (p *FileTransmissionReceiveContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileTransmissionReceiveContent(%+v)", *p)
}

type FileTransmissionRejectContent struct {
	TaskId   int64  `thrift:"taskId,1,required" json:"taskId"`
	FileName string `thrift:"fileName,2,required" json:"fileName"`
	FileSize int64  `thrift:"fileSize,3,required" json:"fileSize"`
}

func NewFileTransmissionRejectContent() *FileTransmissionRejectContent {
	return &FileTransmissionRejectContent{}
}

func (p *FileTransmissionRejectContent) GetTaskId() int64 {
	return p.TaskId
}

func (p *FileTransmissionRejectContent) GetFileName() string {
	return p.FileName
}

func (p *FileTransmissionRejectContent) GetFileSize() int64 {
	return p.FileSize
}
func (p *FileTransmissionRejectContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FileTransmissionRejectContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *FileTransmissionRejectContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *FileTransmissionRejectContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FileSize = v
	}
	return nil
}

func (p *FileTransmissionRejectContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileTransmissionRejectContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FileTransmissionRejectContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:taskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TaskId)); err != nil {
		return fmt.Errorf("%T.taskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:taskId: %s", p, err)
	}
	return err
}

func (p *FileTransmissionRejectContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:fileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.fileName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:fileName: %s", p, err)
	}
	return err
}

func (p *FileTransmissionRejectContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:fileSize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
		return fmt.Errorf("%T.fileSize (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:fileSize: %s", p, err)
	}
	return err
}

func (p *FileTransmissionRejectContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileTransmissionRejectContent(%+v)", *p)
}

type FileTransmissionStopContent struct {
	SendTaskId    int64  `thrift:"sendTaskId,1,required" json:"sendTaskId"`
	ReceiveTaskId int64  `thrift:"receiveTaskId,2,required" json:"receiveTaskId"`
	FileName      string `thrift:"fileName,3,required" json:"fileName"`
	FileSize      int64  `thrift:"fileSize,4,required" json:"fileSize"`
	Flag          int8   `thrift:"flag,5,required" json:"flag"`
}

func NewFileTransmissionStopContent() *FileTransmissionStopContent {
	return &FileTransmissionStopContent{}
}

func (p *FileTransmissionStopContent) GetSendTaskId() int64 {
	return p.SendTaskId
}

func (p *FileTransmissionStopContent) GetReceiveTaskId() int64 {
	return p.ReceiveTaskId
}

func (p *FileTransmissionStopContent) GetFileName() string {
	return p.FileName
}

func (p *FileTransmissionStopContent) GetFileSize() int64 {
	return p.FileSize
}

func (p *FileTransmissionStopContent) GetFlag() int8 {
	return p.Flag
}
func (p *FileTransmissionStopContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FileTransmissionStopContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SendTaskId = v
	}
	return nil
}

func (p *FileTransmissionStopContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiveTaskId = v
	}
	return nil
}

func (p *FileTransmissionStopContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *FileTransmissionStopContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.FileSize = v
	}
	return nil
}

func (p *FileTransmissionStopContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := int8(v)
		p.Flag = temp
	}
	return nil
}

func (p *FileTransmissionStopContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileTransmissionStopContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FileTransmissionStopContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendTaskId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sendTaskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SendTaskId)); err != nil {
		return fmt.Errorf("%T.sendTaskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sendTaskId: %s", p, err)
	}
	return err
}

func (p *FileTransmissionStopContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiveTaskId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiveTaskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ReceiveTaskId)); err != nil {
		return fmt.Errorf("%T.receiveTaskId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiveTaskId: %s", p, err)
	}
	return err
}

func (p *FileTransmissionStopContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:fileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.fileName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:fileName: %s", p, err)
	}
	return err
}

func (p *FileTransmissionStopContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:fileSize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
		return fmt.Errorf("%T.fileSize (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:fileSize: %s", p, err)
	}
	return err
}

func (p *FileTransmissionStopContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.BYTE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:flag: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Flag)); err != nil {
		return fmt.Errorf("%T.flag (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:flag: %s", p, err)
	}
	return err
}

func (p *FileTransmissionStopContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileTransmissionStopContent(%+v)", *p)
}

type DeptTransferConfirmContent struct {
	OperatorId int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserName   string  `thrift:"user_name,2,required" json:"user_name"`
	DeptId     *int32  `thrift:"dept_id,3" json:"dept_id"`
	DeptName   string  `thrift:"dept_name,4,required" json:"dept_name"`
	UserId     int32   `thrift:"user_id,5,required" json:"user_id"`
	Desc       *string `thrift:"desc,6" json:"desc"`
}

func NewDeptTransferConfirmContent() *DeptTransferConfirmContent {
	return &DeptTransferConfirmContent{}
}

func (p *DeptTransferConfirmContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *DeptTransferConfirmContent) GetUserName() string {
	return p.UserName
}

var DeptTransferConfirmContent_DeptId_DEFAULT int32

func (p *DeptTransferConfirmContent) GetDeptId() int32 {
	if !p.IsSetDeptId() {
		return DeptTransferConfirmContent_DeptId_DEFAULT
	}
	return *p.DeptId
}

func (p *DeptTransferConfirmContent) GetDeptName() string {
	return p.DeptName
}

func (p *DeptTransferConfirmContent) GetUserId() int32 {
	return p.UserId
}

var DeptTransferConfirmContent_Desc_DEFAULT string

func (p *DeptTransferConfirmContent) GetDesc() string {
	if !p.IsSetDesc() {
		return DeptTransferConfirmContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *DeptTransferConfirmContent) IsSetDeptId() bool {
	return p.DeptId != nil
}

func (p *DeptTransferConfirmContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *DeptTransferConfirmContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeptTransferConfirmContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *DeptTransferConfirmContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *DeptTransferConfirmContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeptId = &v
	}
	return nil
}

func (p *DeptTransferConfirmContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *DeptTransferConfirmContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DeptTransferConfirmContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *DeptTransferConfirmContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeptTransferConfirmContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeptTransferConfirmContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *DeptTransferConfirmContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *DeptTransferConfirmContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptId() {
		if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:dept_id: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DeptId)); err != nil {
			return fmt.Errorf("%T.dept_id (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:dept_id: %s", p, err)
		}
	}
	return err
}

func (p *DeptTransferConfirmContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_name: %s", p, err)
	}
	return err
}

func (p *DeptTransferConfirmContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_id: %s", p, err)
	}
	return err
}

func (p *DeptTransferConfirmContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *DeptTransferConfirmContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeptTransferConfirmContent(%+v)", *p)
}

type EmployeeLeaveConfirmContent struct {
	OperatorId int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserName   string  `thrift:"user_name,2,required" json:"user_name"`
	DeptId     *int32  `thrift:"dept_id,3" json:"dept_id"`
	DeptName   string  `thrift:"dept_name,4,required" json:"dept_name"`
	UserId     int32   `thrift:"user_id,5,required" json:"user_id"`
	Desc       *string `thrift:"desc,6" json:"desc"`
}

func NewEmployeeLeaveConfirmContent() *EmployeeLeaveConfirmContent {
	return &EmployeeLeaveConfirmContent{}
}

func (p *EmployeeLeaveConfirmContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *EmployeeLeaveConfirmContent) GetUserName() string {
	return p.UserName
}

var EmployeeLeaveConfirmContent_DeptId_DEFAULT int32

func (p *EmployeeLeaveConfirmContent) GetDeptId() int32 {
	if !p.IsSetDeptId() {
		return EmployeeLeaveConfirmContent_DeptId_DEFAULT
	}
	return *p.DeptId
}

func (p *EmployeeLeaveConfirmContent) GetDeptName() string {
	return p.DeptName
}

func (p *EmployeeLeaveConfirmContent) GetUserId() int32 {
	return p.UserId
}

var EmployeeLeaveConfirmContent_Desc_DEFAULT string

func (p *EmployeeLeaveConfirmContent) GetDesc() string {
	if !p.IsSetDesc() {
		return EmployeeLeaveConfirmContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *EmployeeLeaveConfirmContent) IsSetDeptId() bool {
	return p.DeptId != nil
}

func (p *EmployeeLeaveConfirmContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *EmployeeLeaveConfirmContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeptId = &v
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmployeeLeaveConfirmContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmployeeLeaveConfirmContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveConfirmContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveConfirmContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptId() {
		if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:dept_id: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DeptId)); err != nil {
			return fmt.Errorf("%T.dept_id (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:dept_id: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeLeaveConfirmContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_name: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveConfirmContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_id: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveConfirmContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeLeaveConfirmContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeLeaveConfirmContent(%+v)", *p)
}

type EmployeeEntryConfirmContent struct {
	OperatorId int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserName   string  `thrift:"user_name,2,required" json:"user_name"`
	DeptId     *int32  `thrift:"dept_id,3" json:"dept_id"`
	DeptName   string  `thrift:"dept_name,4,required" json:"dept_name"`
	UserId     int32   `thrift:"user_id,5,required" json:"user_id"`
	Desc       *string `thrift:"desc,6" json:"desc"`
}

func NewEmployeeEntryConfirmContent() *EmployeeEntryConfirmContent {
	return &EmployeeEntryConfirmContent{}
}

func (p *EmployeeEntryConfirmContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *EmployeeEntryConfirmContent) GetUserName() string {
	return p.UserName
}

var EmployeeEntryConfirmContent_DeptId_DEFAULT int32

func (p *EmployeeEntryConfirmContent) GetDeptId() int32 {
	if !p.IsSetDeptId() {
		return EmployeeEntryConfirmContent_DeptId_DEFAULT
	}
	return *p.DeptId
}

func (p *EmployeeEntryConfirmContent) GetDeptName() string {
	return p.DeptName
}

func (p *EmployeeEntryConfirmContent) GetUserId() int32 {
	return p.UserId
}

var EmployeeEntryConfirmContent_Desc_DEFAULT string

func (p *EmployeeEntryConfirmContent) GetDesc() string {
	if !p.IsSetDesc() {
		return EmployeeEntryConfirmContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *EmployeeEntryConfirmContent) IsSetDeptId() bool {
	return p.DeptId != nil
}

func (p *EmployeeEntryConfirmContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *EmployeeEntryConfirmContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeptId = &v
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmployeeEntryConfirmContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmployeeEntryConfirmContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryConfirmContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryConfirmContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptId() {
		if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:dept_id: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DeptId)); err != nil {
			return fmt.Errorf("%T.dept_id (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:dept_id: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeEntryConfirmContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_name: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryConfirmContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_id: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryConfirmContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeEntryConfirmContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeEntryConfirmContent(%+v)", *p)
}

type CompanyJoinContent struct {
	OperatorId  int32   `thrift:"operator_id,1,required" json:"operator_id"`
	CompanyId   *int32  `thrift:"company_id,2" json:"company_id"`
	CompanyName string  `thrift:"company_name,3,required" json:"company_name"`
	UserId      int32   `thrift:"user_id,4,required" json:"user_id"`
	UserName    string  `thrift:"user_name,5,required" json:"user_name"`
	Desc        *string `thrift:"desc,6" json:"desc"`
}

func NewCompanyJoinContent() *CompanyJoinContent {
	return &CompanyJoinContent{}
}

func (p *CompanyJoinContent) GetOperatorId() int32 {
	return p.OperatorId
}

var CompanyJoinContent_CompanyId_DEFAULT int32

func (p *CompanyJoinContent) GetCompanyId() int32 {
	if !p.IsSetCompanyId() {
		return CompanyJoinContent_CompanyId_DEFAULT
	}
	return *p.CompanyId
}

func (p *CompanyJoinContent) GetCompanyName() string {
	return p.CompanyName
}

func (p *CompanyJoinContent) GetUserId() int32 {
	return p.UserId
}

func (p *CompanyJoinContent) GetUserName() string {
	return p.UserName
}

var CompanyJoinContent_Desc_DEFAULT string

func (p *CompanyJoinContent) GetDesc() string {
	if !p.IsSetDesc() {
		return CompanyJoinContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *CompanyJoinContent) IsSetCompanyId() bool {
	return p.CompanyId != nil
}

func (p *CompanyJoinContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *CompanyJoinContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompanyJoinContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *CompanyJoinContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CompanyId = &v
	}
	return nil
}

func (p *CompanyJoinContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CompanyName = v
	}
	return nil
}

func (p *CompanyJoinContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *CompanyJoinContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *CompanyJoinContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *CompanyJoinContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompanyJoinContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CompanyJoinContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *CompanyJoinContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompanyId() {
		if err := oprot.WriteFieldBegin("company_id", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:company_id: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.CompanyId)); err != nil {
			return fmt.Errorf("%T.company_id (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:company_id: %s", p, err)
		}
	}
	return err
}

func (p *CompanyJoinContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("company_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:company_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CompanyName)); err != nil {
		return fmt.Errorf("%T.company_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:company_name: %s", p, err)
	}
	return err
}

func (p *CompanyJoinContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_id: %s", p, err)
	}
	return err
}

func (p *CompanyJoinContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_name: %s", p, err)
	}
	return err
}

func (p *CompanyJoinContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *CompanyJoinContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyJoinContent(%+v)", *p)
}

type DeptDeleteContent struct {
	OperatorId     int32   `thrift:"operator_id,1,required" json:"operator_id"`
	DeptId         int32   `thrift:"dept_id,2,required" json:"dept_id"`
	DeptName       string  `thrift:"dept_name,3,required" json:"dept_name"`
	ParentDeptName string  `thrift:"parent_dept_name,4,required" json:"parent_dept_name"`
	Desc           *string `thrift:"desc,5" json:"desc"`
}

func NewDeptDeleteContent() *DeptDeleteContent {
	return &DeptDeleteContent{}
}

func (p *DeptDeleteContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *DeptDeleteContent) GetDeptId() int32 {
	return p.DeptId
}

func (p *DeptDeleteContent) GetDeptName() string {
	return p.DeptName
}

func (p *DeptDeleteContent) GetParentDeptName() string {
	return p.ParentDeptName
}

var DeptDeleteContent_Desc_DEFAULT string

func (p *DeptDeleteContent) GetDesc() string {
	if !p.IsSetDesc() {
		return DeptDeleteContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *DeptDeleteContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *DeptDeleteContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeptDeleteContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *DeptDeleteContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeptId = v
	}
	return nil
}

func (p *DeptDeleteContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *DeptDeleteContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ParentDeptName = v
	}
	return nil
}

func (p *DeptDeleteContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *DeptDeleteContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeptDeleteContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeptDeleteContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *DeptDeleteContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dept_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeptId)); err != nil {
		return fmt.Errorf("%T.dept_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dept_id: %s", p, err)
	}
	return err
}

func (p *DeptDeleteContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:dept_name: %s", p, err)
	}
	return err
}

func (p *DeptDeleteContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent_dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:parent_dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ParentDeptName)); err != nil {
		return fmt.Errorf("%T.parent_dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:parent_dept_name: %s", p, err)
	}
	return err
}

func (p *DeptDeleteContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:desc: %s", p, err)
		}
	}
	return err
}

func (p *DeptDeleteContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeptDeleteContent(%+v)", *p)
}

type DeptParentChangeContent struct {
	OperatorId   int32   `thrift:"operator_id,1,required" json:"operator_id"`
	DeptId       int32   `thrift:"dept_id,2,required" json:"dept_id"`
	DeptName     string  `thrift:"dept_name,3,required" json:"dept_name"`
	OldDeptName  string  `thrift:"old_dept_name,4,required" json:"old_dept_name"`
	NewDeptName_ string  `thrift:"new_dept_name,5,required" json:"new_dept_name"`
	Desc         *string `thrift:"desc,6" json:"desc"`
}

func NewDeptParentChangeContent() *DeptParentChangeContent {
	return &DeptParentChangeContent{}
}

func (p *DeptParentChangeContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *DeptParentChangeContent) GetDeptId() int32 {
	return p.DeptId
}

func (p *DeptParentChangeContent) GetDeptName() string {
	return p.DeptName
}

func (p *DeptParentChangeContent) GetOldDeptName() string {
	return p.OldDeptName
}

func (p *DeptParentChangeContent) GetNewDeptName_() string {
	return p.NewDeptName_
}

var DeptParentChangeContent_Desc_DEFAULT string

func (p *DeptParentChangeContent) GetDesc() string {
	if !p.IsSetDesc() {
		return DeptParentChangeContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *DeptParentChangeContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *DeptParentChangeContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeptParentChangeContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *DeptParentChangeContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeptId = v
	}
	return nil
}

func (p *DeptParentChangeContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *DeptParentChangeContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OldDeptName = v
	}
	return nil
}

func (p *DeptParentChangeContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NewDeptName_ = v
	}
	return nil
}

func (p *DeptParentChangeContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *DeptParentChangeContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeptParentChangeContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeptParentChangeContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *DeptParentChangeContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dept_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeptId)); err != nil {
		return fmt.Errorf("%T.dept_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dept_id: %s", p, err)
	}
	return err
}

func (p *DeptParentChangeContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:dept_name: %s", p, err)
	}
	return err
}

func (p *DeptParentChangeContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:old_dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OldDeptName)); err != nil {
		return fmt.Errorf("%T.old_dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:old_dept_name: %s", p, err)
	}
	return err
}

func (p *DeptParentChangeContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_dept_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:new_dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NewDeptName_)); err != nil {
		return fmt.Errorf("%T.new_dept_name (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:new_dept_name: %s", p, err)
	}
	return err
}

func (p *DeptParentChangeContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *DeptParentChangeContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeptParentChangeContent(%+v)", *p)
}

type DeptUpdateContent struct {
	OperatorId   int32   `thrift:"operator_id,1,required" json:"operator_id"`
	DeptId       int32   `thrift:"dept_id,2,required" json:"dept_id"`
	OldDeptName  string  `thrift:"old_dept_name,3,required" json:"old_dept_name"`
	NewDeptName_ string  `thrift:"new_dept_name,4,required" json:"new_dept_name"`
	Desc         *string `thrift:"desc,5" json:"desc"`
}

func NewDeptUpdateContent() *DeptUpdateContent {
	return &DeptUpdateContent{}
}

func (p *DeptUpdateContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *DeptUpdateContent) GetDeptId() int32 {
	return p.DeptId
}

func (p *DeptUpdateContent) GetOldDeptName() string {
	return p.OldDeptName
}

func (p *DeptUpdateContent) GetNewDeptName_() string {
	return p.NewDeptName_
}

var DeptUpdateContent_Desc_DEFAULT string

func (p *DeptUpdateContent) GetDesc() string {
	if !p.IsSetDesc() {
		return DeptUpdateContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *DeptUpdateContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *DeptUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeptUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *DeptUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeptId = v
	}
	return nil
}

func (p *DeptUpdateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OldDeptName = v
	}
	return nil
}

func (p *DeptUpdateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NewDeptName_ = v
	}
	return nil
}

func (p *DeptUpdateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *DeptUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeptUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeptUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *DeptUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dept_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeptId)); err != nil {
		return fmt.Errorf("%T.dept_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dept_id: %s", p, err)
	}
	return err
}

func (p *DeptUpdateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_dept_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:old_dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OldDeptName)); err != nil {
		return fmt.Errorf("%T.old_dept_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:old_dept_name: %s", p, err)
	}
	return err
}

func (p *DeptUpdateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:new_dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NewDeptName_)); err != nil {
		return fmt.Errorf("%T.new_dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:new_dept_name: %s", p, err)
	}
	return err
}

func (p *DeptUpdateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:desc: %s", p, err)
		}
	}
	return err
}

func (p *DeptUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeptUpdateContent(%+v)", *p)
}

type DeptTransferContent struct {
	OperatorId  int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserId      int32   `thrift:"user_id,2,required" json:"user_id"`
	UserName    string  `thrift:"user_name,3,required" json:"user_name"`
	DeptId      int32   `thrift:"dept_id,4,required" json:"dept_id"`
	OldDeptName *string `thrift:"old_dept_name,5" json:"old_dept_name"`
	DeptName    string  `thrift:"dept_name,6,required" json:"dept_name"`
	Desc        *string `thrift:"desc,7" json:"desc"`
}

func NewDeptTransferContent() *DeptTransferContent {
	return &DeptTransferContent{}
}

func (p *DeptTransferContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *DeptTransferContent) GetUserId() int32 {
	return p.UserId
}

func (p *DeptTransferContent) GetUserName() string {
	return p.UserName
}

func (p *DeptTransferContent) GetDeptId() int32 {
	return p.DeptId
}

var DeptTransferContent_OldDeptName_DEFAULT string

func (p *DeptTransferContent) GetOldDeptName() string {
	if !p.IsSetOldDeptName() {
		return DeptTransferContent_OldDeptName_DEFAULT
	}
	return *p.OldDeptName
}

func (p *DeptTransferContent) GetDeptName() string {
	return p.DeptName
}

var DeptTransferContent_Desc_DEFAULT string

func (p *DeptTransferContent) GetDesc() string {
	if !p.IsSetDesc() {
		return DeptTransferContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *DeptTransferContent) IsSetOldDeptName() bool {
	return p.OldDeptName != nil
}

func (p *DeptTransferContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *DeptTransferContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeptTransferContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *DeptTransferContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DeptTransferContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *DeptTransferContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptId = v
	}
	return nil
}

func (p *DeptTransferContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.OldDeptName = &v
	}
	return nil
}

func (p *DeptTransferContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *DeptTransferContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *DeptTransferContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeptTransferContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeptTransferContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *DeptTransferContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_id: %s", p, err)
	}
	return err
}

func (p *DeptTransferContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_name: %s", p, err)
	}
	return err
}

func (p *DeptTransferContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeptId)); err != nil {
		return fmt.Errorf("%T.dept_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_id: %s", p, err)
	}
	return err
}

func (p *DeptTransferContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOldDeptName() {
		if err := oprot.WriteFieldBegin("old_dept_name", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:old_dept_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OldDeptName)); err != nil {
			return fmt.Errorf("%T.old_dept_name (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:old_dept_name: %s", p, err)
		}
	}
	return err
}

func (p *DeptTransferContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:dept_name: %s", p, err)
	}
	return err
}

func (p *DeptTransferContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:desc: %s", p, err)
		}
	}
	return err
}

func (p *DeptTransferContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeptTransferContent(%+v)", *p)
}

type PositionUpdateContent struct {
	OperatorId   int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserId       int32   `thrift:"user_id,2,required" json:"user_id"`
	UserName     string  `thrift:"user_name,3,required" json:"user_name"`
	NewPosition_ string  `thrift:"new_position,4,required" json:"new_position"`
	OldPosition  *string `thrift:"old_position,5" json:"old_position"`
	DeptName     string  `thrift:"dept_name,6,required" json:"dept_name"`
	Desc         *string `thrift:"desc,7" json:"desc"`
}

func NewPositionUpdateContent() *PositionUpdateContent {
	return &PositionUpdateContent{}
}

func (p *PositionUpdateContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *PositionUpdateContent) GetUserId() int32 {
	return p.UserId
}

func (p *PositionUpdateContent) GetUserName() string {
	return p.UserName
}

func (p *PositionUpdateContent) GetNewPosition_() string {
	return p.NewPosition_
}

var PositionUpdateContent_OldPosition_DEFAULT string

func (p *PositionUpdateContent) GetOldPosition() string {
	if !p.IsSetOldPosition() {
		return PositionUpdateContent_OldPosition_DEFAULT
	}
	return *p.OldPosition
}

func (p *PositionUpdateContent) GetDeptName() string {
	return p.DeptName
}

var PositionUpdateContent_Desc_DEFAULT string

func (p *PositionUpdateContent) GetDesc() string {
	if !p.IsSetDesc() {
		return PositionUpdateContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *PositionUpdateContent) IsSetOldPosition() bool {
	return p.OldPosition != nil
}

func (p *PositionUpdateContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *PositionUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PositionUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *PositionUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *PositionUpdateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *PositionUpdateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NewPosition_ = v
	}
	return nil
}

func (p *PositionUpdateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.OldPosition = &v
	}
	return nil
}

func (p *PositionUpdateContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *PositionUpdateContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *PositionUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PositionUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PositionUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *PositionUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_id: %s", p, err)
	}
	return err
}

func (p *PositionUpdateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_name: %s", p, err)
	}
	return err
}

func (p *PositionUpdateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_position", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:new_position: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NewPosition_)); err != nil {
		return fmt.Errorf("%T.new_position (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:new_position: %s", p, err)
	}
	return err
}

func (p *PositionUpdateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOldPosition() {
		if err := oprot.WriteFieldBegin("old_position", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:old_position: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OldPosition)); err != nil {
			return fmt.Errorf("%T.old_position (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:old_position: %s", p, err)
		}
	}
	return err
}

func (p *PositionUpdateContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:dept_name: %s", p, err)
	}
	return err
}

func (p *PositionUpdateContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:desc: %s", p, err)
		}
	}
	return err
}

func (p *PositionUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PositionUpdateContent(%+v)", *p)
}

type EmployeeEntryContent struct {
	OperatorId int32   `thrift:"operator_id,1,required" json:"operator_id"`
	DeptId     int32   `thrift:"dept_id,2,required" json:"dept_id"`
	UserName   string  `thrift:"user_name,3,required" json:"user_name"`
	DeptName   string  `thrift:"dept_name,4,required" json:"dept_name"`
	Position   string  `thrift:"position,5,required" json:"position"`
	Desc       *string `thrift:"desc,6" json:"desc"`
	UserId     int32   `thrift:"user_id,7,required" json:"user_id"`
}

func NewEmployeeEntryContent() *EmployeeEntryContent {
	return &EmployeeEntryContent{}
}

func (p *EmployeeEntryContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *EmployeeEntryContent) GetDeptId() int32 {
	return p.DeptId
}

func (p *EmployeeEntryContent) GetUserName() string {
	return p.UserName
}

func (p *EmployeeEntryContent) GetDeptName() string {
	return p.DeptName
}

func (p *EmployeeEntryContent) GetPosition() string {
	return p.Position
}

func (p *EmployeeEntryContent) GetUserId() int32 {
	return p.UserId
}

var EmployeeEntryContent_Desc_DEFAULT string

func (p *EmployeeEntryContent) GetDesc() string {
	if !p.IsSetDesc() {
		return EmployeeEntryContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *EmployeeEntryContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *EmployeeEntryContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeptId = v
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Position = v
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *EmployeeEntryContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *EmployeeEntryContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmployeeEntryContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmployeeEntryContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dept_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeptId)); err != nil {
		return fmt.Errorf("%T.dept_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dept_id: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_name: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_name: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("position", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:position: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Position)); err != nil {
		return fmt.Errorf("%T.position (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:position: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeEntryContent) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:user_id: %s", p, err)
	}
	return err
}

func (p *EmployeeEntryContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeEntryContent(%+v)", *p)
}

type EmployeeLeaveContent struct {
	OperatorId int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserId     int32   `thrift:"user_id,2,required" json:"user_id"`
	UserName   string  `thrift:"user_name,3,required" json:"user_name"`
	DeptName   string  `thrift:"dept_name,4,required" json:"dept_name"`
	Desc       *string `thrift:"desc,5" json:"desc"`
}

func NewEmployeeLeaveContent() *EmployeeLeaveContent {
	return &EmployeeLeaveContent{}
}

func (p *EmployeeLeaveContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *EmployeeLeaveContent) GetUserId() int32 {
	return p.UserId
}

func (p *EmployeeLeaveContent) GetUserName() string {
	return p.UserName
}

func (p *EmployeeLeaveContent) GetDeptName() string {
	return p.DeptName
}

var EmployeeLeaveContent_Desc_DEFAULT string

func (p *EmployeeLeaveContent) GetDesc() string {
	if !p.IsSetDesc() {
		return EmployeeLeaveContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *EmployeeLeaveContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *EmployeeLeaveContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmployeeLeaveContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *EmployeeLeaveContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *EmployeeLeaveContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *EmployeeLeaveContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *EmployeeLeaveContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *EmployeeLeaveContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmployeeLeaveContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmployeeLeaveContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_id: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_name: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_name: %s", p, err)
	}
	return err
}

func (p *EmployeeLeaveContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:desc: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeLeaveContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeLeaveContent(%+v)", *p)
}

type EmployeeRightsChangeContent struct {
	OperatorId int32   `thrift:"operator_id,1,required" json:"operator_id"`
	UserId     int32   `thrift:"user_id,2,required" json:"user_id"`
	UserName   string  `thrift:"user_name,3,required" json:"user_name"`
	DeptName   string  `thrift:"dept_name,4,required" json:"dept_name"`
	DeptId     int32   `thrift:"dept_id,5,required" json:"dept_id"`
	Desc       *string `thrift:"desc,6" json:"desc"`
}

func NewEmployeeRightsChangeContent() *EmployeeRightsChangeContent {
	return &EmployeeRightsChangeContent{}
}

func (p *EmployeeRightsChangeContent) GetOperatorId() int32 {
	return p.OperatorId
}

func (p *EmployeeRightsChangeContent) GetUserId() int32 {
	return p.UserId
}

func (p *EmployeeRightsChangeContent) GetUserName() string {
	return p.UserName
}

func (p *EmployeeRightsChangeContent) GetDeptName() string {
	return p.DeptName
}

func (p *EmployeeRightsChangeContent) GetDeptId() int32 {
	return p.DeptId
}

var EmployeeRightsChangeContent_Desc_DEFAULT string

func (p *EmployeeRightsChangeContent) GetDesc() string {
	if !p.IsSetDesc() {
		return EmployeeRightsChangeContent_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *EmployeeRightsChangeContent) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *EmployeeRightsChangeContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmployeeRightsChangeContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *EmployeeRightsChangeContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *EmployeeRightsChangeContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *EmployeeRightsChangeContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeptName = v
	}
	return nil
}

func (p *EmployeeRightsChangeContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.DeptId = v
	}
	return nil
}

func (p *EmployeeRightsChangeContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *EmployeeRightsChangeContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmployeeRightsChangeContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmployeeRightsChangeContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operator_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operator_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operator_id: %s", p, err)
	}
	return err
}

func (p *EmployeeRightsChangeContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_id: %s", p, err)
	}
	return err
}

func (p *EmployeeRightsChangeContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_name: %s", p, err)
	}
	return err
}

func (p *EmployeeRightsChangeContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dept_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeptName)); err != nil {
		return fmt.Errorf("%T.dept_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dept_name: %s", p, err)
	}
	return err
}

func (p *EmployeeRightsChangeContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dept_id", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:dept_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeptId)); err != nil {
		return fmt.Errorf("%T.dept_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:dept_id: %s", p, err)
	}
	return err
}

func (p *EmployeeRightsChangeContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:desc: %s", p, err)
		}
	}
	return err
}

func (p *EmployeeRightsChangeContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeRightsChangeContent(%+v)", *p)
}

type InstantIQInviteContent struct {
	ConfId    int32  `thrift:"confId,1,required" json:"confId"`
	HostId    int32  `thrift:"hostId,2,required" json:"hostId"`
	ConfPwd   string `thrift:"confPwd,3,required" json:"confPwd"`
	IsReserve *int8  `thrift:"isReserve,4" json:"isReserve"`
}

func NewInstantIQInviteContent() *InstantIQInviteContent {
	return &InstantIQInviteContent{}
}

func (p *InstantIQInviteContent) GetConfId() int32 {
	return p.ConfId
}

func (p *InstantIQInviteContent) GetHostId() int32 {
	return p.HostId
}

func (p *InstantIQInviteContent) GetConfPwd() string {
	return p.ConfPwd
}

var InstantIQInviteContent_IsReserve_DEFAULT int8

func (p *InstantIQInviteContent) GetIsReserve() int8 {
	if !p.IsSetIsReserve() {
		return InstantIQInviteContent_IsReserve_DEFAULT
	}
	return *p.IsReserve
}
func (p *InstantIQInviteContent) IsSetIsReserve() bool {
	return p.IsReserve != nil
}

func (p *InstantIQInviteContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InstantIQInviteContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *InstantIQInviteContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *InstantIQInviteContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ConfPwd = v
	}
	return nil
}

func (p *InstantIQInviteContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.IsReserve = &temp
	}
	return nil
}

func (p *InstantIQInviteContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InstantIQInviteContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InstantIQInviteContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *InstantIQInviteContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hostId: %s", p, err)
	}
	return err
}

func (p *InstantIQInviteContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confPwd", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:confPwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfPwd)); err != nil {
		return fmt.Errorf("%T.confPwd (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:confPwd: %s", p, err)
	}
	return err
}

func (p *InstantIQInviteContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsReserve() {
		if err := oprot.WriteFieldBegin("isReserve", thrift.BYTE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:isReserve: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.IsReserve)); err != nil {
			return fmt.Errorf("%T.isReserve (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:isReserve: %s", p, err)
		}
	}
	return err
}

func (p *InstantIQInviteContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstantIQInviteContent(%+v)", *p)
}

type InstantIQReceiveContent struct {
	ConfId    int32 `thrift:"confId,1,required" json:"confId"`
	IsReserve *int8 `thrift:"isReserve,2" json:"isReserve"`
}

func NewInstantIQReceiveContent() *InstantIQReceiveContent {
	return &InstantIQReceiveContent{}
}

func (p *InstantIQReceiveContent) GetConfId() int32 {
	return p.ConfId
}

var InstantIQReceiveContent_IsReserve_DEFAULT int8

func (p *InstantIQReceiveContent) GetIsReserve() int8 {
	if !p.IsSetIsReserve() {
		return InstantIQReceiveContent_IsReserve_DEFAULT
	}
	return *p.IsReserve
}
func (p *InstantIQReceiveContent) IsSetIsReserve() bool {
	return p.IsReserve != nil
}

func (p *InstantIQReceiveContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InstantIQReceiveContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *InstantIQReceiveContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.IsReserve = &temp
	}
	return nil
}

func (p *InstantIQReceiveContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InstantIQReceiveContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InstantIQReceiveContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *InstantIQReceiveContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsReserve() {
		if err := oprot.WriteFieldBegin("isReserve", thrift.BYTE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:isReserve: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.IsReserve)); err != nil {
			return fmt.Errorf("%T.isReserve (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:isReserve: %s", p, err)
		}
	}
	return err
}

func (p *InstantIQReceiveContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstantIQReceiveContent(%+v)", *p)
}

type InstantIQRejectContent struct {
	ConfId    int32 `thrift:"confId,1,required" json:"confId"`
	IsReserve *int8 `thrift:"isReserve,2" json:"isReserve"`
}

func NewInstantIQRejectContent() *InstantIQRejectContent {
	return &InstantIQRejectContent{}
}

func (p *InstantIQRejectContent) GetConfId() int32 {
	return p.ConfId
}

var InstantIQRejectContent_IsReserve_DEFAULT int8

func (p *InstantIQRejectContent) GetIsReserve() int8 {
	if !p.IsSetIsReserve() {
		return InstantIQRejectContent_IsReserve_DEFAULT
	}
	return *p.IsReserve
}
func (p *InstantIQRejectContent) IsSetIsReserve() bool {
	return p.IsReserve != nil
}

func (p *InstantIQRejectContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InstantIQRejectContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *InstantIQRejectContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.IsReserve = &temp
	}
	return nil
}

func (p *InstantIQRejectContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InstantIQRejectContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InstantIQRejectContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *InstantIQRejectContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsReserve() {
		if err := oprot.WriteFieldBegin("isReserve", thrift.BYTE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:isReserve: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.IsReserve)); err != nil {
			return fmt.Errorf("%T.isReserve (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:isReserve: %s", p, err)
		}
	}
	return err
}

func (p *InstantIQRejectContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstantIQRejectContent(%+v)", *p)
}

type IQInviteContent struct {
	ConfId      int32  `thrift:"confId,1,required" json:"confId"`
	ShareUserID *int32 `thrift:"shareUserID,2" json:"shareUserID"`
	HostId      int32  `thrift:"hostId,3,required" json:"hostId"`
	GroupID     int32  `thrift:"groupID,4,required" json:"groupID"`
	Icalendar   string `thrift:"icalendar,5,required" json:"icalendar"`
	IsRecurrent int8   `thrift:"isRecurrent,6,required" json:"isRecurrent"`
	StartTime   *int32 `thrift:"startTime,7" json:"startTime"`
	// unused field # 8
	EventId       *int64 `thrift:"eventId,9" json:"eventId"`
	ParentEventId *int64 `thrift:"parentEventId,10" json:"parentEventId"`
	OriStartTime  *int32 `thrift:"oriStartTime,11" json:"oriStartTime"`
}

func NewIQInviteContent() *IQInviteContent {
	return &IQInviteContent{}
}

func (p *IQInviteContent) GetConfId() int32 {
	return p.ConfId
}

var IQInviteContent_ShareUserID_DEFAULT int32

func (p *IQInviteContent) GetShareUserID() int32 {
	if !p.IsSetShareUserID() {
		return IQInviteContent_ShareUserID_DEFAULT
	}
	return *p.ShareUserID
}

func (p *IQInviteContent) GetHostId() int32 {
	return p.HostId
}

func (p *IQInviteContent) GetGroupID() int32 {
	return p.GroupID
}

func (p *IQInviteContent) GetIsRecurrent() int8 {
	return p.IsRecurrent
}

var IQInviteContent_StartTime_DEFAULT int32

func (p *IQInviteContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return IQInviteContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

var IQInviteContent_EventId_DEFAULT int64

func (p *IQInviteContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return IQInviteContent_EventId_DEFAULT
	}
	return *p.EventId
}

var IQInviteContent_ParentEventId_DEFAULT int64

func (p *IQInviteContent) GetParentEventId() int64 {
	if !p.IsSetParentEventId() {
		return IQInviteContent_ParentEventId_DEFAULT
	}
	return *p.ParentEventId
}

var IQInviteContent_OriStartTime_DEFAULT int32

func (p *IQInviteContent) GetOriStartTime() int32 {
	if !p.IsSetOriStartTime() {
		return IQInviteContent_OriStartTime_DEFAULT
	}
	return *p.OriStartTime
}

func (p *IQInviteContent) GetIcalendar() string {
	return p.Icalendar
}
func (p *IQInviteContent) IsSetShareUserID() bool {
	return p.ShareUserID != nil
}

func (p *IQInviteContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *IQInviteContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *IQInviteContent) IsSetParentEventId() bool {
	return p.ParentEventId != nil
}

func (p *IQInviteContent) IsSetOriStartTime() bool {
	return p.OriStartTime != nil
}

func (p *IQInviteContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IQInviteContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *IQInviteContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ShareUserID = &v
	}
	return nil
}

func (p *IQInviteContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *IQInviteContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.GroupID = v
	}
	return nil
}

func (p *IQInviteContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.IsRecurrent = temp
	}
	return nil
}

func (p *IQInviteContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *IQInviteContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *IQInviteContent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ParentEventId = &v
	}
	return nil
}

func (p *IQInviteContent) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.OriStartTime = &v
	}
	return nil
}

func (p *IQInviteContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Icalendar = v
	}
	return nil
}

func (p *IQInviteContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IQInviteContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IQInviteContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *IQInviteContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareUserID() {
		if err := oprot.WriteFieldBegin("shareUserID", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:shareUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ShareUserID)); err != nil {
			return fmt.Errorf("%T.shareUserID (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:shareUserID: %s", p, err)
		}
	}
	return err
}

func (p *IQInviteContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hostId: %s", p, err)
	}
	return err
}

func (p *IQInviteContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupID", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:groupID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GroupID)); err != nil {
		return fmt.Errorf("%T.groupID (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:groupID: %s", p, err)
	}
	return err
}

func (p *IQInviteContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("icalendar", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:icalendar: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Icalendar)); err != nil {
		return fmt.Errorf("%T.icalendar (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:icalendar: %s", p, err)
	}
	return err
}

func (p *IQInviteContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isRecurrent", thrift.BYTE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:isRecurrent: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.IsRecurrent)); err != nil {
		return fmt.Errorf("%T.isRecurrent (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:isRecurrent: %s", p, err)
	}
	return err
}

func (p *IQInviteContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:startTime: %s", p, err)
		}
	}
	return err
}

func (p *IQInviteContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:eventId: %s", p, err)
		}
	}
	return err
}

func (p *IQInviteContent) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentEventId() {
		if err := oprot.WriteFieldBegin("parentEventId", thrift.I64, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:parentEventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ParentEventId)); err != nil {
			return fmt.Errorf("%T.parentEventId (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:parentEventId: %s", p, err)
		}
	}
	return err
}

func (p *IQInviteContent) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriStartTime() {
		if err := oprot.WriteFieldBegin("oriStartTime", thrift.I32, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:oriStartTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OriStartTime)); err != nil {
			return fmt.Errorf("%T.oriStartTime (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:oriStartTime: %s", p, err)
		}
	}
	return err
}

func (p *IQInviteContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IQInviteContent(%+v)", *p)
}

type IQReceiveContent struct {
	ConfId        int32   `thrift:"confId,1,required" json:"confId"`
	ShareUserID   *int32  `thrift:"shareUserID,2" json:"shareUserID"`
	ForwardUserID *int32  `thrift:"forwardUserID,3" json:"forwardUserID"`
	StartTime     *int32  `thrift:"startTime,4" json:"startTime"`
	HostId        int32   `thrift:"hostId,5,required" json:"hostId"`
	Icalendar     *string `thrift:"icalendar,6" json:"icalendar"`
	EventId       *int64  `thrift:"eventId,7" json:"eventId"`
	ParentEventId *int64  `thrift:"parentEventId,8" json:"parentEventId"`
	OriStartTime  *int32  `thrift:"oriStartTime,9" json:"oriStartTime"`
}

func NewIQReceiveContent() *IQReceiveContent {
	return &IQReceiveContent{}
}

func (p *IQReceiveContent) GetConfId() int32 {
	return p.ConfId
}

var IQReceiveContent_ShareUserID_DEFAULT int32

func (p *IQReceiveContent) GetShareUserID() int32 {
	if !p.IsSetShareUserID() {
		return IQReceiveContent_ShareUserID_DEFAULT
	}
	return *p.ShareUserID
}

var IQReceiveContent_ForwardUserID_DEFAULT int32

func (p *IQReceiveContent) GetForwardUserID() int32 {
	if !p.IsSetForwardUserID() {
		return IQReceiveContent_ForwardUserID_DEFAULT
	}
	return *p.ForwardUserID
}

var IQReceiveContent_StartTime_DEFAULT int32

func (p *IQReceiveContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return IQReceiveContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

func (p *IQReceiveContent) GetHostId() int32 {
	return p.HostId
}

var IQReceiveContent_EventId_DEFAULT int64

func (p *IQReceiveContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return IQReceiveContent_EventId_DEFAULT
	}
	return *p.EventId
}

var IQReceiveContent_ParentEventId_DEFAULT int64

func (p *IQReceiveContent) GetParentEventId() int64 {
	if !p.IsSetParentEventId() {
		return IQReceiveContent_ParentEventId_DEFAULT
	}
	return *p.ParentEventId
}

var IQReceiveContent_OriStartTime_DEFAULT int32

func (p *IQReceiveContent) GetOriStartTime() int32 {
	if !p.IsSetOriStartTime() {
		return IQReceiveContent_OriStartTime_DEFAULT
	}
	return *p.OriStartTime
}

var IQReceiveContent_Icalendar_DEFAULT string

func (p *IQReceiveContent) GetIcalendar() string {
	if !p.IsSetIcalendar() {
		return IQReceiveContent_Icalendar_DEFAULT
	}
	return *p.Icalendar
}
func (p *IQReceiveContent) IsSetShareUserID() bool {
	return p.ShareUserID != nil
}

func (p *IQReceiveContent) IsSetForwardUserID() bool {
	return p.ForwardUserID != nil
}

func (p *IQReceiveContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *IQReceiveContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *IQReceiveContent) IsSetParentEventId() bool {
	return p.ParentEventId != nil
}

func (p *IQReceiveContent) IsSetOriStartTime() bool {
	return p.OriStartTime != nil
}

func (p *IQReceiveContent) IsSetIcalendar() bool {
	return p.Icalendar != nil
}

func (p *IQReceiveContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IQReceiveContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *IQReceiveContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ShareUserID = &v
	}
	return nil
}

func (p *IQReceiveContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ForwardUserID = &v
	}
	return nil
}

func (p *IQReceiveContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *IQReceiveContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *IQReceiveContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *IQReceiveContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.ParentEventId = &v
	}
	return nil
}

func (p *IQReceiveContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.OriStartTime = &v
	}
	return nil
}

func (p *IQReceiveContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Icalendar = &v
	}
	return nil
}

func (p *IQReceiveContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IQReceiveContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IQReceiveContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *IQReceiveContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareUserID() {
		if err := oprot.WriteFieldBegin("shareUserID", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:shareUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ShareUserID)); err != nil {
			return fmt.Errorf("%T.shareUserID (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:shareUserID: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetForwardUserID() {
		if err := oprot.WriteFieldBegin("forwardUserID", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:forwardUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ForwardUserID)); err != nil {
			return fmt.Errorf("%T.forwardUserID (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:forwardUserID: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:startTime: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:hostId: %s", p, err)
	}
	return err
}

func (p *IQReceiveContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcalendar() {
		if err := oprot.WriteFieldBegin("icalendar", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:icalendar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Icalendar)); err != nil {
			return fmt.Errorf("%T.icalendar (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:icalendar: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:eventId: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentEventId() {
		if err := oprot.WriteFieldBegin("parentEventId", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:parentEventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ParentEventId)); err != nil {
			return fmt.Errorf("%T.parentEventId (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:parentEventId: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriStartTime() {
		if err := oprot.WriteFieldBegin("oriStartTime", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:oriStartTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OriStartTime)); err != nil {
			return fmt.Errorf("%T.oriStartTime (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:oriStartTime: %s", p, err)
		}
	}
	return err
}

func (p *IQReceiveContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IQReceiveContent(%+v)", *p)
}

type IQRejectContent struct {
	ConfId        int32   `thrift:"confId,1,required" json:"confId"`
	ShareUserID   *int32  `thrift:"shareUserID,2" json:"shareUserID"`
	ForwardUserID *int32  `thrift:"forwardUserID,3" json:"forwardUserID"`
	StartTime     *int32  `thrift:"startTime,4" json:"startTime"`
	HostId        int32   `thrift:"hostId,5,required" json:"hostId"`
	Icalendar     *string `thrift:"icalendar,6" json:"icalendar"`
	EventId       *int64  `thrift:"eventId,7" json:"eventId"`
	ParentEventId *int64  `thrift:"parentEventId,8" json:"parentEventId"`
	OriStartTime  *int32  `thrift:"oriStartTime,9" json:"oriStartTime"`
}

func NewIQRejectContent() *IQRejectContent {
	return &IQRejectContent{}
}

func (p *IQRejectContent) GetConfId() int32 {
	return p.ConfId
}

var IQRejectContent_ShareUserID_DEFAULT int32

func (p *IQRejectContent) GetShareUserID() int32 {
	if !p.IsSetShareUserID() {
		return IQRejectContent_ShareUserID_DEFAULT
	}
	return *p.ShareUserID
}

var IQRejectContent_ForwardUserID_DEFAULT int32

func (p *IQRejectContent) GetForwardUserID() int32 {
	if !p.IsSetForwardUserID() {
		return IQRejectContent_ForwardUserID_DEFAULT
	}
	return *p.ForwardUserID
}

var IQRejectContent_StartTime_DEFAULT int32

func (p *IQRejectContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return IQRejectContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

func (p *IQRejectContent) GetHostId() int32 {
	return p.HostId
}

var IQRejectContent_EventId_DEFAULT int64

func (p *IQRejectContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return IQRejectContent_EventId_DEFAULT
	}
	return *p.EventId
}

var IQRejectContent_ParentEventId_DEFAULT int64

func (p *IQRejectContent) GetParentEventId() int64 {
	if !p.IsSetParentEventId() {
		return IQRejectContent_ParentEventId_DEFAULT
	}
	return *p.ParentEventId
}

var IQRejectContent_OriStartTime_DEFAULT int32

func (p *IQRejectContent) GetOriStartTime() int32 {
	if !p.IsSetOriStartTime() {
		return IQRejectContent_OriStartTime_DEFAULT
	}
	return *p.OriStartTime
}

var IQRejectContent_Icalendar_DEFAULT string

func (p *IQRejectContent) GetIcalendar() string {
	if !p.IsSetIcalendar() {
		return IQRejectContent_Icalendar_DEFAULT
	}
	return *p.Icalendar
}
func (p *IQRejectContent) IsSetShareUserID() bool {
	return p.ShareUserID != nil
}

func (p *IQRejectContent) IsSetForwardUserID() bool {
	return p.ForwardUserID != nil
}

func (p *IQRejectContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *IQRejectContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *IQRejectContent) IsSetParentEventId() bool {
	return p.ParentEventId != nil
}

func (p *IQRejectContent) IsSetOriStartTime() bool {
	return p.OriStartTime != nil
}

func (p *IQRejectContent) IsSetIcalendar() bool {
	return p.Icalendar != nil
}

func (p *IQRejectContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IQRejectContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *IQRejectContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ShareUserID = &v
	}
	return nil
}

func (p *IQRejectContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ForwardUserID = &v
	}
	return nil
}

func (p *IQRejectContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *IQRejectContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *IQRejectContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *IQRejectContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.ParentEventId = &v
	}
	return nil
}

func (p *IQRejectContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.OriStartTime = &v
	}
	return nil
}

func (p *IQRejectContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Icalendar = &v
	}
	return nil
}

func (p *IQRejectContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IQRejectContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IQRejectContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *IQRejectContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareUserID() {
		if err := oprot.WriteFieldBegin("shareUserID", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:shareUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ShareUserID)); err != nil {
			return fmt.Errorf("%T.shareUserID (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:shareUserID: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetForwardUserID() {
		if err := oprot.WriteFieldBegin("forwardUserID", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:forwardUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ForwardUserID)); err != nil {
			return fmt.Errorf("%T.forwardUserID (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:forwardUserID: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:startTime: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:hostId: %s", p, err)
	}
	return err
}

func (p *IQRejectContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcalendar() {
		if err := oprot.WriteFieldBegin("icalendar", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:icalendar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Icalendar)); err != nil {
			return fmt.Errorf("%T.icalendar (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:icalendar: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:eventId: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentEventId() {
		if err := oprot.WriteFieldBegin("parentEventId", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:parentEventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ParentEventId)); err != nil {
			return fmt.Errorf("%T.parentEventId (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:parentEventId: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriStartTime() {
		if err := oprot.WriteFieldBegin("oriStartTime", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:oriStartTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OriStartTime)); err != nil {
			return fmt.Errorf("%T.oriStartTime (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:oriStartTime: %s", p, err)
		}
	}
	return err
}

func (p *IQRejectContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IQRejectContent(%+v)", *p)
}

type ConfCancelContent struct {
	ConfId        int32   `thrift:"confId,1,required" json:"confId"`
	ShareUserID   *int32  `thrift:"shareUserID,2" json:"shareUserID"`
	StartTime     *int32  `thrift:"startTime,3" json:"startTime"`
	Icalendar     *string `thrift:"icalendar,4" json:"icalendar"`
	EventId       *int64  `thrift:"eventId,5" json:"eventId"`
	ParentEventId *int64  `thrift:"parentEventId,6" json:"parentEventId"`
	OriStartTime  *int32  `thrift:"oriStartTime,7" json:"oriStartTime"`
}

func NewConfCancelContent() *ConfCancelContent {
	return &ConfCancelContent{}
}

func (p *ConfCancelContent) GetConfId() int32 {
	return p.ConfId
}

var ConfCancelContent_ShareUserID_DEFAULT int32

func (p *ConfCancelContent) GetShareUserID() int32 {
	if !p.IsSetShareUserID() {
		return ConfCancelContent_ShareUserID_DEFAULT
	}
	return *p.ShareUserID
}

var ConfCancelContent_StartTime_DEFAULT int32

func (p *ConfCancelContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return ConfCancelContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ConfCancelContent_EventId_DEFAULT int64

func (p *ConfCancelContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return ConfCancelContent_EventId_DEFAULT
	}
	return *p.EventId
}

var ConfCancelContent_ParentEventId_DEFAULT int64

func (p *ConfCancelContent) GetParentEventId() int64 {
	if !p.IsSetParentEventId() {
		return ConfCancelContent_ParentEventId_DEFAULT
	}
	return *p.ParentEventId
}

var ConfCancelContent_OriStartTime_DEFAULT int32

func (p *ConfCancelContent) GetOriStartTime() int32 {
	if !p.IsSetOriStartTime() {
		return ConfCancelContent_OriStartTime_DEFAULT
	}
	return *p.OriStartTime
}

var ConfCancelContent_Icalendar_DEFAULT string

func (p *ConfCancelContent) GetIcalendar() string {
	if !p.IsSetIcalendar() {
		return ConfCancelContent_Icalendar_DEFAULT
	}
	return *p.Icalendar
}
func (p *ConfCancelContent) IsSetShareUserID() bool {
	return p.ShareUserID != nil
}

func (p *ConfCancelContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ConfCancelContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *ConfCancelContent) IsSetParentEventId() bool {
	return p.ParentEventId != nil
}

func (p *ConfCancelContent) IsSetOriStartTime() bool {
	return p.OriStartTime != nil
}

func (p *ConfCancelContent) IsSetIcalendar() bool {
	return p.Icalendar != nil
}

func (p *ConfCancelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfCancelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *ConfCancelContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ShareUserID = &v
	}
	return nil
}

func (p *ConfCancelContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *ConfCancelContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *ConfCancelContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ParentEventId = &v
	}
	return nil
}

func (p *ConfCancelContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.OriStartTime = &v
	}
	return nil
}

func (p *ConfCancelContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Icalendar = &v
	}
	return nil
}

func (p *ConfCancelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfCancelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfCancelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *ConfCancelContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareUserID() {
		if err := oprot.WriteFieldBegin("shareUserID", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:shareUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ShareUserID)); err != nil {
			return fmt.Errorf("%T.shareUserID (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:shareUserID: %s", p, err)
		}
	}
	return err
}

func (p *ConfCancelContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:startTime: %s", p, err)
		}
	}
	return err
}

func (p *ConfCancelContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcalendar() {
		if err := oprot.WriteFieldBegin("icalendar", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:icalendar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Icalendar)); err != nil {
			return fmt.Errorf("%T.icalendar (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:icalendar: %s", p, err)
		}
	}
	return err
}

func (p *ConfCancelContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:eventId: %s", p, err)
		}
	}
	return err
}

func (p *ConfCancelContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentEventId() {
		if err := oprot.WriteFieldBegin("parentEventId", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:parentEventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ParentEventId)); err != nil {
			return fmt.Errorf("%T.parentEventId (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:parentEventId: %s", p, err)
		}
	}
	return err
}

func (p *ConfCancelContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriStartTime() {
		if err := oprot.WriteFieldBegin("oriStartTime", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:oriStartTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OriStartTime)); err != nil {
			return fmt.Errorf("%T.oriStartTime (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:oriStartTime: %s", p, err)
		}
	}
	return err
}

func (p *ConfCancelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfCancelContent(%+v)", *p)
}

type ConfAlertContent struct {
	ConfId      int32     `thrift:"confId,1,required" json:"confId"`
	ShareUserID *int32    `thrift:"shareUserID,2" json:"shareUserID"`
	IsInstant   *int8     `thrift:"isInstant,3" json:"isInstant"`
	StartTime   *int32    `thrift:"startTime,4" json:"startTime"`
	Role        *RoleType `thrift:"role,5" json:"role"`
	Icalendar   *string   `thrift:"icalendar,6" json:"icalendar"`
	EventId     *int64    `thrift:"eventId,7" json:"eventId"`
}

func NewConfAlertContent() *ConfAlertContent {
	return &ConfAlertContent{}
}

func (p *ConfAlertContent) GetConfId() int32 {
	return p.ConfId
}

var ConfAlertContent_ShareUserID_DEFAULT int32

func (p *ConfAlertContent) GetShareUserID() int32 {
	if !p.IsSetShareUserID() {
		return ConfAlertContent_ShareUserID_DEFAULT
	}
	return *p.ShareUserID
}

var ConfAlertContent_IsInstant_DEFAULT int8

func (p *ConfAlertContent) GetIsInstant() int8 {
	if !p.IsSetIsInstant() {
		return ConfAlertContent_IsInstant_DEFAULT
	}
	return *p.IsInstant
}

var ConfAlertContent_StartTime_DEFAULT int32

func (p *ConfAlertContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return ConfAlertContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ConfAlertContent_Role_DEFAULT RoleType

func (p *ConfAlertContent) GetRole() RoleType {
	if !p.IsSetRole() {
		return ConfAlertContent_Role_DEFAULT
	}
	return *p.Role
}

var ConfAlertContent_Icalendar_DEFAULT string

func (p *ConfAlertContent) GetIcalendar() string {
	if !p.IsSetIcalendar() {
		return ConfAlertContent_Icalendar_DEFAULT
	}
	return *p.Icalendar
}

var ConfAlertContent_EventId_DEFAULT int64

func (p *ConfAlertContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return ConfAlertContent_EventId_DEFAULT
	}
	return *p.EventId
}
func (p *ConfAlertContent) IsSetShareUserID() bool {
	return p.ShareUserID != nil
}

func (p *ConfAlertContent) IsSetIsInstant() bool {
	return p.IsInstant != nil
}

func (p *ConfAlertContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ConfAlertContent) IsSetRole() bool {
	return p.Role != nil
}

func (p *ConfAlertContent) IsSetIcalendar() bool {
	return p.Icalendar != nil
}

func (p *ConfAlertContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *ConfAlertContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfAlertContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *ConfAlertContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ShareUserID = &v
	}
	return nil
}

func (p *ConfAlertContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.IsInstant = &temp
	}
	return nil
}

func (p *ConfAlertContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *ConfAlertContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := RoleType(v)
		p.Role = &temp
	}
	return nil
}

func (p *ConfAlertContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Icalendar = &v
	}
	return nil
}

func (p *ConfAlertContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *ConfAlertContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfAlertContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfAlertContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *ConfAlertContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareUserID() {
		if err := oprot.WriteFieldBegin("shareUserID", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:shareUserID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ShareUserID)); err != nil {
			return fmt.Errorf("%T.shareUserID (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:shareUserID: %s", p, err)
		}
	}
	return err
}

func (p *ConfAlertContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInstant() {
		if err := oprot.WriteFieldBegin("isInstant", thrift.BYTE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:isInstant: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.IsInstant)); err != nil {
			return fmt.Errorf("%T.isInstant (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:isInstant: %s", p, err)
		}
	}
	return err
}

func (p *ConfAlertContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:startTime: %s", p, err)
		}
	}
	return err
}

func (p *ConfAlertContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:role: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Role)); err != nil {
			return fmt.Errorf("%T.role (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:role: %s", p, err)
		}
	}
	return err
}

func (p *ConfAlertContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcalendar() {
		if err := oprot.WriteFieldBegin("icalendar", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:icalendar: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Icalendar)); err != nil {
			return fmt.Errorf("%T.icalendar (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:icalendar: %s", p, err)
		}
	}
	return err
}

func (p *ConfAlertContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:eventId: %s", p, err)
		}
	}
	return err
}

func (p *ConfAlertContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfAlertContent(%+v)", *p)
}

type ConfChatContent struct {
	ConfId           int32              `thrift:"confId,1,required" json:"confId"`
	StartTime        *int32             `thrift:"startTime,2" json:"startTime"`
	Text             *TextContent       `thrift:"text,3" json:"text"`
	Media            *MediaContent      `thrift:"media,4" json:"media"`
	EventId          *int64             `thrift:"eventId,5" json:"eventId"`
	Revocation       *RevocationContent `thrift:"revocation,6" json:"revocation"`
	Emoji            *EmojiContent      `thrift:"emoji,7" json:"emoji"`
	CloudFileContent *CloudFileContent  `thrift:"cloudFileContent,8" json:"cloudFileContent"`
}

func NewConfChatContent() *ConfChatContent {
	return &ConfChatContent{}
}

func (p *ConfChatContent) GetConfId() int32 {
	return p.ConfId
}

var ConfChatContent_StartTime_DEFAULT int32

func (p *ConfChatContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return ConfChatContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ConfChatContent_Text_DEFAULT *TextContent

func (p *ConfChatContent) GetText() *TextContent {
	if !p.IsSetText() {
		return ConfChatContent_Text_DEFAULT
	}
	return p.Text
}

var ConfChatContent_Media_DEFAULT *MediaContent

func (p *ConfChatContent) GetMedia() *MediaContent {
	if !p.IsSetMedia() {
		return ConfChatContent_Media_DEFAULT
	}
	return p.Media
}

var ConfChatContent_EventId_DEFAULT int64

func (p *ConfChatContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return ConfChatContent_EventId_DEFAULT
	}
	return *p.EventId
}

var ConfChatContent_Revocation_DEFAULT *RevocationContent

func (p *ConfChatContent) GetRevocation() *RevocationContent {
	if !p.IsSetRevocation() {
		return ConfChatContent_Revocation_DEFAULT
	}
	return p.Revocation
}

var ConfChatContent_Emoji_DEFAULT *EmojiContent

func (p *ConfChatContent) GetEmoji() *EmojiContent {
	if !p.IsSetEmoji() {
		return ConfChatContent_Emoji_DEFAULT
	}
	return p.Emoji
}

var ConfChatContent_CloudFileContent_DEFAULT *CloudFileContent

func (p *ConfChatContent) GetCloudFileContent() *CloudFileContent {
	if !p.IsSetCloudFileContent() {
		return ConfChatContent_CloudFileContent_DEFAULT
	}
	return p.CloudFileContent
}
func (p *ConfChatContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ConfChatContent) IsSetText() bool {
	return p.Text != nil
}

func (p *ConfChatContent) IsSetMedia() bool {
	return p.Media != nil
}

func (p *ConfChatContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *ConfChatContent) IsSetRevocation() bool {
	return p.Revocation != nil
}

func (p *ConfChatContent) IsSetEmoji() bool {
	return p.Emoji != nil
}

func (p *ConfChatContent) IsSetCloudFileContent() bool {
	return p.CloudFileContent != nil
}

func (p *ConfChatContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfChatContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *ConfChatContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *ConfChatContent) ReadField3(iprot thrift.TProtocol) error {
	p.Text = &TextContent{}
	if err := p.Text.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Text, err)
	}
	return nil
}

func (p *ConfChatContent) ReadField4(iprot thrift.TProtocol) error {
	p.Media = &MediaContent{}
	if err := p.Media.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Media, err)
	}
	return nil
}

func (p *ConfChatContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *ConfChatContent) ReadField6(iprot thrift.TProtocol) error {
	p.Revocation = &RevocationContent{}
	if err := p.Revocation.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Revocation, err)
	}
	return nil
}

func (p *ConfChatContent) ReadField7(iprot thrift.TProtocol) error {
	p.Emoji = &EmojiContent{}
	if err := p.Emoji.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Emoji, err)
	}
	return nil
}

func (p *ConfChatContent) ReadField8(iprot thrift.TProtocol) error {
	p.CloudFileContent = &CloudFileContent{}
	if err := p.CloudFileContent.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CloudFileContent, err)
	}
	return nil
}

func (p *ConfChatContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfChatContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfChatContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *ConfChatContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:startTime: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err := oprot.WriteFieldBegin("text", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:text: %s", p, err)
		}
		if err := p.Text.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Text, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:text: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMedia() {
		if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:media: %s", p, err)
		}
		if err := p.Media.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Media, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:media: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:eventId: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRevocation() {
		if err := oprot.WriteFieldBegin("revocation", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:revocation: %s", p, err)
		}
		if err := p.Revocation.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Revocation, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:revocation: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmoji() {
		if err := oprot.WriteFieldBegin("emoji", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:emoji: %s", p, err)
		}
		if err := p.Emoji.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Emoji, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:emoji: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudFileContent() {
		if err := oprot.WriteFieldBegin("cloudFileContent", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:cloudFileContent: %s", p, err)
		}
		if err := p.CloudFileContent.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CloudFileContent, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:cloudFileContent: %s", p, err)
		}
	}
	return err
}

func (p *ConfChatContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfChatContent(%+v)", *p)
}

type ConfSummaryContent struct {
	Operatorid  int32   `thrift:"operatorid,1,required" json:"operatorid"`
	SummaryId   int32   `thrift:"summary_id,2,required" json:"summary_id"`
	SummaryName string  `thrift:"summary_name,3,required" json:"summary_name"`
	State       int8    `thrift:"state,4,required" json:"state"`
	ConfId      int32   `thrift:"confId,5,required" json:"confId"`
	ConfName    *string `thrift:"confName,6" json:"confName"`
	StartTime   *int32  `thrift:"startTime,7" json:"startTime"`
	UpdateTime  *int32  `thrift:"updateTime,8" json:"updateTime"`
	EventId     *int64  `thrift:"eventId,9" json:"eventId"`
}

func NewConfSummaryContent() *ConfSummaryContent {
	return &ConfSummaryContent{}
}

func (p *ConfSummaryContent) GetOperatorid() int32 {
	return p.Operatorid
}

func (p *ConfSummaryContent) GetSummaryId() int32 {
	return p.SummaryId
}

func (p *ConfSummaryContent) GetSummaryName() string {
	return p.SummaryName
}

func (p *ConfSummaryContent) GetState() int8 {
	return p.State
}

func (p *ConfSummaryContent) GetConfId() int32 {
	return p.ConfId
}

var ConfSummaryContent_ConfName_DEFAULT string

func (p *ConfSummaryContent) GetConfName() string {
	if !p.IsSetConfName() {
		return ConfSummaryContent_ConfName_DEFAULT
	}
	return *p.ConfName
}

var ConfSummaryContent_StartTime_DEFAULT int32

func (p *ConfSummaryContent) GetStartTime() int32 {
	if !p.IsSetStartTime() {
		return ConfSummaryContent_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ConfSummaryContent_UpdateTime_DEFAULT int32

func (p *ConfSummaryContent) GetUpdateTime() int32 {
	if !p.IsSetUpdateTime() {
		return ConfSummaryContent_UpdateTime_DEFAULT
	}
	return *p.UpdateTime
}

var ConfSummaryContent_EventId_DEFAULT int64

func (p *ConfSummaryContent) GetEventId() int64 {
	if !p.IsSetEventId() {
		return ConfSummaryContent_EventId_DEFAULT
	}
	return *p.EventId
}
func (p *ConfSummaryContent) IsSetConfName() bool {
	return p.ConfName != nil
}

func (p *ConfSummaryContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ConfSummaryContent) IsSetUpdateTime() bool {
	return p.UpdateTime != nil
}

func (p *ConfSummaryContent) IsSetEventId() bool {
	return p.EventId != nil
}

func (p *ConfSummaryContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfSummaryContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SummaryId = v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SummaryName = v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.State = temp
	}
	return nil
}

func (p *ConfSummaryContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ConfName = &v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.UpdateTime = &v
	}
	return nil
}

func (p *ConfSummaryContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EventId = &v
	}
	return nil
}

func (p *ConfSummaryContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfSummaryContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfSummaryContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *ConfSummaryContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("summary_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:summary_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SummaryId)); err != nil {
		return fmt.Errorf("%T.summary_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:summary_id: %s", p, err)
	}
	return err
}

func (p *ConfSummaryContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("summary_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:summary_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SummaryName)); err != nil {
		return fmt.Errorf("%T.summary_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:summary_name: %s", p, err)
	}
	return err
}

func (p *ConfSummaryContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:state: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.State)); err != nil {
		return fmt.Errorf("%T.state (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:state: %s", p, err)
	}
	return err
}

func (p *ConfSummaryContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:confId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:confId: %s", p, err)
	}
	return err
}

func (p *ConfSummaryContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfName() {
		if err := oprot.WriteFieldBegin("confName", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:confName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ConfName)); err != nil {
			return fmt.Errorf("%T.confName (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:confName: %s", p, err)
		}
	}
	return err
}

func (p *ConfSummaryContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:startTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:startTime: %s", p, err)
		}
	}
	return err
}

func (p *ConfSummaryContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateTime() {
		if err := oprot.WriteFieldBegin("updateTime", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:updateTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateTime)); err != nil {
			return fmt.Errorf("%T.updateTime (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:updateTime: %s", p, err)
		}
	}
	return err
}

func (p *ConfSummaryContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventId() {
		if err := oprot.WriteFieldBegin("eventId", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:eventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
			return fmt.Errorf("%T.eventId (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:eventId: %s", p, err)
		}
	}
	return err
}

func (p *ConfSummaryContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfSummaryContent(%+v)", *p)
}

type CallStateContent struct {
	UserId        int32  `thrift:"userId,1,required" json:"userId"`
	PartyId       string `thrift:"partyId,2,required" json:"partyId"`
	CallSeq       string `thrift:"callSeq,3,required" json:"callSeq"`
	OldCallState  int32  `thrift:"oldCallState,4,required" json:"oldCallState"`
	NewCallState_ int32  `thrift:"newCallState,5,required" json:"newCallState"`
}

func NewCallStateContent() *CallStateContent {
	return &CallStateContent{}
}

func (p *CallStateContent) GetUserId() int32 {
	return p.UserId
}

func (p *CallStateContent) GetPartyId() string {
	return p.PartyId
}

func (p *CallStateContent) GetCallSeq() string {
	return p.CallSeq
}

func (p *CallStateContent) GetOldCallState() int32 {
	return p.OldCallState
}

func (p *CallStateContent) GetNewCallState_() int32 {
	return p.NewCallState_
}
func (p *CallStateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CallStateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *CallStateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartyId = v
	}
	return nil
}

func (p *CallStateContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CallSeq = v
	}
	return nil
}

func (p *CallStateContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OldCallState = v
	}
	return nil
}

func (p *CallStateContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NewCallState_ = v
	}
	return nil
}

func (p *CallStateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallStateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CallStateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userId: %s", p, err)
	}
	return err
}

func (p *CallStateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partyId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:partyId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartyId)); err != nil {
		return fmt.Errorf("%T.partyId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:partyId: %s", p, err)
	}
	return err
}

func (p *CallStateContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callSeq", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:callSeq: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CallSeq)); err != nil {
		return fmt.Errorf("%T.callSeq (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:callSeq: %s", p, err)
	}
	return err
}

func (p *CallStateContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oldCallState", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:oldCallState: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OldCallState)); err != nil {
		return fmt.Errorf("%T.oldCallState (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:oldCallState: %s", p, err)
	}
	return err
}

func (p *CallStateContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newCallState", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:newCallState: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NewCallState_)); err != nil {
		return fmt.Errorf("%T.newCallState (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:newCallState: %s", p, err)
	}
	return err
}

func (p *CallStateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallStateContent(%+v)", *p)
}

type ConfUploadContent struct {
	Operatorid int64  `thrift:"operatorid,1,required" json:"operatorid"`
	DocName    string `thrift:"doc_name,2,required" json:"doc_name"`
	DownUrl    string `thrift:"down_url,3,required" json:"down_url"`
	Size       int64  `thrift:"size,4,required" json:"size"`
	ContentId  int64  `thrift:"contentId,5,required" json:"contentId"`
	EventId    int64  `thrift:"eventId,6,required" json:"eventId"`
}

func NewConfUploadContent() *ConfUploadContent {
	return &ConfUploadContent{}
}

func (p *ConfUploadContent) GetOperatorid() int64 {
	return p.Operatorid
}

func (p *ConfUploadContent) GetDocName() string {
	return p.DocName
}

func (p *ConfUploadContent) GetDownUrl() string {
	return p.DownUrl
}

func (p *ConfUploadContent) GetSize() int64 {
	return p.Size
}

func (p *ConfUploadContent) GetContentId() int64 {
	return p.ContentId
}

func (p *ConfUploadContent) GetEventId() int64 {
	return p.EventId
}
func (p *ConfUploadContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfUploadContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *ConfUploadContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DocName = v
	}
	return nil
}

func (p *ConfUploadContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DownUrl = v
	}
	return nil
}

func (p *ConfUploadContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *ConfUploadContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *ConfUploadContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.EventId = v
	}
	return nil
}

func (p *ConfUploadContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfUploadContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfUploadContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *ConfUploadContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("doc_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:doc_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DocName)); err != nil {
		return fmt.Errorf("%T.doc_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:doc_name: %s", p, err)
	}
	return err
}

func (p *ConfUploadContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("down_url", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:down_url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DownUrl)); err != nil {
		return fmt.Errorf("%T.down_url (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:down_url: %s", p, err)
	}
	return err
}

func (p *ConfUploadContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:size: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Size)); err != nil {
		return fmt.Errorf("%T.size (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:size: %s", p, err)
	}
	return err
}

func (p *ConfUploadContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:contentId: %s", p, err)
	}
	return err
}

func (p *ConfUploadContent) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventId", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:eventId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EventId)); err != nil {
		return fmt.Errorf("%T.eventId (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:eventId: %s", p, err)
	}
	return err
}

func (p *ConfUploadContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfUploadContent(%+v)", *p)
}

type ConfDelDocContent struct {
	Operatorid int64  `thrift:"operatorid,1,required" json:"operatorid"`
	DocName    string `thrift:"doc_name,2,required" json:"doc_name"`
	ContentId  int64  `thrift:"contentId,3,required" json:"contentId"`
	EventId    int64  `thrift:"eventId,4,required" json:"eventId"`
}

func NewConfDelDocContent() *ConfDelDocContent {
	return &ConfDelDocContent{}
}

func (p *ConfDelDocContent) GetOperatorid() int64 {
	return p.Operatorid
}

func (p *ConfDelDocContent) GetDocName() string {
	return p.DocName
}

func (p *ConfDelDocContent) GetContentId() int64 {
	return p.ContentId
}

func (p *ConfDelDocContent) GetEventId() int64 {
	return p.EventId
}
func (p *ConfDelDocContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfDelDocContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Operatorid = v
	}
	return nil
}

func (p *ConfDelDocContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DocName = v
	}
	return nil
}

func (p *ConfDelDocContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ContentId = v
	}
	return nil
}

func (p *ConfDelDocContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.EventId = v
	}
	return nil
}

func (p *ConfDelDocContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfDelDocContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfDelDocContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Operatorid)); err != nil {
		return fmt.Errorf("%T.operatorid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorid: %s", p, err)
	}
	return err
}

func (p *ConfDelDocContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("doc_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:doc_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DocName)); err != nil {
		return fmt.Errorf("%T.doc_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:doc_name: %s", p, err)
	}
	return err
}

func (p *ConfDelDocContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentId", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contentId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
		return fmt.Errorf("%T.contentId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contentId: %s", p, err)
	}
	return err
}

func (p *ConfDelDocContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventId", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:eventId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EventId)); err != nil {
		return fmt.Errorf("%T.eventId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:eventId: %s", p, err)
	}
	return err
}

func (p *ConfDelDocContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfDelDocContent(%+v)", *p)
}

type ConfShareContent struct {
}

func NewConfShareContent() *ConfShareContent {
	return &ConfShareContent{}
}

func (p *ConfShareContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfShareContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfShareContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfShareContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfShareContent(%+v)", *p)
}

type AudioInviteContent struct {
	ConfId  string `thrift:"confId,1,required" json:"confId"`
	HostId  int32  `thrift:"hostId,2,required" json:"hostId"`
	ConfPwd string `thrift:"confPwd,3,required" json:"confPwd"`
}

func NewAudioInviteContent() *AudioInviteContent {
	return &AudioInviteContent{}
}

func (p *AudioInviteContent) GetConfId() string {
	return p.ConfId
}

func (p *AudioInviteContent) GetHostId() int32 {
	return p.HostId
}

func (p *AudioInviteContent) GetConfPwd() string {
	return p.ConfPwd
}
func (p *AudioInviteContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioInviteContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *AudioInviteContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *AudioInviteContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ConfPwd = v
	}
	return nil
}

func (p *AudioInviteContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioInviteContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioInviteContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *AudioInviteContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hostId: %s", p, err)
	}
	return err
}

func (p *AudioInviteContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confPwd", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:confPwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfPwd)); err != nil {
		return fmt.Errorf("%T.confPwd (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:confPwd: %s", p, err)
	}
	return err
}

func (p *AudioInviteContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioInviteContent(%+v)", *p)
}

type AudioReceiveContent struct {
	ConfId string `thrift:"confId,1,required" json:"confId"`
	HostId int32  `thrift:"hostId,2,required" json:"hostId"`
}

func NewAudioReceiveContent() *AudioReceiveContent {
	return &AudioReceiveContent{}
}

func (p *AudioReceiveContent) GetConfId() string {
	return p.ConfId
}

func (p *AudioReceiveContent) GetHostId() int32 {
	return p.HostId
}
func (p *AudioReceiveContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioReceiveContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *AudioReceiveContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *AudioReceiveContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioReceiveContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioReceiveContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *AudioReceiveContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hostId: %s", p, err)
	}
	return err
}

func (p *AudioReceiveContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioReceiveContent(%+v)", *p)
}

type AudioRejectContent struct {
	ConfId string  `thrift:"confId,1,required" json:"confId"`
	HostId int32   `thrift:"hostId,2,required" json:"hostId"`
	Reason *string `thrift:"reason,3" json:"reason"`
}

func NewAudioRejectContent() *AudioRejectContent {
	return &AudioRejectContent{}
}

func (p *AudioRejectContent) GetConfId() string {
	return p.ConfId
}

func (p *AudioRejectContent) GetHostId() int32 {
	return p.HostId
}

var AudioRejectContent_Reason_DEFAULT string

func (p *AudioRejectContent) GetReason() string {
	if !p.IsSetReason() {
		return AudioRejectContent_Reason_DEFAULT
	}
	return *p.Reason
}
func (p *AudioRejectContent) IsSetReason() bool {
	return p.Reason != nil
}

func (p *AudioRejectContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioRejectContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *AudioRejectContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *AudioRejectContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Reason = &v
	}
	return nil
}

func (p *AudioRejectContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioRejectContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioRejectContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *AudioRejectContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hostId: %s", p, err)
	}
	return err
}

func (p *AudioRejectContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReason() {
		if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:reason: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Reason)); err != nil {
			return fmt.Errorf("%T.reason (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:reason: %s", p, err)
		}
	}
	return err
}

func (p *AudioRejectContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioRejectContent(%+v)", *p)
}

type AudioStopContent struct {
	ConfId string `thrift:"confId,1,required" json:"confId"`
	HostId int32  `thrift:"hostId,2,required" json:"hostId"`
}

func NewAudioStopContent() *AudioStopContent {
	return &AudioStopContent{}
}

func (p *AudioStopContent) GetConfId() string {
	return p.ConfId
}

func (p *AudioStopContent) GetHostId() int32 {
	return p.HostId
}
func (p *AudioStopContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioStopContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *AudioStopContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HostId = v
	}
	return nil
}

func (p *AudioStopContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioStopContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioStopContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *AudioStopContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostId", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hostId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.HostId)); err != nil {
		return fmt.Errorf("%T.hostId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hostId: %s", p, err)
	}
	return err
}

func (p *AudioStopContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioStopContent(%+v)", *p)
}

type AudioBlockCallContent struct {
	PhoneNum *string `thrift:"phoneNum,1" json:"phoneNum"`
}

func NewAudioBlockCallContent() *AudioBlockCallContent {
	return &AudioBlockCallContent{}
}

var AudioBlockCallContent_PhoneNum_DEFAULT string

func (p *AudioBlockCallContent) GetPhoneNum() string {
	if !p.IsSetPhoneNum() {
		return AudioBlockCallContent_PhoneNum_DEFAULT
	}
	return *p.PhoneNum
}
func (p *AudioBlockCallContent) IsSetPhoneNum() bool {
	return p.PhoneNum != nil
}

func (p *AudioBlockCallContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioBlockCallContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PhoneNum = &v
	}
	return nil
}

func (p *AudioBlockCallContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioBlockCallContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioBlockCallContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNum() {
		if err := oprot.WriteFieldBegin("phoneNum", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:phoneNum: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PhoneNum)); err != nil {
			return fmt.Errorf("%T.phoneNum (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:phoneNum: %s", p, err)
		}
	}
	return err
}

func (p *AudioBlockCallContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioBlockCallContent(%+v)", *p)
}

type AudioRejectCallContent struct {
	PhoneNum *string `thrift:"phoneNum,1" json:"phoneNum"`
}

func NewAudioRejectCallContent() *AudioRejectCallContent {
	return &AudioRejectCallContent{}
}

var AudioRejectCallContent_PhoneNum_DEFAULT string

func (p *AudioRejectCallContent) GetPhoneNum() string {
	if !p.IsSetPhoneNum() {
		return AudioRejectCallContent_PhoneNum_DEFAULT
	}
	return *p.PhoneNum
}
func (p *AudioRejectCallContent) IsSetPhoneNum() bool {
	return p.PhoneNum != nil
}

func (p *AudioRejectCallContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioRejectCallContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PhoneNum = &v
	}
	return nil
}

func (p *AudioRejectCallContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioRejectCallContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioRejectCallContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNum() {
		if err := oprot.WriteFieldBegin("phoneNum", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:phoneNum: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PhoneNum)); err != nil {
			return fmt.Errorf("%T.phoneNum (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:phoneNum: %s", p, err)
		}
	}
	return err
}

func (p *AudioRejectCallContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioRejectCallContent(%+v)", *p)
}

type AudioRecentCallContent struct {
	Duration int32   `thrift:"duration,1,required" json:"duration"`
	PhoneNum *string `thrift:"phoneNum,2" json:"phoneNum"`
}

func NewAudioRecentCallContent() *AudioRecentCallContent {
	return &AudioRecentCallContent{}
}

func (p *AudioRecentCallContent) GetDuration() int32 {
	return p.Duration
}

var AudioRecentCallContent_PhoneNum_DEFAULT string

func (p *AudioRecentCallContent) GetPhoneNum() string {
	if !p.IsSetPhoneNum() {
		return AudioRecentCallContent_PhoneNum_DEFAULT
	}
	return *p.PhoneNum
}
func (p *AudioRecentCallContent) IsSetPhoneNum() bool {
	return p.PhoneNum != nil
}

func (p *AudioRecentCallContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioRecentCallContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Duration = v
	}
	return nil
}

func (p *AudioRecentCallContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PhoneNum = &v
	}
	return nil
}

func (p *AudioRecentCallContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioRecentCallContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioRecentCallContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("duration", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:duration: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Duration)); err != nil {
		return fmt.Errorf("%T.duration (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:duration: %s", p, err)
	}
	return err
}

func (p *AudioRecentCallContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNum() {
		if err := oprot.WriteFieldBegin("phoneNum", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:phoneNum: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PhoneNum)); err != nil {
			return fmt.Errorf("%T.phoneNum (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:phoneNum: %s", p, err)
		}
	}
	return err
}

func (p *AudioRecentCallContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioRecentCallContent(%+v)", *p)
}

type AudioCancelCallContent struct {
	PhoneNum *string `thrift:"phoneNum,1" json:"phoneNum"`
}

func NewAudioCancelCallContent() *AudioCancelCallContent {
	return &AudioCancelCallContent{}
}

var AudioCancelCallContent_PhoneNum_DEFAULT string

func (p *AudioCancelCallContent) GetPhoneNum() string {
	if !p.IsSetPhoneNum() {
		return AudioCancelCallContent_PhoneNum_DEFAULT
	}
	return *p.PhoneNum
}
func (p *AudioCancelCallContent) IsSetPhoneNum() bool {
	return p.PhoneNum != nil
}

func (p *AudioCancelCallContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AudioCancelCallContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PhoneNum = &v
	}
	return nil
}

func (p *AudioCancelCallContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioCancelCallContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AudioCancelCallContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNum() {
		if err := oprot.WriteFieldBegin("phoneNum", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:phoneNum: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PhoneNum)); err != nil {
			return fmt.Errorf("%T.phoneNum (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:phoneNum: %s", p, err)
		}
	}
	return err
}

func (p *AudioCancelCallContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioCancelCallContent(%+v)", *p)
}

type CardUpdateContent struct {
	UserId      int32 `thrift:"userId,1,required" json:"userId"`
	CardVersion int32 `thrift:"cardVersion,2,required" json:"cardVersion"`
}

func NewCardUpdateContent() *CardUpdateContent {
	return &CardUpdateContent{}
}

func (p *CardUpdateContent) GetUserId() int32 {
	return p.UserId
}

func (p *CardUpdateContent) GetCardVersion() int32 {
	return p.CardVersion
}
func (p *CardUpdateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CardUpdateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *CardUpdateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CardVersion = v
	}
	return nil
}

func (p *CardUpdateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CardUpdateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CardUpdateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userId: %s", p, err)
	}
	return err
}

func (p *CardUpdateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cardVersion", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:cardVersion: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CardVersion)); err != nil {
		return fmt.Errorf("%T.cardVersion (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:cardVersion: %s", p, err)
	}
	return err
}

func (p *CardUpdateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CardUpdateContent(%+v)", *p)
}

type ContacterAddContent struct {
}

func NewContacterAddContent() *ContacterAddContent {
	return &ContacterAddContent{}
}

func (p *ContacterAddContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContacterAddContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContacterAddContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContacterAddContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContacterAddContent(%+v)", *p)
}

type ContacterDelContent struct {
}

func NewContacterDelContent() *ContacterDelContent {
	return &ContacterDelContent{}
}

func (p *ContacterDelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContacterDelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContacterDelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContacterDelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContacterDelContent(%+v)", *p)
}

type AttentionCreateContent struct {
	OperatorId  *int32 `thrift:"operatorId,1" json:"operatorId"`
	AttentionId *int32 `thrift:"attentionId,2" json:"attentionId"`
}

func NewAttentionCreateContent() *AttentionCreateContent {
	return &AttentionCreateContent{}
}

var AttentionCreateContent_OperatorId_DEFAULT int32

func (p *AttentionCreateContent) GetOperatorId() int32 {
	if !p.IsSetOperatorId() {
		return AttentionCreateContent_OperatorId_DEFAULT
	}
	return *p.OperatorId
}

var AttentionCreateContent_AttentionId_DEFAULT int32

func (p *AttentionCreateContent) GetAttentionId() int32 {
	if !p.IsSetAttentionId() {
		return AttentionCreateContent_AttentionId_DEFAULT
	}
	return *p.AttentionId
}
func (p *AttentionCreateContent) IsSetOperatorId() bool {
	return p.OperatorId != nil
}

func (p *AttentionCreateContent) IsSetAttentionId() bool {
	return p.AttentionId != nil
}

func (p *AttentionCreateContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AttentionCreateContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = &v
	}
	return nil
}

func (p *AttentionCreateContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AttentionId = &v
	}
	return nil
}

func (p *AttentionCreateContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AttentionCreateContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AttentionCreateContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorId() {
		if err := oprot.WriteFieldBegin("operatorId", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:operatorId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OperatorId)); err != nil {
			return fmt.Errorf("%T.operatorId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:operatorId: %s", p, err)
		}
	}
	return err
}

func (p *AttentionCreateContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttentionId() {
		if err := oprot.WriteFieldBegin("attentionId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:attentionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.AttentionId)); err != nil {
			return fmt.Errorf("%T.attentionId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:attentionId: %s", p, err)
		}
	}
	return err
}

func (p *AttentionCreateContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttentionCreateContent(%+v)", *p)
}

type AttentionCancelContent struct {
	OperatorId  *int32 `thrift:"operatorId,1" json:"operatorId"`
	AttentionId *int32 `thrift:"attentionId,2" json:"attentionId"`
}

func NewAttentionCancelContent() *AttentionCancelContent {
	return &AttentionCancelContent{}
}

var AttentionCancelContent_OperatorId_DEFAULT int32

func (p *AttentionCancelContent) GetOperatorId() int32 {
	if !p.IsSetOperatorId() {
		return AttentionCancelContent_OperatorId_DEFAULT
	}
	return *p.OperatorId
}

var AttentionCancelContent_AttentionId_DEFAULT int32

func (p *AttentionCancelContent) GetAttentionId() int32 {
	if !p.IsSetAttentionId() {
		return AttentionCancelContent_AttentionId_DEFAULT
	}
	return *p.AttentionId
}
func (p *AttentionCancelContent) IsSetOperatorId() bool {
	return p.OperatorId != nil
}

func (p *AttentionCancelContent) IsSetAttentionId() bool {
	return p.AttentionId != nil
}

func (p *AttentionCancelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AttentionCancelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OperatorId = &v
	}
	return nil
}

func (p *AttentionCancelContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AttentionId = &v
	}
	return nil
}

func (p *AttentionCancelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AttentionCancelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AttentionCancelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorId() {
		if err := oprot.WriteFieldBegin("operatorId", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:operatorId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OperatorId)); err != nil {
			return fmt.Errorf("%T.operatorId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:operatorId: %s", p, err)
		}
	}
	return err
}

func (p *AttentionCancelContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttentionId() {
		if err := oprot.WriteFieldBegin("attentionId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:attentionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.AttentionId)); err != nil {
			return fmt.Errorf("%T.attentionId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:attentionId: %s", p, err)
		}
	}
	return err
}

func (p *AttentionCancelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttentionCancelContent(%+v)", *p)
}

type WBMessageContent struct {
	Text string `thrift:"text,1,required" json:"text"`
}

func NewWBMessageContent() *WBMessageContent {
	return &WBMessageContent{}
}

func (p *WBMessageContent) GetText() string {
	return p.Text
}
func (p *WBMessageContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WBMessageContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *WBMessageContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WBMessageContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *WBMessageContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:text: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return fmt.Errorf("%T.text (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:text: %s", p, err)
	}
	return err
}

func (p *WBMessageContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WBMessageContent(%+v)", *p)
}

type RemoteAssistanceInviteContent struct {
	ConfId      string `thrift:"confId,1,required" json:"confId"`
	ConfPwd     string `thrift:"confPwd,2,required" json:"confPwd"`
	ControlType int32  `thrift:"controlType,3,required" json:"controlType"`
}

func NewRemoteAssistanceInviteContent() *RemoteAssistanceInviteContent {
	return &RemoteAssistanceInviteContent{}
}

func (p *RemoteAssistanceInviteContent) GetConfId() string {
	return p.ConfId
}

func (p *RemoteAssistanceInviteContent) GetConfPwd() string {
	return p.ConfPwd
}

func (p *RemoteAssistanceInviteContent) GetControlType() int32 {
	return p.ControlType
}
func (p *RemoteAssistanceInviteContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoteAssistanceInviteContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *RemoteAssistanceInviteContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ConfPwd = v
	}
	return nil
}

func (p *RemoteAssistanceInviteContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ControlType = v
	}
	return nil
}

func (p *RemoteAssistanceInviteContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteAssistanceInviteContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoteAssistanceInviteContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceInviteContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confPwd", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:confPwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfPwd)); err != nil {
		return fmt.Errorf("%T.confPwd (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:confPwd: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceInviteContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("controlType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:controlType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ControlType)); err != nil {
		return fmt.Errorf("%T.controlType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:controlType: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceInviteContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteAssistanceInviteContent(%+v)", *p)
}

type RemoteAssistanceAcceptContent struct {
	ConfId      string `thrift:"confId,1,required" json:"confId"`
	ControlType int32  `thrift:"controlType,2,required" json:"controlType"`
}

func NewRemoteAssistanceAcceptContent() *RemoteAssistanceAcceptContent {
	return &RemoteAssistanceAcceptContent{}
}

func (p *RemoteAssistanceAcceptContent) GetConfId() string {
	return p.ConfId
}

func (p *RemoteAssistanceAcceptContent) GetControlType() int32 {
	return p.ControlType
}
func (p *RemoteAssistanceAcceptContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoteAssistanceAcceptContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *RemoteAssistanceAcceptContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ControlType = v
	}
	return nil
}

func (p *RemoteAssistanceAcceptContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteAssistanceAcceptContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoteAssistanceAcceptContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceAcceptContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("controlType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:controlType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ControlType)); err != nil {
		return fmt.Errorf("%T.controlType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:controlType: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceAcceptContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteAssistanceAcceptContent(%+v)", *p)
}

type RemoteAssistanceRejectContent struct {
	ConfId      string `thrift:"confId,1,required" json:"confId"`
	ControlType int32  `thrift:"controlType,2,required" json:"controlType"`
}

func NewRemoteAssistanceRejectContent() *RemoteAssistanceRejectContent {
	return &RemoteAssistanceRejectContent{}
}

func (p *RemoteAssistanceRejectContent) GetConfId() string {
	return p.ConfId
}

func (p *RemoteAssistanceRejectContent) GetControlType() int32 {
	return p.ControlType
}
func (p *RemoteAssistanceRejectContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoteAssistanceRejectContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *RemoteAssistanceRejectContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ControlType = v
	}
	return nil
}

func (p *RemoteAssistanceRejectContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteAssistanceRejectContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoteAssistanceRejectContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceRejectContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("controlType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:controlType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ControlType)); err != nil {
		return fmt.Errorf("%T.controlType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:controlType: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceRejectContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteAssistanceRejectContent(%+v)", *p)
}

type RemoteAssistanceEndContent struct {
	ConfId string `thrift:"confId,1,required" json:"confId"`
}

func NewRemoteAssistanceEndContent() *RemoteAssistanceEndContent {
	return &RemoteAssistanceEndContent{}
}

func (p *RemoteAssistanceEndContent) GetConfId() string {
	return p.ConfId
}
func (p *RemoteAssistanceEndContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoteAssistanceEndContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *RemoteAssistanceEndContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteAssistanceEndContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoteAssistanceEndContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceEndContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteAssistanceEndContent(%+v)", *p)
}

type RemoteAssistanceCancelContent struct {
	ConfId string `thrift:"confId,1,required" json:"confId"`
}

func NewRemoteAssistanceCancelContent() *RemoteAssistanceCancelContent {
	return &RemoteAssistanceCancelContent{}
}

func (p *RemoteAssistanceCancelContent) GetConfId() string {
	return p.ConfId
}
func (p *RemoteAssistanceCancelContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoteAssistanceCancelContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConfId = v
	}
	return nil
}

func (p *RemoteAssistanceCancelContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoteAssistanceCancelContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoteAssistanceCancelContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:confId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfId)); err != nil {
		return fmt.Errorf("%T.confId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:confId: %s", p, err)
	}
	return err
}

func (p *RemoteAssistanceCancelContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoteAssistanceCancelContent(%+v)", *p)
}

type UserLoginNotifyContent struct {
	User       *JID       `thrift:"user,1,required" json:"user"`
	DeviceType DeviceType `thrift:"deviceType,2,required" json:"deviceType"`
	DeviceName string     `thrift:"deviceName,3,required" json:"deviceName"`
}

func NewUserLoginNotifyContent() *UserLoginNotifyContent {
	return &UserLoginNotifyContent{}
}

var UserLoginNotifyContent_User_DEFAULT *JID

func (p *UserLoginNotifyContent) GetUser() *JID {
	if !p.IsSetUser() {
		return UserLoginNotifyContent_User_DEFAULT
	}
	return p.User
}

func (p *UserLoginNotifyContent) GetDeviceType() DeviceType {
	return p.DeviceType
}

func (p *UserLoginNotifyContent) GetDeviceName() string {
	return p.DeviceName
}
func (p *UserLoginNotifyContent) IsSetUser() bool {
	return p.User != nil
}

func (p *UserLoginNotifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserLoginNotifyContent) ReadField1(iprot thrift.TProtocol) error {
	p.User = &JID{}
	if err := p.User.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.User, err)
	}
	return nil
}

func (p *UserLoginNotifyContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := DeviceType(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *UserLoginNotifyContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeviceName = v
	}
	return nil
}

func (p *UserLoginNotifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserLoginNotifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserLoginNotifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user: %s", p, err)
	}
	if err := p.User.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.User, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user: %s", p, err)
	}
	return err
}

func (p *UserLoginNotifyContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deviceType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return fmt.Errorf("%T.deviceType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deviceType: %s", p, err)
	}
	return err
}

func (p *UserLoginNotifyContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deviceName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeviceName)); err != nil {
		return fmt.Errorf("%T.deviceName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deviceName: %s", p, err)
	}
	return err
}

func (p *UserLoginNotifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginNotifyContent(%+v)", *p)
}

type SessionTopContent struct {
	To          *JID   `thrift:"to,1,required" json:"to"`
	SessionType int8   `thrift:"sessionType,2,required" json:"sessionType"`
	Topindex    *int64 `thrift:"topindex,3" json:"topindex"`
}

func NewSessionTopContent() *SessionTopContent {
	return &SessionTopContent{}
}

var SessionTopContent_To_DEFAULT *JID

func (p *SessionTopContent) GetTo() *JID {
	if !p.IsSetTo() {
		return SessionTopContent_To_DEFAULT
	}
	return p.To
}

func (p *SessionTopContent) GetSessionType() int8 {
	return p.SessionType
}

var SessionTopContent_Topindex_DEFAULT int64

func (p *SessionTopContent) GetTopindex() int64 {
	if !p.IsSetTopindex() {
		return SessionTopContent_Topindex_DEFAULT
	}
	return *p.Topindex
}
func (p *SessionTopContent) IsSetTo() bool {
	return p.To != nil
}

func (p *SessionTopContent) IsSetTopindex() bool {
	return p.Topindex != nil
}

func (p *SessionTopContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SessionTopContent) ReadField1(iprot thrift.TProtocol) error {
	p.To = &JID{}
	if err := p.To.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.To, err)
	}
	return nil
}

func (p *SessionTopContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = temp
	}
	return nil
}

func (p *SessionTopContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Topindex = &v
	}
	return nil
}

func (p *SessionTopContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SessionTopContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SessionTopContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:to: %s", p, err)
	}
	if err := p.To.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.To, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:to: %s", p, err)
	}
	return err
}

func (p *SessionTopContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.SessionType)); err != nil {
		return fmt.Errorf("%T.sessionType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionType: %s", p, err)
	}
	return err
}

func (p *SessionTopContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopindex() {
		if err := oprot.WriteFieldBegin("topindex", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:topindex: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Topindex)); err != nil {
			return fmt.Errorf("%T.topindex (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:topindex: %s", p, err)
		}
	}
	return err
}

func (p *SessionTopContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SessionTopContent(%+v)", *p)
}

type AtMessageReadedContent struct {
	To          *JID    `thrift:"to,1,required" json:"to"`
	SessionType int8    `thrift:"sessionType,2,required" json:"sessionType"`
	SeqList     []int64 `thrift:"seqList,3,required" json:"seqList"`
}

func NewAtMessageReadedContent() *AtMessageReadedContent {
	return &AtMessageReadedContent{}
}

var AtMessageReadedContent_To_DEFAULT *JID

func (p *AtMessageReadedContent) GetTo() *JID {
	if !p.IsSetTo() {
		return AtMessageReadedContent_To_DEFAULT
	}
	return p.To
}

func (p *AtMessageReadedContent) GetSessionType() int8 {
	return p.SessionType
}

func (p *AtMessageReadedContent) GetSeqList() []int64 {
	return p.SeqList
}
func (p *AtMessageReadedContent) IsSetTo() bool {
	return p.To != nil
}

func (p *AtMessageReadedContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AtMessageReadedContent) ReadField1(iprot thrift.TProtocol) error {
	p.To = &JID{}
	if err := p.To.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.To, err)
	}
	return nil
}

func (p *AtMessageReadedContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.SessionType = temp
	}
	return nil
}

func (p *AtMessageReadedContent) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.SeqList = tSlice
	for i := 0; i < size; i++ {
		var _elem9 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem9 = v
		}
		p.SeqList = append(p.SeqList, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AtMessageReadedContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtMessageReadedContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AtMessageReadedContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:to: %s", p, err)
	}
	if err := p.To.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.To, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:to: %s", p, err)
	}
	return err
}

func (p *AtMessageReadedContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionType", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.SessionType)); err != nil {
		return fmt.Errorf("%T.sessionType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionType: %s", p, err)
	}
	return err
}

func (p *AtMessageReadedContent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seqList", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:seqList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.SeqList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SeqList {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:seqList: %s", p, err)
	}
	return err
}

func (p *AtMessageReadedContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtMessageReadedContent(%+v)", *p)
}

type GroupScopeNotifyContent struct {
	Groupid      int32 `thrift:"groupid,1,required" json:"groupid"`
	DisplayScope int32 `thrift:"displayScope,2,required" json:"displayScope"`
}

func NewGroupScopeNotifyContent() *GroupScopeNotifyContent {
	return &GroupScopeNotifyContent{}
}

func (p *GroupScopeNotifyContent) GetGroupid() int32 {
	return p.Groupid
}

func (p *GroupScopeNotifyContent) GetDisplayScope() int32 {
	return p.DisplayScope
}
func (p *GroupScopeNotifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupScopeNotifyContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *GroupScopeNotifyContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DisplayScope = v
	}
	return nil
}

func (p *GroupScopeNotifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupScopeNotifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupScopeNotifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:groupid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:groupid: %s", p, err)
	}
	return err
}

func (p *GroupScopeNotifyContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayScope", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:displayScope: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DisplayScope)); err != nil {
		return fmt.Errorf("%T.displayScope (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:displayScope: %s", p, err)
	}
	return err
}

func (p *GroupScopeNotifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupScopeNotifyContent(%+v)", *p)
}

type ContactsRelationNotifyContent struct {
	Contacts  int32 `thrift:"contacts,1,required" json:"contacts"`
	Operation int32 `thrift:"operation,2,required" json:"operation"`
}

func NewContactsRelationNotifyContent() *ContactsRelationNotifyContent {
	return &ContactsRelationNotifyContent{}
}

func (p *ContactsRelationNotifyContent) GetContacts() int32 {
	return p.Contacts
}

func (p *ContactsRelationNotifyContent) GetOperation() int32 {
	return p.Operation
}
func (p *ContactsRelationNotifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactsRelationNotifyContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Contacts = v
	}
	return nil
}

func (p *ContactsRelationNotifyContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Operation = v
	}
	return nil
}

func (p *ContactsRelationNotifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactsRelationNotifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactsRelationNotifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:contacts: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Contacts)); err != nil {
		return fmt.Errorf("%T.contacts (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:contacts: %s", p, err)
	}
	return err
}

func (p *ContactsRelationNotifyContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operation", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:operation: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Operation)); err != nil {
		return fmt.Errorf("%T.operation (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:operation: %s", p, err)
	}
	return err
}

func (p *ContactsRelationNotifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactsRelationNotifyContent(%+v)", *p)
}

type MeetingAlertSettingNotifyContent struct {
	AlertTime int32 `thrift:"alertTime,1,required" json:"alertTime"`
}

func NewMeetingAlertSettingNotifyContent() *MeetingAlertSettingNotifyContent {
	return &MeetingAlertSettingNotifyContent{}
}

func (p *MeetingAlertSettingNotifyContent) GetAlertTime() int32 {
	return p.AlertTime
}
func (p *MeetingAlertSettingNotifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MeetingAlertSettingNotifyContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AlertTime = v
	}
	return nil
}

func (p *MeetingAlertSettingNotifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MeetingAlertSettingNotifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MeetingAlertSettingNotifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertTime", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:alertTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AlertTime)); err != nil {
		return fmt.Errorf("%T.alertTime (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:alertTime: %s", p, err)
	}
	return err
}

func (p *MeetingAlertSettingNotifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingAlertSettingNotifyContent(%+v)", *p)
}

type TripRemindPos struct {
	Lat  float64 `thrift:"lat,1,required" json:"lat"`
	Lng  float64 `thrift:"lng,2,required" json:"lng"`
	Desc string  `thrift:"desc,3,required" json:"desc"`
}

func NewTripRemindPos() *TripRemindPos {
	return &TripRemindPos{}
}

func (p *TripRemindPos) GetLat() float64 {
	return p.Lat
}

func (p *TripRemindPos) GetLng() float64 {
	return p.Lng
}

func (p *TripRemindPos) GetDesc() string {
	return p.Desc
}
func (p *TripRemindPos) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TripRemindPos) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Lat = v
	}
	return nil
}

func (p *TripRemindPos) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Lng = v
	}
	return nil
}

func (p *TripRemindPos) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Desc = v
	}
	return nil
}

func (p *TripRemindPos) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TripRemindPos"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TripRemindPos) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lat", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:lat: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Lat)); err != nil {
		return fmt.Errorf("%T.lat (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:lat: %s", p, err)
	}
	return err
}

func (p *TripRemindPos) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lng", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:lng: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Lng)); err != nil {
		return fmt.Errorf("%T.lng (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:lng: %s", p, err)
	}
	return err
}

func (p *TripRemindPos) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:desc: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Desc)); err != nil {
		return fmt.Errorf("%T.desc (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:desc: %s", p, err)
	}
	return err
}

func (p *TripRemindPos) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripRemindPos(%+v)", *p)
}

type TripRemindContent struct {
	TypeA1      int16          `thrift:"type,1,required" json:"type"`
	EventId     int64          `thrift:"eventId,2,required" json:"eventId"`
	Origin      *TripRemindPos `thrift:"origin,3" json:"origin"`
	Dest        *TripRemindPos `thrift:"dest,4" json:"dest"`
	EventName   *string        `thrift:"eventName,5" json:"eventName"`
	Duration    *int64         `thrift:"duration,6" json:"duration"`
	CurrentTime *int64         `thrift:"currentTime,7" json:"currentTime"`
	StartTime   *int64         `thrift:"startTime,8" json:"startTime"`
}

func NewTripRemindContent() *TripRemindContent {
	return &TripRemindContent{}
}

func (p *TripRemindContent) GetTypeA1() int16 {
	return p.TypeA1
}

func (p *TripRemindContent) GetEventId() int64 {
	return p.EventId
}

var TripRemindContent_Origin_DEFAULT *TripRemindPos

func (p *TripRemindContent) GetOrigin() *TripRemindPos {
	if !p.IsSetOrigin() {
		return TripRemindContent_Origin_DEFAULT
	}
	return p.Origin
}

var TripRemindContent_Dest_DEFAULT *TripRemindPos

func (p *TripRemindContent) GetDest() *TripRemindPos {
	if !p.IsSetDest() {
		return TripRemindContent_Dest_DEFAULT
	}
	return p.Dest
}

var TripRemindContent_EventName_DEFAULT string

func (p *TripRemindContent) GetEventName() string {
	if !p.IsSetEventName() {
		return TripRemindContent_EventName_DEFAULT
	}
	return *p.EventName
}

var TripRemindContent_Duration_DEFAULT int64

func (p *TripRemindContent) GetDuration() int64 {
	if !p.IsSetDuration() {
		return TripRemindContent_Duration_DEFAULT
	}
	return *p.Duration
}

var TripRemindContent_CurrentTime_DEFAULT int64

func (p *TripRemindContent) GetCurrentTime() int64 {
	if !p.IsSetCurrentTime() {
		return TripRemindContent_CurrentTime_DEFAULT
	}
	return *p.CurrentTime
}

var TripRemindContent_StartTime_DEFAULT int64

func (p *TripRemindContent) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return TripRemindContent_StartTime_DEFAULT
	}
	return *p.StartTime
}
func (p *TripRemindContent) IsSetOrigin() bool {
	return p.Origin != nil
}

func (p *TripRemindContent) IsSetDest() bool {
	return p.Dest != nil
}

func (p *TripRemindContent) IsSetEventName() bool {
	return p.EventName != nil
}

func (p *TripRemindContent) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *TripRemindContent) IsSetCurrentTime() bool {
	return p.CurrentTime != nil
}

func (p *TripRemindContent) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *TripRemindContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TripRemindContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *TripRemindContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EventId = v
	}
	return nil
}

func (p *TripRemindContent) ReadField3(iprot thrift.TProtocol) error {
	p.Origin = &TripRemindPos{}
	if err := p.Origin.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Origin, err)
	}
	return nil
}

func (p *TripRemindContent) ReadField4(iprot thrift.TProtocol) error {
	p.Dest = &TripRemindPos{}
	if err := p.Dest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Dest, err)
	}
	return nil
}

func (p *TripRemindContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EventName = &v
	}
	return nil
}

func (p *TripRemindContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *TripRemindContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.CurrentTime = &v
	}
	return nil
}

func (p *TripRemindContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *TripRemindContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TripRemindContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TripRemindContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I16, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *TripRemindContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:eventId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EventId)); err != nil {
		return fmt.Errorf("%T.eventId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:eventId: %s", p, err)
	}
	return err
}

func (p *TripRemindContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrigin() {
		if err := oprot.WriteFieldBegin("origin", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:origin: %s", p, err)
		}
		if err := p.Origin.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Origin, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:origin: %s", p, err)
		}
	}
	return err
}

func (p *TripRemindContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDest() {
		if err := oprot.WriteFieldBegin("dest", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:dest: %s", p, err)
		}
		if err := p.Dest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Dest, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:dest: %s", p, err)
		}
	}
	return err
}

func (p *TripRemindContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventName() {
		if err := oprot.WriteFieldBegin("eventName", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:eventName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.EventName)); err != nil {
			return fmt.Errorf("%T.eventName (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:eventName: %s", p, err)
		}
	}
	return err
}

func (p *TripRemindContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:duration: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Duration)); err != nil {
			return fmt.Errorf("%T.duration (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:duration: %s", p, err)
		}
	}
	return err
}

func (p *TripRemindContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentTime() {
		if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:currentTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CurrentTime)); err != nil {
			return fmt.Errorf("%T.currentTime (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:currentTime: %s", p, err)
		}
	}
	return err
}

func (p *TripRemindContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:startTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:startTime: %s", p, err)
		}
	}
	return err
}

func (p *TripRemindContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripRemindContent(%+v)", *p)
}

type APITextContent struct {
	Title         *string `thrift:"title,1" json:"title"`
	Content       string  `thrift:"content,2,required" json:"content"`
	DetailType    *int8   `thrift:"detailType,3" json:"detailType"`
	DetailContent *string `thrift:"detailContent,4" json:"detailContent"`
	DetailAuth    *int8   `thrift:"detailAuth,5" json:"detailAuth"`
}

func NewAPITextContent() *APITextContent {
	return &APITextContent{}
}

var APITextContent_Title_DEFAULT string

func (p *APITextContent) GetTitle() string {
	if !p.IsSetTitle() {
		return APITextContent_Title_DEFAULT
	}
	return *p.Title
}

func (p *APITextContent) GetContent() string {
	return p.Content
}

var APITextContent_DetailType_DEFAULT int8

func (p *APITextContent) GetDetailType() int8 {
	if !p.IsSetDetailType() {
		return APITextContent_DetailType_DEFAULT
	}
	return *p.DetailType
}

var APITextContent_DetailContent_DEFAULT string

func (p *APITextContent) GetDetailContent() string {
	if !p.IsSetDetailContent() {
		return APITextContent_DetailContent_DEFAULT
	}
	return *p.DetailContent
}

var APITextContent_DetailAuth_DEFAULT int8

func (p *APITextContent) GetDetailAuth() int8 {
	if !p.IsSetDetailAuth() {
		return APITextContent_DetailAuth_DEFAULT
	}
	return *p.DetailAuth
}
func (p *APITextContent) IsSetTitle() bool {
	return p.Title != nil
}

func (p *APITextContent) IsSetDetailType() bool {
	return p.DetailType != nil
}

func (p *APITextContent) IsSetDetailContent() bool {
	return p.DetailContent != nil
}

func (p *APITextContent) IsSetDetailAuth() bool {
	return p.DetailAuth != nil
}

func (p *APITextContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APITextContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *APITextContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *APITextContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.DetailType = &temp
	}
	return nil
}

func (p *APITextContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DetailContent = &v
	}
	return nil
}

func (p *APITextContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := int8(v)
		p.DetailAuth = &temp
	}
	return nil
}

func (p *APITextContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APITextContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APITextContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return fmt.Errorf("%T.title (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:title: %s", p, err)
		}
	}
	return err
}

func (p *APITextContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:content: %s", p, err)
	}
	return err
}

func (p *APITextContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailType() {
		if err := oprot.WriteFieldBegin("detailType", thrift.BYTE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:detailType: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.DetailType)); err != nil {
			return fmt.Errorf("%T.detailType (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:detailType: %s", p, err)
		}
	}
	return err
}

func (p *APITextContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailContent() {
		if err := oprot.WriteFieldBegin("detailContent", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:detailContent: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DetailContent)); err != nil {
			return fmt.Errorf("%T.detailContent (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:detailContent: %s", p, err)
		}
	}
	return err
}

func (p *APITextContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailAuth() {
		if err := oprot.WriteFieldBegin("detailAuth", thrift.BYTE, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:detailAuth: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.DetailAuth)); err != nil {
			return fmt.Errorf("%T.detailAuth (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:detailAuth: %s", p, err)
		}
	}
	return err
}

func (p *APITextContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APITextContent(%+v)", *p)
}

type APIImageContent struct {
	MediaId    string  `thrift:"mediaId,1,required" json:"mediaId"`
	DetailType int8    `thrift:"detailType,2,required" json:"detailType"`
	MediaThumb *string `thrift:"mediaThumb,3" json:"mediaThumb"`
}

func NewAPIImageContent() *APIImageContent {
	return &APIImageContent{}
}

func (p *APIImageContent) GetMediaId() string {
	return p.MediaId
}

func (p *APIImageContent) GetDetailType() int8 {
	return p.DetailType
}

var APIImageContent_MediaThumb_DEFAULT string

func (p *APIImageContent) GetMediaThumb() string {
	if !p.IsSetMediaThumb() {
		return APIImageContent_MediaThumb_DEFAULT
	}
	return *p.MediaThumb
}
func (p *APIImageContent) IsSetMediaThumb() bool {
	return p.MediaThumb != nil
}

func (p *APIImageContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIImageContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MediaId = v
	}
	return nil
}

func (p *APIImageContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.DetailType = temp
	}
	return nil
}

func (p *APIImageContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MediaThumb = &v
	}
	return nil
}

func (p *APIImageContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIImageContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIImageContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mediaId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MediaId)); err != nil {
		return fmt.Errorf("%T.mediaId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mediaId: %s", p, err)
	}
	return err
}

func (p *APIImageContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detailType", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:detailType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DetailType)); err != nil {
		return fmt.Errorf("%T.detailType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:detailType: %s", p, err)
	}
	return err
}

func (p *APIImageContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaThumb() {
		if err := oprot.WriteFieldBegin("mediaThumb", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:mediaThumb: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MediaThumb)); err != nil {
			return fmt.Errorf("%T.mediaThumb (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:mediaThumb: %s", p, err)
		}
	}
	return err
}

func (p *APIImageContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIImageContent(%+v)", *p)
}

type APIFileContent struct {
	MediaId    string `thrift:"mediaId,1,required" json:"mediaId"`
	DetailType int8   `thrift:"detailType,2,required" json:"detailType"`
	FileSize   *int64 `thrift:"fileSize,3" json:"fileSize"`
	FileName   string `thrift:"fileName,4,required" json:"fileName"`
}

func NewAPIFileContent() *APIFileContent {
	return &APIFileContent{}
}

func (p *APIFileContent) GetMediaId() string {
	return p.MediaId
}

func (p *APIFileContent) GetDetailType() int8 {
	return p.DetailType
}

var APIFileContent_FileSize_DEFAULT int64

func (p *APIFileContent) GetFileSize() int64 {
	if !p.IsSetFileSize() {
		return APIFileContent_FileSize_DEFAULT
	}
	return *p.FileSize
}

func (p *APIFileContent) GetFileName() string {
	return p.FileName
}
func (p *APIFileContent) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *APIFileContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIFileContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MediaId = v
	}
	return nil
}

func (p *APIFileContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.DetailType = temp
	}
	return nil
}

func (p *APIFileContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FileSize = &v
	}
	return nil
}

func (p *APIFileContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *APIFileContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIFileContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIFileContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mediaId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MediaId)); err != nil {
		return fmt.Errorf("%T.mediaId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mediaId: %s", p, err)
	}
	return err
}

func (p *APIFileContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detailType", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:detailType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DetailType)); err != nil {
		return fmt.Errorf("%T.detailType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:detailType: %s", p, err)
	}
	return err
}

func (p *APIFileContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:fileSize: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.FileSize)); err != nil {
			return fmt.Errorf("%T.fileSize (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:fileSize: %s", p, err)
		}
	}
	return err
}

func (p *APIFileContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:fileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.fileName (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:fileName: %s", p, err)
	}
	return err
}

func (p *APIFileContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIFileContent(%+v)", *p)
}

type APIOAContent struct {
	Title          string  `thrift:"title,1,required" json:"title"`
	Status         *int16  `thrift:"status,2" json:"status"`
	Color          *string `thrift:"color,3" json:"color"`
	BkColor        *string `thrift:"bkColor,4" json:"bkColor"`
	Elements       string  `thrift:"elements,5,required" json:"elements"`
	DetailURL      *string `thrift:"detailURL,6" json:"detailURL"`
	DetailAuth     *int8   `thrift:"detailAuth,7" json:"detailAuth"`
	TitleElements  *string `thrift:"titleElements,8" json:"titleElements"`
	TitleStyle     *string `thrift:"titleStyle,9" json:"titleStyle"`
	ExData         *string `thrift:"exData,10" json:"exData"`
	CustomizedType *string `thrift:"customizedType,11" json:"customizedType"`
	CustomizedData *string `thrift:"customizedData,12" json:"customizedData"`
}

func NewAPIOAContent() *APIOAContent {
	return &APIOAContent{}
}

func (p *APIOAContent) GetTitle() string {
	return p.Title
}

var APIOAContent_Status_DEFAULT int16

func (p *APIOAContent) GetStatus() int16 {
	if !p.IsSetStatus() {
		return APIOAContent_Status_DEFAULT
	}
	return *p.Status
}

var APIOAContent_Color_DEFAULT string

func (p *APIOAContent) GetColor() string {
	if !p.IsSetColor() {
		return APIOAContent_Color_DEFAULT
	}
	return *p.Color
}

var APIOAContent_BkColor_DEFAULT string

func (p *APIOAContent) GetBkColor() string {
	if !p.IsSetBkColor() {
		return APIOAContent_BkColor_DEFAULT
	}
	return *p.BkColor
}

func (p *APIOAContent) GetElements() string {
	return p.Elements
}

var APIOAContent_DetailURL_DEFAULT string

func (p *APIOAContent) GetDetailURL() string {
	if !p.IsSetDetailURL() {
		return APIOAContent_DetailURL_DEFAULT
	}
	return *p.DetailURL
}

var APIOAContent_DetailAuth_DEFAULT int8

func (p *APIOAContent) GetDetailAuth() int8 {
	if !p.IsSetDetailAuth() {
		return APIOAContent_DetailAuth_DEFAULT
	}
	return *p.DetailAuth
}

var APIOAContent_TitleElements_DEFAULT string

func (p *APIOAContent) GetTitleElements() string {
	if !p.IsSetTitleElements() {
		return APIOAContent_TitleElements_DEFAULT
	}
	return *p.TitleElements
}

var APIOAContent_TitleStyle_DEFAULT string

func (p *APIOAContent) GetTitleStyle() string {
	if !p.IsSetTitleStyle() {
		return APIOAContent_TitleStyle_DEFAULT
	}
	return *p.TitleStyle
}

var APIOAContent_ExData_DEFAULT string

func (p *APIOAContent) GetExData() string {
	if !p.IsSetExData() {
		return APIOAContent_ExData_DEFAULT
	}
	return *p.ExData
}

var APIOAContent_CustomizedType_DEFAULT string

func (p *APIOAContent) GetCustomizedType() string {
	if !p.IsSetCustomizedType() {
		return APIOAContent_CustomizedType_DEFAULT
	}
	return *p.CustomizedType
}

var APIOAContent_CustomizedData_DEFAULT string

func (p *APIOAContent) GetCustomizedData() string {
	if !p.IsSetCustomizedData() {
		return APIOAContent_CustomizedData_DEFAULT
	}
	return *p.CustomizedData
}
func (p *APIOAContent) IsSetStatus() bool {
	return p.Status != nil
}

func (p *APIOAContent) IsSetColor() bool {
	return p.Color != nil
}

func (p *APIOAContent) IsSetBkColor() bool {
	return p.BkColor != nil
}

func (p *APIOAContent) IsSetDetailURL() bool {
	return p.DetailURL != nil
}

func (p *APIOAContent) IsSetDetailAuth() bool {
	return p.DetailAuth != nil
}

func (p *APIOAContent) IsSetTitleElements() bool {
	return p.TitleElements != nil
}

func (p *APIOAContent) IsSetTitleStyle() bool {
	return p.TitleStyle != nil
}

func (p *APIOAContent) IsSetExData() bool {
	return p.ExData != nil
}

func (p *APIOAContent) IsSetCustomizedType() bool {
	return p.CustomizedType != nil
}

func (p *APIOAContent) IsSetCustomizedData() bool {
	return p.CustomizedData != nil
}

func (p *APIOAContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIOAContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *APIOAContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *APIOAContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Color = &v
	}
	return nil
}

func (p *APIOAContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BkColor = &v
	}
	return nil
}

func (p *APIOAContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Elements = v
	}
	return nil
}

func (p *APIOAContent) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DetailURL = &v
	}
	return nil
}

func (p *APIOAContent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.DetailAuth = &temp
	}
	return nil
}

func (p *APIOAContent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.TitleElements = &v
	}
	return nil
}

func (p *APIOAContent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.TitleStyle = &v
	}
	return nil
}

func (p *APIOAContent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ExData = &v
	}
	return nil
}

func (p *APIOAContent) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CustomizedType = &v
	}
	return nil
}

func (p *APIOAContent) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.CustomizedData = &v
	}
	return nil
}

func (p *APIOAContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIOAContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIOAContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:title: %s", p, err)
	}
	return err
}

func (p *APIOAContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I16, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:status: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.Status)); err != nil {
			return fmt.Errorf("%T.status (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:status: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColor() {
		if err := oprot.WriteFieldBegin("color", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:color: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Color)); err != nil {
			return fmt.Errorf("%T.color (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:color: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBkColor() {
		if err := oprot.WriteFieldBegin("bkColor", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:bkColor: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.BkColor)); err != nil {
			return fmt.Errorf("%T.bkColor (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:bkColor: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("elements", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:elements: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Elements)); err != nil {
		return fmt.Errorf("%T.elements (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:elements: %s", p, err)
	}
	return err
}

func (p *APIOAContent) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailURL() {
		if err := oprot.WriteFieldBegin("detailURL", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:detailURL: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DetailURL)); err != nil {
			return fmt.Errorf("%T.detailURL (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:detailURL: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailAuth() {
		if err := oprot.WriteFieldBegin("detailAuth", thrift.BYTE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:detailAuth: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.DetailAuth)); err != nil {
			return fmt.Errorf("%T.detailAuth (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:detailAuth: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitleElements() {
		if err := oprot.WriteFieldBegin("titleElements", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:titleElements: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TitleElements)); err != nil {
			return fmt.Errorf("%T.titleElements (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:titleElements: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitleStyle() {
		if err := oprot.WriteFieldBegin("titleStyle", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:titleStyle: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TitleStyle)); err != nil {
			return fmt.Errorf("%T.titleStyle (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:titleStyle: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExData() {
		if err := oprot.WriteFieldBegin("exData", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:exData: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ExData)); err != nil {
			return fmt.Errorf("%T.exData (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:exData: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomizedType() {
		if err := oprot.WriteFieldBegin("customizedType", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:customizedType: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.CustomizedType)); err != nil {
			return fmt.Errorf("%T.customizedType (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:customizedType: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomizedData() {
		if err := oprot.WriteFieldBegin("customizedData", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:customizedData: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.CustomizedData)); err != nil {
			return fmt.Errorf("%T.customizedData (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:customizedData: %s", p, err)
		}
	}
	return err
}

func (p *APIOAContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIOAContent(%+v)", *p)
}

type APICustomizedContent struct {
	Data1       string  `thrift:"data1,1,required" json:"data1"`
	Data2       *string `thrift:"data2,2" json:"data2"`
	Data3       *string `thrift:"data3,3" json:"data3"`
	Data4       *string `thrift:"data4,4" json:"data4"`
	WebPushData *string `thrift:"webPushData,5" json:"webPushData"`
}

func NewAPICustomizedContent() *APICustomizedContent {
	return &APICustomizedContent{}
}

func (p *APICustomizedContent) GetData1() string {
	return p.Data1
}

var APICustomizedContent_Data2_DEFAULT string

func (p *APICustomizedContent) GetData2() string {
	if !p.IsSetData2() {
		return APICustomizedContent_Data2_DEFAULT
	}
	return *p.Data2
}

var APICustomizedContent_Data3_DEFAULT string

func (p *APICustomizedContent) GetData3() string {
	if !p.IsSetData3() {
		return APICustomizedContent_Data3_DEFAULT
	}
	return *p.Data3
}

var APICustomizedContent_Data4_DEFAULT string

func (p *APICustomizedContent) GetData4() string {
	if !p.IsSetData4() {
		return APICustomizedContent_Data4_DEFAULT
	}
	return *p.Data4
}

var APICustomizedContent_WebPushData_DEFAULT string

func (p *APICustomizedContent) GetWebPushData() string {
	if !p.IsSetWebPushData() {
		return APICustomizedContent_WebPushData_DEFAULT
	}
	return *p.WebPushData
}
func (p *APICustomizedContent) IsSetData2() bool {
	return p.Data2 != nil
}

func (p *APICustomizedContent) IsSetData3() bool {
	return p.Data3 != nil
}

func (p *APICustomizedContent) IsSetData4() bool {
	return p.Data4 != nil
}

func (p *APICustomizedContent) IsSetWebPushData() bool {
	return p.WebPushData != nil
}

func (p *APICustomizedContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APICustomizedContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Data1 = v
	}
	return nil
}

func (p *APICustomizedContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Data2 = &v
	}
	return nil
}

func (p *APICustomizedContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Data3 = &v
	}
	return nil
}

func (p *APICustomizedContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Data4 = &v
	}
	return nil
}

func (p *APICustomizedContent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.WebPushData = &v
	}
	return nil
}

func (p *APICustomizedContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APICustomizedContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APICustomizedContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:data1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Data1)); err != nil {
		return fmt.Errorf("%T.data1 (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:data1: %s", p, err)
	}
	return err
}

func (p *APICustomizedContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetData2() {
		if err := oprot.WriteFieldBegin("data2", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:data2: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Data2)); err != nil {
			return fmt.Errorf("%T.data2 (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:data2: %s", p, err)
		}
	}
	return err
}

func (p *APICustomizedContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData3() {
		if err := oprot.WriteFieldBegin("data3", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:data3: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Data3)); err != nil {
			return fmt.Errorf("%T.data3 (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:data3: %s", p, err)
		}
	}
	return err
}

func (p *APICustomizedContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetData4() {
		if err := oprot.WriteFieldBegin("data4", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:data4: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Data4)); err != nil {
			return fmt.Errorf("%T.data4 (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:data4: %s", p, err)
		}
	}
	return err
}

func (p *APICustomizedContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWebPushData() {
		if err := oprot.WriteFieldBegin("webPushData", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:webPushData: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.WebPushData)); err != nil {
			return fmt.Errorf("%T.webPushData (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:webPushData: %s", p, err)
		}
	}
	return err
}

func (p *APICustomizedContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APICustomizedContent(%+v)", *p)
}

type APIAckSentContent struct {
	Id           int32  `thrift:"id,1,required" json:"id"`
	Seq          int64  `thrift:"seq,2,required" json:"seq"`
	Conversation *int32 `thrift:"conversation,3" json:"conversation"`
	Result_      int8   `thrift:"result,4,required" json:"result"`
}

func NewAPIAckSentContent() *APIAckSentContent {
	return &APIAckSentContent{}
}

func (p *APIAckSentContent) GetId() int32 {
	return p.Id
}

func (p *APIAckSentContent) GetSeq() int64 {
	return p.Seq
}

var APIAckSentContent_Conversation_DEFAULT int32

func (p *APIAckSentContent) GetConversation() int32 {
	if !p.IsSetConversation() {
		return APIAckSentContent_Conversation_DEFAULT
	}
	return *p.Conversation
}

func (p *APIAckSentContent) GetResult_() int8 {
	return p.Result_
}
func (p *APIAckSentContent) IsSetConversation() bool {
	return p.Conversation != nil
}

func (p *APIAckSentContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIAckSentContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *APIAckSentContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *APIAckSentContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Conversation = &v
	}
	return nil
}

func (p *APIAckSentContent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.Result_ = temp
	}
	return nil
}

func (p *APIAckSentContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIAckSentContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIAckSentContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *APIAckSentContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *APIAckSentContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConversation() {
		if err := oprot.WriteFieldBegin("conversation", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:conversation: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Conversation)); err != nil {
			return fmt.Errorf("%T.conversation (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:conversation: %s", p, err)
		}
	}
	return err
}

func (p *APIAckSentContent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:result: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Result_)); err != nil {
		return fmt.Errorf("%T.result (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:result: %s", p, err)
	}
	return err
}

func (p *APIAckSentContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIAckSentContent(%+v)", *p)
}

type APIOAStatusChangeContent struct {
	Seq          int64   `thrift:"seq,1,required" json:"seq"`
	NewStatus_   int16   `thrift:"newStatus,2,required" json:"newStatus"`
	ExternalData *string `thrift:"externalData,3" json:"externalData"`
}

func NewAPIOAStatusChangeContent() *APIOAStatusChangeContent {
	return &APIOAStatusChangeContent{}
}

func (p *APIOAStatusChangeContent) GetSeq() int64 {
	return p.Seq
}

func (p *APIOAStatusChangeContent) GetNewStatus_() int16 {
	return p.NewStatus_
}

var APIOAStatusChangeContent_ExternalData_DEFAULT string

func (p *APIOAStatusChangeContent) GetExternalData() string {
	if !p.IsSetExternalData() {
		return APIOAStatusChangeContent_ExternalData_DEFAULT
	}
	return *p.ExternalData
}
func (p *APIOAStatusChangeContent) IsSetExternalData() bool {
	return p.ExternalData != nil
}

func (p *APIOAStatusChangeContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIOAStatusChangeContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *APIOAStatusChangeContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.NewStatus_ = v
	}
	return nil
}

func (p *APIOAStatusChangeContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExternalData = &v
	}
	return nil
}

func (p *APIOAStatusChangeContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIOAStatusChangeContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIOAStatusChangeContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *APIOAStatusChangeContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newStatus", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:newStatus: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.NewStatus_)); err != nil {
		return fmt.Errorf("%T.newStatus (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:newStatus: %s", p, err)
	}
	return err
}

func (p *APIOAStatusChangeContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalData() {
		if err := oprot.WriteFieldBegin("externalData", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:externalData: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ExternalData)); err != nil {
			return fmt.Errorf("%T.externalData (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:externalData: %s", p, err)
		}
	}
	return err
}

func (p *APIOAStatusChangeContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIOAStatusChangeContent(%+v)", *p)
}

type APIAppEventChangeNotify struct {
	AppId        int64  `thrift:"appId,1,required" json:"appId"`
	EventCount   int32  `thrift:"eventCount,2,required" json:"eventCount"`
	ExternalData string `thrift:"externalData,3,required" json:"externalData"`
}

func NewAPIAppEventChangeNotify() *APIAppEventChangeNotify {
	return &APIAppEventChangeNotify{}
}

func (p *APIAppEventChangeNotify) GetAppId() int64 {
	return p.AppId
}

func (p *APIAppEventChangeNotify) GetEventCount() int32 {
	return p.EventCount
}

func (p *APIAppEventChangeNotify) GetExternalData() string {
	return p.ExternalData
}
func (p *APIAppEventChangeNotify) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIAppEventChangeNotify) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *APIAppEventChangeNotify) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EventCount = v
	}
	return nil
}

func (p *APIAppEventChangeNotify) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExternalData = v
	}
	return nil
}

func (p *APIAppEventChangeNotify) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIAppEventChangeNotify"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIAppEventChangeNotify) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:appId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.AppId)); err != nil {
		return fmt.Errorf("%T.appId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:appId: %s", p, err)
	}
	return err
}

func (p *APIAppEventChangeNotify) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventCount", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:eventCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.EventCount)); err != nil {
		return fmt.Errorf("%T.eventCount (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:eventCount: %s", p, err)
	}
	return err
}

func (p *APIAppEventChangeNotify) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("externalData", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:externalData: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ExternalData)); err != nil {
		return fmt.Errorf("%T.externalData (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:externalData: %s", p, err)
	}
	return err
}

func (p *APIAppEventChangeNotify) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIAppEventChangeNotify(%+v)", *p)
}

type APIAppChangeNotifyContent struct {
	Event        int16   `thrift:"event,1,required" json:"event"`
	AppId        int64   `thrift:"appId,2,required" json:"appId"`
	ExternalData *string `thrift:"externalData,3" json:"externalData"`
}

func NewAPIAppChangeNotifyContent() *APIAppChangeNotifyContent {
	return &APIAppChangeNotifyContent{}
}

func (p *APIAppChangeNotifyContent) GetEvent() int16 {
	return p.Event
}

func (p *APIAppChangeNotifyContent) GetAppId() int64 {
	return p.AppId
}

var APIAppChangeNotifyContent_ExternalData_DEFAULT string

func (p *APIAppChangeNotifyContent) GetExternalData() string {
	if !p.IsSetExternalData() {
		return APIAppChangeNotifyContent_ExternalData_DEFAULT
	}
	return *p.ExternalData
}
func (p *APIAppChangeNotifyContent) IsSetExternalData() bool {
	return p.ExternalData != nil
}

func (p *APIAppChangeNotifyContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIAppChangeNotifyContent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Event = v
	}
	return nil
}

func (p *APIAppChangeNotifyContent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *APIAppChangeNotifyContent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExternalData = &v
	}
	return nil
}

func (p *APIAppChangeNotifyContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIAppChangeNotifyContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIAppChangeNotifyContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("event", thrift.I16, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:event: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Event)); err != nil {
		return fmt.Errorf("%T.event (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:event: %s", p, err)
	}
	return err
}

func (p *APIAppChangeNotifyContent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:appId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.AppId)); err != nil {
		return fmt.Errorf("%T.appId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:appId: %s", p, err)
	}
	return err
}

func (p *APIAppChangeNotifyContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalData() {
		if err := oprot.WriteFieldBegin("externalData", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:externalData: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ExternalData)); err != nil {
			return fmt.Errorf("%T.externalData (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:externalData: %s", p, err)
		}
	}
	return err
}

func (p *APIAppChangeNotifyContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIAppChangeNotifyContent(%+v)", *p)
}

type UcMessageHead struct {
	Version      int16 `thrift:"version,1,required" json:"version"`
	Appid        int16 `thrift:"appid,2,required" json:"appid"`
	Pri          int8  `thrift:"pri,3,required" json:"pri"`
	Protocoltype int8  `thrift:"protocoltype,4,required" json:"protocoltype"`
	Protocolid   int16 `thrift:"protocolid,5,required" json:"protocolid"`
	Id           int32 `thrift:"id,6,required" json:"id"`
	Seq          int64 `thrift:"seq,7,required" json:"seq"`
	Timestamp    int64 `thrift:"timestamp,8,required" json:"timestamp"`
	// unused field # 9
	From         *JID   `thrift:"from,10,required" json:"from"`
	To           *JID   `thrift:"to,11,required" json:"to"`
	Conversation int32  `thrift:"conversation,12,required" json:"conversation"`
	Length       int32  `thrift:"length,13,required" json:"length"`
	ToPrivate    *JID   `thrift:"toPrivate,14" json:"toPrivate"`
	ControlPri   int8   `thrift:"controlPri,15" json:"controlPri"`
	ChannelPri   *int16 `thrift:"channelPri,16" json:"channelPri"`
	GroupAtUsers []*JID `thrift:"groupAtUsers,17" json:"groupAtUsers"`
}

func NewUcMessageHead() *UcMessageHead {
	return &UcMessageHead{
		Version: 256,

		ControlPri: 15,
	}
}

func (p *UcMessageHead) GetVersion() int16 {
	return p.Version
}

func (p *UcMessageHead) GetAppid() int16 {
	return p.Appid
}

func (p *UcMessageHead) GetPri() int8 {
	return p.Pri
}

func (p *UcMessageHead) GetProtocoltype() int8 {
	return p.Protocoltype
}

func (p *UcMessageHead) GetProtocolid() int16 {
	return p.Protocolid
}

func (p *UcMessageHead) GetId() int32 {
	return p.Id
}

func (p *UcMessageHead) GetSeq() int64 {
	return p.Seq
}

func (p *UcMessageHead) GetTimestamp() int64 {
	return p.Timestamp
}

var UcMessageHead_From_DEFAULT *JID

func (p *UcMessageHead) GetFrom() *JID {
	if !p.IsSetFrom() {
		return UcMessageHead_From_DEFAULT
	}
	return p.From
}

var UcMessageHead_To_DEFAULT *JID

func (p *UcMessageHead) GetTo() *JID {
	if !p.IsSetTo() {
		return UcMessageHead_To_DEFAULT
	}
	return p.To
}

func (p *UcMessageHead) GetConversation() int32 {
	return p.Conversation
}

func (p *UcMessageHead) GetLength() int32 {
	return p.Length
}

var UcMessageHead_ToPrivate_DEFAULT *JID

func (p *UcMessageHead) GetToPrivate() *JID {
	if !p.IsSetToPrivate() {
		return UcMessageHead_ToPrivate_DEFAULT
	}
	return p.ToPrivate
}

var UcMessageHead_ControlPri_DEFAULT int8 = 15

func (p *UcMessageHead) GetControlPri() int8 {
	return p.ControlPri
}

var UcMessageHead_ChannelPri_DEFAULT int16

func (p *UcMessageHead) GetChannelPri() int16 {
	if !p.IsSetChannelPri() {
		return UcMessageHead_ChannelPri_DEFAULT
	}
	return *p.ChannelPri
}

var UcMessageHead_GroupAtUsers_DEFAULT []*JID

func (p *UcMessageHead) GetGroupAtUsers() []*JID {
	return p.GroupAtUsers
}
func (p *UcMessageHead) IsSetFrom() bool {
	return p.From != nil
}

func (p *UcMessageHead) IsSetTo() bool {
	return p.To != nil
}

func (p *UcMessageHead) IsSetToPrivate() bool {
	return p.ToPrivate != nil
}

func (p *UcMessageHead) IsSetControlPri() bool {
	return p.ControlPri != UcMessageHead_ControlPri_DEFAULT
}

func (p *UcMessageHead) IsSetChannelPri() bool {
	return p.ChannelPri != nil
}

func (p *UcMessageHead) IsSetGroupAtUsers() bool {
	return p.GroupAtUsers != nil
}

func (p *UcMessageHead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *UcMessageHead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *UcMessageHead) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Pri = temp
	}
	return nil
}

func (p *UcMessageHead) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.Protocoltype = temp
	}
	return nil
}

func (p *UcMessageHead) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Protocolid = v
	}
	return nil
}

func (p *UcMessageHead) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *UcMessageHead) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *UcMessageHead) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *UcMessageHead) ReadField10(iprot thrift.TProtocol) error {
	p.From = &JID{}
	if err := p.From.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.From, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField11(iprot thrift.TProtocol) error {
	p.To = &JID{}
	if err := p.To.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.To, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Conversation = v
	}
	return nil
}

func (p *UcMessageHead) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *UcMessageHead) ReadField14(iprot thrift.TProtocol) error {
	p.ToPrivate = &JID{}
	if err := p.ToPrivate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ToPrivate, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		temp := int8(v)
		p.ControlPri = temp
	}
	return nil
}

func (p *UcMessageHead) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.ChannelPri = &v
	}
	return nil
}

func (p *UcMessageHead) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*JID, 0, size)
	p.GroupAtUsers = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &JID{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.GroupAtUsers = append(p.GroupAtUsers, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *UcMessageHead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UcMessageHead"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UcMessageHead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I16, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:appid: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Appid)); err != nil {
		return fmt.Errorf("%T.appid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:appid: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pri", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:pri: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Pri)); err != nil {
		return fmt.Errorf("%T.pri (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:pri: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocoltype", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:protocoltype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Protocoltype)); err != nil {
		return fmt.Errorf("%T.protocoltype (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:protocoltype: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocolid", thrift.I16, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:protocolid: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Protocolid)); err != nil {
		return fmt.Errorf("%T.protocolid (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:protocolid: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:id: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:seq: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:timestamp: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRUCT, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:from: %s", p, err)
	}
	if err := p.From.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.From, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:from: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRUCT, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:to: %s", p, err)
	}
	if err := p.To.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.To, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:to: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conversation", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:conversation: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Conversation)); err != nil {
		return fmt.Errorf("%T.conversation (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:conversation: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I32, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:length: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Length)); err != nil {
		return fmt.Errorf("%T.length (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:length: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetToPrivate() {
		if err := oprot.WriteFieldBegin("toPrivate", thrift.STRUCT, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:toPrivate: %s", p, err)
		}
		if err := p.ToPrivate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ToPrivate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:toPrivate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageHead) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetControlPri() {
		if err := oprot.WriteFieldBegin("controlPri", thrift.BYTE, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:controlPri: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.ControlPri)); err != nil {
			return fmt.Errorf("%T.controlPri (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:controlPri: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageHead) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetChannelPri() {
		if err := oprot.WriteFieldBegin("channelPri", thrift.I16, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:channelPri: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.ChannelPri)); err != nil {
			return fmt.Errorf("%T.channelPri (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:channelPri: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageHead) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupAtUsers() {
		if err := oprot.WriteFieldBegin("groupAtUsers", thrift.LIST, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:groupAtUsers: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GroupAtUsers)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.GroupAtUsers {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:groupAtUsers: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UcMessageHead(%+v)", *p)
}

type UcMessageBody struct {
	// unused fields # 1 to 14
	Presence *MessagePresence `thrift:"presence,15" json:"presence"`
	Ping     *MessagePing     `thrift:"ping,16" json:"ping"`
	// unused fields # 17 to 19
	AckSent       *AckSent       `thrift:"ackSent,20" json:"ackSent"`
	AckReceived   *AckReceived   `thrift:"ackReceived,21" json:"ackReceived"`
	AckRead       *AckRead       `thrift:"ackRead,22" json:"ackRead"`
	Sleep         *SleepSet      `thrift:"sleep,23" json:"sleep"`
	WakeupConfirm *WakeupResult_ `thrift:"wakeupConfirm,24" json:"wakeupConfirm"`
	AckPlay       *AckPlay       `thrift:"ackPlay,25" json:"ackPlay"`
	BatchAckRead  *BatchAckRead  `thrift:"batchAckRead,26" json:"batchAckRead"`
	// unused fields # 27 to 49
	Text              *TextContent               `thrift:"text,50" json:"text"`
	Media             *MediaContent              `thrift:"media,51" json:"media"`
	GroupAdd          *GroupMemberAddContent     `thrift:"groupAdd,52" json:"groupAdd"`
	GroupDel          *GroupMemberDelContent     `thrift:"groupDel,53" json:"groupDel"`
	GroupUpdate       *GroupNameUpdateContent    `thrift:"groupUpdate,54" json:"groupUpdate"`
	GroupCreate       *GroupCreateContent        `thrift:"groupCreate,55" json:"groupCreate"`
	GroupTop          *GroupTopContent           `thrift:"groupTop,56" json:"groupTop"`
	SummaryCreate     *SummaryCreateContent      `thrift:"summaryCreate,57" json:"summaryCreate"`
	DocSend           *DocumentContent           `thrift:"docSend,58" json:"docSend"`
	AlertRule         *AlertRuleContent          `thrift:"alertRule,59" json:"alertRule"`
	GroupClose        *DiscussionClose           `thrift:"groupClose,60" json:"groupClose"`
	MsgNotify         *MsgNotifyContent          `thrift:"msgNotify,61" json:"msgNotify"`
	GroupKick         *GroupMemberKickContent    `thrift:"groupKick,62" json:"groupKick"`
	CodeCreate        *CodeCreateContent         `thrift:"codeCreate,63" json:"codeCreate"`
	CodeDel           *CodeDelContent            `thrift:"codeDel,64" json:"codeDel"`
	DocDel            *DocumentDelContent        `thrift:"docDel,65" json:"docDel"`
	CommentCreate     *CommentCreateContent      `thrift:"commentCreate,66" json:"commentCreate"`
	CommentDel        *CommentDelContent         `thrift:"commentDel,67" json:"commentDel"`
	GroupAvatarUpdate *GroupAvatarUpdateContent  `thrift:"groupAvatarUpdate,68" json:"groupAvatarUpdate"`
	GroupState        *GroupStateUpdateContent   `thrift:"groupState,69" json:"groupState"`
	CloudFile         *CloudFileContent          `thrift:"cloudFile,70" json:"cloudFile"`
	MemberRole        *MemberRoleUpdateContent   `thrift:"memberRole,71" json:"memberRole"`
	Report            *ReportContent             `thrift:"report,72" json:"report"`
	Revocation        *RevocationContent         `thrift:"revocation,73" json:"revocation"`
	GroupScope        *GroupScopeContent         `thrift:"groupScope,74" json:"groupScope"`
	OwnerTransfer     *GroupOwnerTransferContent `thrift:"ownerTransfer,75" json:"ownerTransfer"`
	Emoji             *EmojiContent              `thrift:"emoji,76" json:"emoji"`
	// unused fields # 77 to 99
	Welcome          *SystemWelcomeContent    `thrift:"welcome,100" json:"welcome"`
	ClientUpdate     *ClientUpdateContent     `thrift:"clientUpdate,101" json:"clientUpdate"`
	CompleteInfo     *CompleteInfoContent     `thrift:"completeInfo,102" json:"completeInfo"`
	PwdComplexUpdate *PwdComplexUpdateContent `thrift:"pwdComplexUpdate,103" json:"pwdComplexUpdate"`
	PwdExpire        *PwdExpireContent        `thrift:"pwdExpire,104" json:"pwdExpire"`
	PcGuide          *PCClientGuide           `thrift:"pcGuide,105" json:"pcGuide"`
	MobileGuide      *MobileClientGuide       `thrift:"mobileGuide,106" json:"mobileGuide"`
	PwdModify        *PasswordModifyContent   `thrift:"pwdModify,107" json:"pwdModify"`
	TagDel           *TagDelContent           `thrift:"tagDel,108" json:"tagDel"`
	Remind           *GroupRemindContent      `thrift:"remind,109" json:"remind"`
	// unused fields # 110 to 149
	DeptUpdate        *DeptUpdateContent           `thrift:"deptUpdate,150" json:"deptUpdate"`
	DeptTransfer      *DeptTransferContent         `thrift:"deptTransfer,151" json:"deptTransfer"`
	PositionUpdate    *PositionUpdateContent       `thrift:"positionUpdate,152" json:"positionUpdate"`
	EmployeeEntry     *EmployeeEntryContent        `thrift:"employeeEntry,153" json:"employeeEntry"`
	EmployeeLeave     *EmployeeLeaveContent        `thrift:"employeeLeave,154" json:"employeeLeave"`
	EmployeeRights    *EmployeeRightsChangeContent `thrift:"employeeRights,155" json:"employeeRights"`
	DeprtParentChange *DeptParentChangeContent     `thrift:"deprtParentChange,156" json:"deprtParentChange"`
	CompanyJoin       *CompanyJoinContent          `thrift:"companyJoin,157" json:"companyJoin"`
	DeptDelete        *DeptDeleteContent           `thrift:"deptDelete,158" json:"deptDelete"`
	EntryConfirm      *EmployeeEntryConfirmContent `thrift:"entryConfirm,159" json:"entryConfirm"`
	LeaveConfirm      *EmployeeLeaveConfirmContent `thrift:"leaveConfirm,160" json:"leaveConfirm"`
	DeptConfirm       *DeptTransferConfirmContent  `thrift:"deptConfirm,161" json:"deptConfirm"`
	// unused fields # 162 to 199
	InstantInvite *InstantIQInviteContent `thrift:"instantInvite,200" json:"instantInvite"`
	ConfInvite    *IQInviteContent        `thrift:"confInvite,201" json:"confInvite"`
	ConfReceive   *IQReceiveContent       `thrift:"confReceive,202" json:"confReceive"`
	ConfReject    *IQRejectContent        `thrift:"confReject,203" json:"confReject"`
	ConfCancel    *ConfCancelContent      `thrift:"confCancel,204" json:"confCancel"`
	ConfAlert     *ConfAlertContent       `thrift:"confAlert,205" json:"confAlert"`
	// unused field # 206
	InstantReceive *InstantIQReceiveContent `thrift:"instantReceive,207" json:"instantReceive"`
	InstantReject  *InstantIQRejectContent  `thrift:"instantReject,208" json:"instantReject"`
	ConfChat       *ConfChatContent         `thrift:"confChat,209" json:"confChat"`
	ConfSummary    *ConfSummaryContent      `thrift:"confSummary,210" json:"confSummary"`
	CallState      *CallStateContent        `thrift:"callState,211" json:"callState"`
	ConfUpload     *ConfUploadContent       `thrift:"confUpload,212" json:"confUpload"`
	ConfDocDel     *ConfDelDocContent       `thrift:"confDocDel,213" json:"confDocDel"`
	// unused fields # 214 to 249
	CardUpdate      *CardUpdateContent      `thrift:"cardUpdate,250" json:"cardUpdate"`
	ContacterAdd    *ContacterAddContent    `thrift:"contacterAdd,251" json:"contacterAdd"`
	ContacterDel    *ContacterDelContent    `thrift:"contacterDel,252" json:"contacterDel"`
	AttentionCreate *AttentionCreateContent `thrift:"attentionCreate,253" json:"attentionCreate"`
	AttentionCancel *AttentionCancelContent `thrift:"attentionCancel,254" json:"attentionCancel"`
	// unused fields # 255 to 299
	TransInvite  *FileTransmissionInviteContent  `thrift:"transInvite,300" json:"transInvite"`
	TransReceive *FileTransmissionReceiveContent `thrift:"transReceive,301" json:"transReceive"`
	TransReject  *FileTransmissionRejectContent  `thrift:"transReject,302" json:"transReject"`
	TransStop    *FileTransmissionStopContent    `thrift:"transStop,303" json:"transStop"`
	// unused fields # 304 to 349
	AudioInvite  *AudioInviteContent     `thrift:"audioInvite,350" json:"audioInvite"`
	AudioReceive *AudioReceiveContent    `thrift:"audioReceive,351" json:"audioReceive"`
	AudioReject  *AudioRejectContent     `thrift:"audioReject,352" json:"audioReject"`
	AudioStop    *AudioStopContent       `thrift:"audioStop,353" json:"audioStop"`
	CallRecent   *AudioRecentCallContent `thrift:"callRecent,354" json:"callRecent"`
	CallBlock    *AudioBlockCallContent  `thrift:"callBlock,355" json:"callBlock"`
	CallReject   *AudioRejectCallContent `thrift:"callReject,356" json:"callReject"`
	CallCancel   *AudioCancelCallContent `thrift:"callCancel,357" json:"callCancel"`
	// unused fields # 358 to 399
	ConfShare *ConfShareContent `thrift:"confShare,400" json:"confShare"`
	// unused fields # 401 to 449
	WbContent *WBMessageContent `thrift:"wbContent,450" json:"wbContent"`
	// unused fields # 451 to 600
	RemoteAssistanceInvite *RemoteAssistanceInviteContent `thrift:"remoteAssistanceInvite,601" json:"remoteAssistanceInvite"`
	RemoteAssistanceAccept *RemoteAssistanceAcceptContent `thrift:"remoteAssistanceAccept,602" json:"remoteAssistanceAccept"`
	RemoteAssistanceReject *RemoteAssistanceRejectContent `thrift:"remoteAssistanceReject,603" json:"remoteAssistanceReject"`
	RemoteAssistanceEnd    *RemoteAssistanceEndContent    `thrift:"remoteAssistanceEnd,604" json:"remoteAssistanceEnd"`
	RemoteAssistanceCancel *RemoteAssistanceCancelContent `thrift:"remoteAssistanceCancel,605" json:"remoteAssistanceCancel"`
	// unused fields # 606 to 799
	SessionTop             *SessionTopContent                `thrift:"sessionTop,800" json:"sessionTop"`
	AtMessageReaded        *AtMessageReadedContent           `thrift:"atMessageReaded,801" json:"atMessageReaded"`
	LoginNotify            *UserLoginNotifyContent           `thrift:"loginNotify,802" json:"loginNotify"`
	GroupScopeNotify       *GroupScopeNotifyContent          `thrift:"groupScopeNotify,803" json:"groupScopeNotify"`
	ContactsRelationNotify *ContactsRelationNotifyContent    `thrift:"contactsRelationNotify,804" json:"contactsRelationNotify"`
	MeetingAlertNotify     *MeetingAlertSettingNotifyContent `thrift:"meetingAlertNotify,805" json:"meetingAlertNotify"`
	TripRemindNotify       *TripRemindContent                `thrift:"tripRemindNotify,806" json:"tripRemindNotify"`
	// unused fields # 807 to 9999
	ApiText           *APITextContent            `thrift:"apiText,10000" json:"apiText"`
	ApiImage          *APIImageContent           `thrift:"apiImage,10001" json:"apiImage"`
	ApiFile           *APIFileContent            `thrift:"apiFile,10002" json:"apiFile"`
	ApiAckSent        *APIAckSentContent         `thrift:"apiAckSent,10003" json:"apiAckSent"`
	ApiOA             *APIOAContent              `thrift:"apiOA,10004" json:"apiOA"`
	ApiOAStatusChange *APIOAStatusChangeContent  `thrift:"apiOAStatusChange,10005" json:"apiOAStatusChange"`
	ApiChangeNotify   *APIAppChangeNotifyContent `thrift:"apiChangeNotify,10006" json:"apiChangeNotify"`
	ApiEventNotify    *APIAppEventChangeNotify   `thrift:"apiEventNotify,10007" json:"apiEventNotify"`
	ApiCustomized     *APICustomizedContent      `thrift:"apiCustomized,10008" json:"apiCustomized"`
}

func NewUcMessageBody() *UcMessageBody {
	return &UcMessageBody{}
}

var UcMessageBody_Presence_DEFAULT *MessagePresence

func (p *UcMessageBody) GetPresence() *MessagePresence {
	if !p.IsSetPresence() {
		return UcMessageBody_Presence_DEFAULT
	}
	return p.Presence
}

var UcMessageBody_Ping_DEFAULT *MessagePing

func (p *UcMessageBody) GetPing() *MessagePing {
	if !p.IsSetPing() {
		return UcMessageBody_Ping_DEFAULT
	}
	return p.Ping
}

var UcMessageBody_AckSent_DEFAULT *AckSent

func (p *UcMessageBody) GetAckSent() *AckSent {
	if !p.IsSetAckSent() {
		return UcMessageBody_AckSent_DEFAULT
	}
	return p.AckSent
}

var UcMessageBody_AckReceived_DEFAULT *AckReceived

func (p *UcMessageBody) GetAckReceived() *AckReceived {
	if !p.IsSetAckReceived() {
		return UcMessageBody_AckReceived_DEFAULT
	}
	return p.AckReceived
}

var UcMessageBody_AckRead_DEFAULT *AckRead

func (p *UcMessageBody) GetAckRead() *AckRead {
	if !p.IsSetAckRead() {
		return UcMessageBody_AckRead_DEFAULT
	}
	return p.AckRead
}

var UcMessageBody_Sleep_DEFAULT *SleepSet

func (p *UcMessageBody) GetSleep() *SleepSet {
	if !p.IsSetSleep() {
		return UcMessageBody_Sleep_DEFAULT
	}
	return p.Sleep
}

var UcMessageBody_WakeupConfirm_DEFAULT *WakeupResult_

func (p *UcMessageBody) GetWakeupConfirm() *WakeupResult_ {
	if !p.IsSetWakeupConfirm() {
		return UcMessageBody_WakeupConfirm_DEFAULT
	}
	return p.WakeupConfirm
}

var UcMessageBody_AckPlay_DEFAULT *AckPlay

func (p *UcMessageBody) GetAckPlay() *AckPlay {
	if !p.IsSetAckPlay() {
		return UcMessageBody_AckPlay_DEFAULT
	}
	return p.AckPlay
}

var UcMessageBody_BatchAckRead_DEFAULT *BatchAckRead

func (p *UcMessageBody) GetBatchAckRead() *BatchAckRead {
	if !p.IsSetBatchAckRead() {
		return UcMessageBody_BatchAckRead_DEFAULT
	}
	return p.BatchAckRead
}

var UcMessageBody_Text_DEFAULT *TextContent

func (p *UcMessageBody) GetText() *TextContent {
	if !p.IsSetText() {
		return UcMessageBody_Text_DEFAULT
	}
	return p.Text
}

var UcMessageBody_Media_DEFAULT *MediaContent

func (p *UcMessageBody) GetMedia() *MediaContent {
	if !p.IsSetMedia() {
		return UcMessageBody_Media_DEFAULT
	}
	return p.Media
}

var UcMessageBody_GroupAdd_DEFAULT *GroupMemberAddContent

func (p *UcMessageBody) GetGroupAdd() *GroupMemberAddContent {
	if !p.IsSetGroupAdd() {
		return UcMessageBody_GroupAdd_DEFAULT
	}
	return p.GroupAdd
}

var UcMessageBody_GroupDel_DEFAULT *GroupMemberDelContent

func (p *UcMessageBody) GetGroupDel() *GroupMemberDelContent {
	if !p.IsSetGroupDel() {
		return UcMessageBody_GroupDel_DEFAULT
	}
	return p.GroupDel
}

var UcMessageBody_GroupUpdate_DEFAULT *GroupNameUpdateContent

func (p *UcMessageBody) GetGroupUpdate() *GroupNameUpdateContent {
	if !p.IsSetGroupUpdate() {
		return UcMessageBody_GroupUpdate_DEFAULT
	}
	return p.GroupUpdate
}

var UcMessageBody_GroupCreate_DEFAULT *GroupCreateContent

func (p *UcMessageBody) GetGroupCreate() *GroupCreateContent {
	if !p.IsSetGroupCreate() {
		return UcMessageBody_GroupCreate_DEFAULT
	}
	return p.GroupCreate
}

var UcMessageBody_GroupTop_DEFAULT *GroupTopContent

func (p *UcMessageBody) GetGroupTop() *GroupTopContent {
	if !p.IsSetGroupTop() {
		return UcMessageBody_GroupTop_DEFAULT
	}
	return p.GroupTop
}

var UcMessageBody_SummaryCreate_DEFAULT *SummaryCreateContent

func (p *UcMessageBody) GetSummaryCreate() *SummaryCreateContent {
	if !p.IsSetSummaryCreate() {
		return UcMessageBody_SummaryCreate_DEFAULT
	}
	return p.SummaryCreate
}

var UcMessageBody_DocSend_DEFAULT *DocumentContent

func (p *UcMessageBody) GetDocSend() *DocumentContent {
	if !p.IsSetDocSend() {
		return UcMessageBody_DocSend_DEFAULT
	}
	return p.DocSend
}

var UcMessageBody_AlertRule_DEFAULT *AlertRuleContent

func (p *UcMessageBody) GetAlertRule() *AlertRuleContent {
	if !p.IsSetAlertRule() {
		return UcMessageBody_AlertRule_DEFAULT
	}
	return p.AlertRule
}

var UcMessageBody_GroupClose_DEFAULT *DiscussionClose

func (p *UcMessageBody) GetGroupClose() *DiscussionClose {
	if !p.IsSetGroupClose() {
		return UcMessageBody_GroupClose_DEFAULT
	}
	return p.GroupClose
}

var UcMessageBody_MsgNotify_DEFAULT *MsgNotifyContent

func (p *UcMessageBody) GetMsgNotify() *MsgNotifyContent {
	if !p.IsSetMsgNotify() {
		return UcMessageBody_MsgNotify_DEFAULT
	}
	return p.MsgNotify
}

var UcMessageBody_GroupKick_DEFAULT *GroupMemberKickContent

func (p *UcMessageBody) GetGroupKick() *GroupMemberKickContent {
	if !p.IsSetGroupKick() {
		return UcMessageBody_GroupKick_DEFAULT
	}
	return p.GroupKick
}

var UcMessageBody_CodeCreate_DEFAULT *CodeCreateContent

func (p *UcMessageBody) GetCodeCreate() *CodeCreateContent {
	if !p.IsSetCodeCreate() {
		return UcMessageBody_CodeCreate_DEFAULT
	}
	return p.CodeCreate
}

var UcMessageBody_CodeDel_DEFAULT *CodeDelContent

func (p *UcMessageBody) GetCodeDel() *CodeDelContent {
	if !p.IsSetCodeDel() {
		return UcMessageBody_CodeDel_DEFAULT
	}
	return p.CodeDel
}

var UcMessageBody_DocDel_DEFAULT *DocumentDelContent

func (p *UcMessageBody) GetDocDel() *DocumentDelContent {
	if !p.IsSetDocDel() {
		return UcMessageBody_DocDel_DEFAULT
	}
	return p.DocDel
}

var UcMessageBody_CommentCreate_DEFAULT *CommentCreateContent

func (p *UcMessageBody) GetCommentCreate() *CommentCreateContent {
	if !p.IsSetCommentCreate() {
		return UcMessageBody_CommentCreate_DEFAULT
	}
	return p.CommentCreate
}

var UcMessageBody_CommentDel_DEFAULT *CommentDelContent

func (p *UcMessageBody) GetCommentDel() *CommentDelContent {
	if !p.IsSetCommentDel() {
		return UcMessageBody_CommentDel_DEFAULT
	}
	return p.CommentDel
}

var UcMessageBody_GroupAvatarUpdate_DEFAULT *GroupAvatarUpdateContent

func (p *UcMessageBody) GetGroupAvatarUpdate() *GroupAvatarUpdateContent {
	if !p.IsSetGroupAvatarUpdate() {
		return UcMessageBody_GroupAvatarUpdate_DEFAULT
	}
	return p.GroupAvatarUpdate
}

var UcMessageBody_GroupState_DEFAULT *GroupStateUpdateContent

func (p *UcMessageBody) GetGroupState() *GroupStateUpdateContent {
	if !p.IsSetGroupState() {
		return UcMessageBody_GroupState_DEFAULT
	}
	return p.GroupState
}

var UcMessageBody_CloudFile_DEFAULT *CloudFileContent

func (p *UcMessageBody) GetCloudFile() *CloudFileContent {
	if !p.IsSetCloudFile() {
		return UcMessageBody_CloudFile_DEFAULT
	}
	return p.CloudFile
}

var UcMessageBody_MemberRole_DEFAULT *MemberRoleUpdateContent

func (p *UcMessageBody) GetMemberRole() *MemberRoleUpdateContent {
	if !p.IsSetMemberRole() {
		return UcMessageBody_MemberRole_DEFAULT
	}
	return p.MemberRole
}

var UcMessageBody_Report_DEFAULT *ReportContent

func (p *UcMessageBody) GetReport() *ReportContent {
	if !p.IsSetReport() {
		return UcMessageBody_Report_DEFAULT
	}
	return p.Report
}

var UcMessageBody_Revocation_DEFAULT *RevocationContent

func (p *UcMessageBody) GetRevocation() *RevocationContent {
	if !p.IsSetRevocation() {
		return UcMessageBody_Revocation_DEFAULT
	}
	return p.Revocation
}

var UcMessageBody_GroupScope_DEFAULT *GroupScopeContent

func (p *UcMessageBody) GetGroupScope() *GroupScopeContent {
	if !p.IsSetGroupScope() {
		return UcMessageBody_GroupScope_DEFAULT
	}
	return p.GroupScope
}

var UcMessageBody_OwnerTransfer_DEFAULT *GroupOwnerTransferContent

func (p *UcMessageBody) GetOwnerTransfer() *GroupOwnerTransferContent {
	if !p.IsSetOwnerTransfer() {
		return UcMessageBody_OwnerTransfer_DEFAULT
	}
	return p.OwnerTransfer
}

var UcMessageBody_Emoji_DEFAULT *EmojiContent

func (p *UcMessageBody) GetEmoji() *EmojiContent {
	if !p.IsSetEmoji() {
		return UcMessageBody_Emoji_DEFAULT
	}
	return p.Emoji
}

var UcMessageBody_Welcome_DEFAULT *SystemWelcomeContent

func (p *UcMessageBody) GetWelcome() *SystemWelcomeContent {
	if !p.IsSetWelcome() {
		return UcMessageBody_Welcome_DEFAULT
	}
	return p.Welcome
}

var UcMessageBody_ClientUpdate_DEFAULT *ClientUpdateContent

func (p *UcMessageBody) GetClientUpdate() *ClientUpdateContent {
	if !p.IsSetClientUpdate() {
		return UcMessageBody_ClientUpdate_DEFAULT
	}
	return p.ClientUpdate
}

var UcMessageBody_CompleteInfo_DEFAULT *CompleteInfoContent

func (p *UcMessageBody) GetCompleteInfo() *CompleteInfoContent {
	if !p.IsSetCompleteInfo() {
		return UcMessageBody_CompleteInfo_DEFAULT
	}
	return p.CompleteInfo
}

var UcMessageBody_PwdComplexUpdate_DEFAULT *PwdComplexUpdateContent

func (p *UcMessageBody) GetPwdComplexUpdate() *PwdComplexUpdateContent {
	if !p.IsSetPwdComplexUpdate() {
		return UcMessageBody_PwdComplexUpdate_DEFAULT
	}
	return p.PwdComplexUpdate
}

var UcMessageBody_PwdExpire_DEFAULT *PwdExpireContent

func (p *UcMessageBody) GetPwdExpire() *PwdExpireContent {
	if !p.IsSetPwdExpire() {
		return UcMessageBody_PwdExpire_DEFAULT
	}
	return p.PwdExpire
}

var UcMessageBody_PcGuide_DEFAULT *PCClientGuide

func (p *UcMessageBody) GetPcGuide() *PCClientGuide {
	if !p.IsSetPcGuide() {
		return UcMessageBody_PcGuide_DEFAULT
	}
	return p.PcGuide
}

var UcMessageBody_MobileGuide_DEFAULT *MobileClientGuide

func (p *UcMessageBody) GetMobileGuide() *MobileClientGuide {
	if !p.IsSetMobileGuide() {
		return UcMessageBody_MobileGuide_DEFAULT
	}
	return p.MobileGuide
}

var UcMessageBody_PwdModify_DEFAULT *PasswordModifyContent

func (p *UcMessageBody) GetPwdModify() *PasswordModifyContent {
	if !p.IsSetPwdModify() {
		return UcMessageBody_PwdModify_DEFAULT
	}
	return p.PwdModify
}

var UcMessageBody_TagDel_DEFAULT *TagDelContent

func (p *UcMessageBody) GetTagDel() *TagDelContent {
	if !p.IsSetTagDel() {
		return UcMessageBody_TagDel_DEFAULT
	}
	return p.TagDel
}

var UcMessageBody_Remind_DEFAULT *GroupRemindContent

func (p *UcMessageBody) GetRemind() *GroupRemindContent {
	if !p.IsSetRemind() {
		return UcMessageBody_Remind_DEFAULT
	}
	return p.Remind
}

var UcMessageBody_DeptUpdate_DEFAULT *DeptUpdateContent

func (p *UcMessageBody) GetDeptUpdate() *DeptUpdateContent {
	if !p.IsSetDeptUpdate() {
		return UcMessageBody_DeptUpdate_DEFAULT
	}
	return p.DeptUpdate
}

var UcMessageBody_DeptTransfer_DEFAULT *DeptTransferContent

func (p *UcMessageBody) GetDeptTransfer() *DeptTransferContent {
	if !p.IsSetDeptTransfer() {
		return UcMessageBody_DeptTransfer_DEFAULT
	}
	return p.DeptTransfer
}

var UcMessageBody_PositionUpdate_DEFAULT *PositionUpdateContent

func (p *UcMessageBody) GetPositionUpdate() *PositionUpdateContent {
	if !p.IsSetPositionUpdate() {
		return UcMessageBody_PositionUpdate_DEFAULT
	}
	return p.PositionUpdate
}

var UcMessageBody_EmployeeEntry_DEFAULT *EmployeeEntryContent

func (p *UcMessageBody) GetEmployeeEntry() *EmployeeEntryContent {
	if !p.IsSetEmployeeEntry() {
		return UcMessageBody_EmployeeEntry_DEFAULT
	}
	return p.EmployeeEntry
}

var UcMessageBody_EmployeeLeave_DEFAULT *EmployeeLeaveContent

func (p *UcMessageBody) GetEmployeeLeave() *EmployeeLeaveContent {
	if !p.IsSetEmployeeLeave() {
		return UcMessageBody_EmployeeLeave_DEFAULT
	}
	return p.EmployeeLeave
}

var UcMessageBody_EmployeeRights_DEFAULT *EmployeeRightsChangeContent

func (p *UcMessageBody) GetEmployeeRights() *EmployeeRightsChangeContent {
	if !p.IsSetEmployeeRights() {
		return UcMessageBody_EmployeeRights_DEFAULT
	}
	return p.EmployeeRights
}

var UcMessageBody_DeprtParentChange_DEFAULT *DeptParentChangeContent

func (p *UcMessageBody) GetDeprtParentChange() *DeptParentChangeContent {
	if !p.IsSetDeprtParentChange() {
		return UcMessageBody_DeprtParentChange_DEFAULT
	}
	return p.DeprtParentChange
}

var UcMessageBody_CompanyJoin_DEFAULT *CompanyJoinContent

func (p *UcMessageBody) GetCompanyJoin() *CompanyJoinContent {
	if !p.IsSetCompanyJoin() {
		return UcMessageBody_CompanyJoin_DEFAULT
	}
	return p.CompanyJoin
}

var UcMessageBody_DeptDelete_DEFAULT *DeptDeleteContent

func (p *UcMessageBody) GetDeptDelete() *DeptDeleteContent {
	if !p.IsSetDeptDelete() {
		return UcMessageBody_DeptDelete_DEFAULT
	}
	return p.DeptDelete
}

var UcMessageBody_EntryConfirm_DEFAULT *EmployeeEntryConfirmContent

func (p *UcMessageBody) GetEntryConfirm() *EmployeeEntryConfirmContent {
	if !p.IsSetEntryConfirm() {
		return UcMessageBody_EntryConfirm_DEFAULT
	}
	return p.EntryConfirm
}

var UcMessageBody_LeaveConfirm_DEFAULT *EmployeeLeaveConfirmContent

func (p *UcMessageBody) GetLeaveConfirm() *EmployeeLeaveConfirmContent {
	if !p.IsSetLeaveConfirm() {
		return UcMessageBody_LeaveConfirm_DEFAULT
	}
	return p.LeaveConfirm
}

var UcMessageBody_DeptConfirm_DEFAULT *DeptTransferConfirmContent

func (p *UcMessageBody) GetDeptConfirm() *DeptTransferConfirmContent {
	if !p.IsSetDeptConfirm() {
		return UcMessageBody_DeptConfirm_DEFAULT
	}
	return p.DeptConfirm
}

var UcMessageBody_InstantInvite_DEFAULT *InstantIQInviteContent

func (p *UcMessageBody) GetInstantInvite() *InstantIQInviteContent {
	if !p.IsSetInstantInvite() {
		return UcMessageBody_InstantInvite_DEFAULT
	}
	return p.InstantInvite
}

var UcMessageBody_ConfInvite_DEFAULT *IQInviteContent

func (p *UcMessageBody) GetConfInvite() *IQInviteContent {
	if !p.IsSetConfInvite() {
		return UcMessageBody_ConfInvite_DEFAULT
	}
	return p.ConfInvite
}

var UcMessageBody_ConfReceive_DEFAULT *IQReceiveContent

func (p *UcMessageBody) GetConfReceive() *IQReceiveContent {
	if !p.IsSetConfReceive() {
		return UcMessageBody_ConfReceive_DEFAULT
	}
	return p.ConfReceive
}

var UcMessageBody_ConfReject_DEFAULT *IQRejectContent

func (p *UcMessageBody) GetConfReject() *IQRejectContent {
	if !p.IsSetConfReject() {
		return UcMessageBody_ConfReject_DEFAULT
	}
	return p.ConfReject
}

var UcMessageBody_ConfCancel_DEFAULT *ConfCancelContent

func (p *UcMessageBody) GetConfCancel() *ConfCancelContent {
	if !p.IsSetConfCancel() {
		return UcMessageBody_ConfCancel_DEFAULT
	}
	return p.ConfCancel
}

var UcMessageBody_ConfAlert_DEFAULT *ConfAlertContent

func (p *UcMessageBody) GetConfAlert() *ConfAlertContent {
	if !p.IsSetConfAlert() {
		return UcMessageBody_ConfAlert_DEFAULT
	}
	return p.ConfAlert
}

var UcMessageBody_InstantReceive_DEFAULT *InstantIQReceiveContent

func (p *UcMessageBody) GetInstantReceive() *InstantIQReceiveContent {
	if !p.IsSetInstantReceive() {
		return UcMessageBody_InstantReceive_DEFAULT
	}
	return p.InstantReceive
}

var UcMessageBody_InstantReject_DEFAULT *InstantIQRejectContent

func (p *UcMessageBody) GetInstantReject() *InstantIQRejectContent {
	if !p.IsSetInstantReject() {
		return UcMessageBody_InstantReject_DEFAULT
	}
	return p.InstantReject
}

var UcMessageBody_ConfChat_DEFAULT *ConfChatContent

func (p *UcMessageBody) GetConfChat() *ConfChatContent {
	if !p.IsSetConfChat() {
		return UcMessageBody_ConfChat_DEFAULT
	}
	return p.ConfChat
}

var UcMessageBody_ConfSummary_DEFAULT *ConfSummaryContent

func (p *UcMessageBody) GetConfSummary() *ConfSummaryContent {
	if !p.IsSetConfSummary() {
		return UcMessageBody_ConfSummary_DEFAULT
	}
	return p.ConfSummary
}

var UcMessageBody_CallState_DEFAULT *CallStateContent

func (p *UcMessageBody) GetCallState() *CallStateContent {
	if !p.IsSetCallState() {
		return UcMessageBody_CallState_DEFAULT
	}
	return p.CallState
}

var UcMessageBody_ConfUpload_DEFAULT *ConfUploadContent

func (p *UcMessageBody) GetConfUpload() *ConfUploadContent {
	if !p.IsSetConfUpload() {
		return UcMessageBody_ConfUpload_DEFAULT
	}
	return p.ConfUpload
}

var UcMessageBody_ConfDocDel_DEFAULT *ConfDelDocContent

func (p *UcMessageBody) GetConfDocDel() *ConfDelDocContent {
	if !p.IsSetConfDocDel() {
		return UcMessageBody_ConfDocDel_DEFAULT
	}
	return p.ConfDocDel
}

var UcMessageBody_CardUpdate_DEFAULT *CardUpdateContent

func (p *UcMessageBody) GetCardUpdate() *CardUpdateContent {
	if !p.IsSetCardUpdate() {
		return UcMessageBody_CardUpdate_DEFAULT
	}
	return p.CardUpdate
}

var UcMessageBody_ContacterAdd_DEFAULT *ContacterAddContent

func (p *UcMessageBody) GetContacterAdd() *ContacterAddContent {
	if !p.IsSetContacterAdd() {
		return UcMessageBody_ContacterAdd_DEFAULT
	}
	return p.ContacterAdd
}

var UcMessageBody_ContacterDel_DEFAULT *ContacterDelContent

func (p *UcMessageBody) GetContacterDel() *ContacterDelContent {
	if !p.IsSetContacterDel() {
		return UcMessageBody_ContacterDel_DEFAULT
	}
	return p.ContacterDel
}

var UcMessageBody_AttentionCreate_DEFAULT *AttentionCreateContent

func (p *UcMessageBody) GetAttentionCreate() *AttentionCreateContent {
	if !p.IsSetAttentionCreate() {
		return UcMessageBody_AttentionCreate_DEFAULT
	}
	return p.AttentionCreate
}

var UcMessageBody_AttentionCancel_DEFAULT *AttentionCancelContent

func (p *UcMessageBody) GetAttentionCancel() *AttentionCancelContent {
	if !p.IsSetAttentionCancel() {
		return UcMessageBody_AttentionCancel_DEFAULT
	}
	return p.AttentionCancel
}

var UcMessageBody_TransInvite_DEFAULT *FileTransmissionInviteContent

func (p *UcMessageBody) GetTransInvite() *FileTransmissionInviteContent {
	if !p.IsSetTransInvite() {
		return UcMessageBody_TransInvite_DEFAULT
	}
	return p.TransInvite
}

var UcMessageBody_TransReceive_DEFAULT *FileTransmissionReceiveContent

func (p *UcMessageBody) GetTransReceive() *FileTransmissionReceiveContent {
	if !p.IsSetTransReceive() {
		return UcMessageBody_TransReceive_DEFAULT
	}
	return p.TransReceive
}

var UcMessageBody_TransReject_DEFAULT *FileTransmissionRejectContent

func (p *UcMessageBody) GetTransReject() *FileTransmissionRejectContent {
	if !p.IsSetTransReject() {
		return UcMessageBody_TransReject_DEFAULT
	}
	return p.TransReject
}

var UcMessageBody_TransStop_DEFAULT *FileTransmissionStopContent

func (p *UcMessageBody) GetTransStop() *FileTransmissionStopContent {
	if !p.IsSetTransStop() {
		return UcMessageBody_TransStop_DEFAULT
	}
	return p.TransStop
}

var UcMessageBody_AudioInvite_DEFAULT *AudioInviteContent

func (p *UcMessageBody) GetAudioInvite() *AudioInviteContent {
	if !p.IsSetAudioInvite() {
		return UcMessageBody_AudioInvite_DEFAULT
	}
	return p.AudioInvite
}

var UcMessageBody_AudioReceive_DEFAULT *AudioReceiveContent

func (p *UcMessageBody) GetAudioReceive() *AudioReceiveContent {
	if !p.IsSetAudioReceive() {
		return UcMessageBody_AudioReceive_DEFAULT
	}
	return p.AudioReceive
}

var UcMessageBody_AudioReject_DEFAULT *AudioRejectContent

func (p *UcMessageBody) GetAudioReject() *AudioRejectContent {
	if !p.IsSetAudioReject() {
		return UcMessageBody_AudioReject_DEFAULT
	}
	return p.AudioReject
}

var UcMessageBody_AudioStop_DEFAULT *AudioStopContent

func (p *UcMessageBody) GetAudioStop() *AudioStopContent {
	if !p.IsSetAudioStop() {
		return UcMessageBody_AudioStop_DEFAULT
	}
	return p.AudioStop
}

var UcMessageBody_CallRecent_DEFAULT *AudioRecentCallContent

func (p *UcMessageBody) GetCallRecent() *AudioRecentCallContent {
	if !p.IsSetCallRecent() {
		return UcMessageBody_CallRecent_DEFAULT
	}
	return p.CallRecent
}

var UcMessageBody_CallBlock_DEFAULT *AudioBlockCallContent

func (p *UcMessageBody) GetCallBlock() *AudioBlockCallContent {
	if !p.IsSetCallBlock() {
		return UcMessageBody_CallBlock_DEFAULT
	}
	return p.CallBlock
}

var UcMessageBody_CallReject_DEFAULT *AudioRejectCallContent

func (p *UcMessageBody) GetCallReject() *AudioRejectCallContent {
	if !p.IsSetCallReject() {
		return UcMessageBody_CallReject_DEFAULT
	}
	return p.CallReject
}

var UcMessageBody_CallCancel_DEFAULT *AudioCancelCallContent

func (p *UcMessageBody) GetCallCancel() *AudioCancelCallContent {
	if !p.IsSetCallCancel() {
		return UcMessageBody_CallCancel_DEFAULT
	}
	return p.CallCancel
}

var UcMessageBody_ConfShare_DEFAULT *ConfShareContent

func (p *UcMessageBody) GetConfShare() *ConfShareContent {
	if !p.IsSetConfShare() {
		return UcMessageBody_ConfShare_DEFAULT
	}
	return p.ConfShare
}

var UcMessageBody_WbContent_DEFAULT *WBMessageContent

func (p *UcMessageBody) GetWbContent() *WBMessageContent {
	if !p.IsSetWbContent() {
		return UcMessageBody_WbContent_DEFAULT
	}
	return p.WbContent
}

var UcMessageBody_RemoteAssistanceInvite_DEFAULT *RemoteAssistanceInviteContent

func (p *UcMessageBody) GetRemoteAssistanceInvite() *RemoteAssistanceInviteContent {
	if !p.IsSetRemoteAssistanceInvite() {
		return UcMessageBody_RemoteAssistanceInvite_DEFAULT
	}
	return p.RemoteAssistanceInvite
}

var UcMessageBody_RemoteAssistanceAccept_DEFAULT *RemoteAssistanceAcceptContent

func (p *UcMessageBody) GetRemoteAssistanceAccept() *RemoteAssistanceAcceptContent {
	if !p.IsSetRemoteAssistanceAccept() {
		return UcMessageBody_RemoteAssistanceAccept_DEFAULT
	}
	return p.RemoteAssistanceAccept
}

var UcMessageBody_RemoteAssistanceReject_DEFAULT *RemoteAssistanceRejectContent

func (p *UcMessageBody) GetRemoteAssistanceReject() *RemoteAssistanceRejectContent {
	if !p.IsSetRemoteAssistanceReject() {
		return UcMessageBody_RemoteAssistanceReject_DEFAULT
	}
	return p.RemoteAssistanceReject
}

var UcMessageBody_RemoteAssistanceEnd_DEFAULT *RemoteAssistanceEndContent

func (p *UcMessageBody) GetRemoteAssistanceEnd() *RemoteAssistanceEndContent {
	if !p.IsSetRemoteAssistanceEnd() {
		return UcMessageBody_RemoteAssistanceEnd_DEFAULT
	}
	return p.RemoteAssistanceEnd
}

var UcMessageBody_RemoteAssistanceCancel_DEFAULT *RemoteAssistanceCancelContent

func (p *UcMessageBody) GetRemoteAssistanceCancel() *RemoteAssistanceCancelContent {
	if !p.IsSetRemoteAssistanceCancel() {
		return UcMessageBody_RemoteAssistanceCancel_DEFAULT
	}
	return p.RemoteAssistanceCancel
}

var UcMessageBody_SessionTop_DEFAULT *SessionTopContent

func (p *UcMessageBody) GetSessionTop() *SessionTopContent {
	if !p.IsSetSessionTop() {
		return UcMessageBody_SessionTop_DEFAULT
	}
	return p.SessionTop
}

var UcMessageBody_AtMessageReaded_DEFAULT *AtMessageReadedContent

func (p *UcMessageBody) GetAtMessageReaded() *AtMessageReadedContent {
	if !p.IsSetAtMessageReaded() {
		return UcMessageBody_AtMessageReaded_DEFAULT
	}
	return p.AtMessageReaded
}

var UcMessageBody_LoginNotify_DEFAULT *UserLoginNotifyContent

func (p *UcMessageBody) GetLoginNotify() *UserLoginNotifyContent {
	if !p.IsSetLoginNotify() {
		return UcMessageBody_LoginNotify_DEFAULT
	}
	return p.LoginNotify
}

var UcMessageBody_GroupScopeNotify_DEFAULT *GroupScopeNotifyContent

func (p *UcMessageBody) GetGroupScopeNotify() *GroupScopeNotifyContent {
	if !p.IsSetGroupScopeNotify() {
		return UcMessageBody_GroupScopeNotify_DEFAULT
	}
	return p.GroupScopeNotify
}

var UcMessageBody_ContactsRelationNotify_DEFAULT *ContactsRelationNotifyContent

func (p *UcMessageBody) GetContactsRelationNotify() *ContactsRelationNotifyContent {
	if !p.IsSetContactsRelationNotify() {
		return UcMessageBody_ContactsRelationNotify_DEFAULT
	}
	return p.ContactsRelationNotify
}

var UcMessageBody_MeetingAlertNotify_DEFAULT *MeetingAlertSettingNotifyContent

func (p *UcMessageBody) GetMeetingAlertNotify() *MeetingAlertSettingNotifyContent {
	if !p.IsSetMeetingAlertNotify() {
		return UcMessageBody_MeetingAlertNotify_DEFAULT
	}
	return p.MeetingAlertNotify
}

var UcMessageBody_TripRemindNotify_DEFAULT *TripRemindContent

func (p *UcMessageBody) GetTripRemindNotify() *TripRemindContent {
	if !p.IsSetTripRemindNotify() {
		return UcMessageBody_TripRemindNotify_DEFAULT
	}
	return p.TripRemindNotify
}

var UcMessageBody_ApiText_DEFAULT *APITextContent

func (p *UcMessageBody) GetApiText() *APITextContent {
	if !p.IsSetApiText() {
		return UcMessageBody_ApiText_DEFAULT
	}
	return p.ApiText
}

var UcMessageBody_ApiImage_DEFAULT *APIImageContent

func (p *UcMessageBody) GetApiImage() *APIImageContent {
	if !p.IsSetApiImage() {
		return UcMessageBody_ApiImage_DEFAULT
	}
	return p.ApiImage
}

var UcMessageBody_ApiFile_DEFAULT *APIFileContent

func (p *UcMessageBody) GetApiFile() *APIFileContent {
	if !p.IsSetApiFile() {
		return UcMessageBody_ApiFile_DEFAULT
	}
	return p.ApiFile
}

var UcMessageBody_ApiAckSent_DEFAULT *APIAckSentContent

func (p *UcMessageBody) GetApiAckSent() *APIAckSentContent {
	if !p.IsSetApiAckSent() {
		return UcMessageBody_ApiAckSent_DEFAULT
	}
	return p.ApiAckSent
}

var UcMessageBody_ApiOA_DEFAULT *APIOAContent

func (p *UcMessageBody) GetApiOA() *APIOAContent {
	if !p.IsSetApiOA() {
		return UcMessageBody_ApiOA_DEFAULT
	}
	return p.ApiOA
}

var UcMessageBody_ApiOAStatusChange_DEFAULT *APIOAStatusChangeContent

func (p *UcMessageBody) GetApiOAStatusChange() *APIOAStatusChangeContent {
	if !p.IsSetApiOAStatusChange() {
		return UcMessageBody_ApiOAStatusChange_DEFAULT
	}
	return p.ApiOAStatusChange
}

var UcMessageBody_ApiChangeNotify_DEFAULT *APIAppChangeNotifyContent

func (p *UcMessageBody) GetApiChangeNotify() *APIAppChangeNotifyContent {
	if !p.IsSetApiChangeNotify() {
		return UcMessageBody_ApiChangeNotify_DEFAULT
	}
	return p.ApiChangeNotify
}

var UcMessageBody_ApiEventNotify_DEFAULT *APIAppEventChangeNotify

func (p *UcMessageBody) GetApiEventNotify() *APIAppEventChangeNotify {
	if !p.IsSetApiEventNotify() {
		return UcMessageBody_ApiEventNotify_DEFAULT
	}
	return p.ApiEventNotify
}

var UcMessageBody_ApiCustomized_DEFAULT *APICustomizedContent

func (p *UcMessageBody) GetApiCustomized() *APICustomizedContent {
	if !p.IsSetApiCustomized() {
		return UcMessageBody_ApiCustomized_DEFAULT
	}
	return p.ApiCustomized
}
func (p *UcMessageBody) IsSetPresence() bool {
	return p.Presence != nil
}

func (p *UcMessageBody) IsSetPing() bool {
	return p.Ping != nil
}

func (p *UcMessageBody) IsSetAckSent() bool {
	return p.AckSent != nil
}

func (p *UcMessageBody) IsSetAckReceived() bool {
	return p.AckReceived != nil
}

func (p *UcMessageBody) IsSetAckRead() bool {
	return p.AckRead != nil
}

func (p *UcMessageBody) IsSetSleep() bool {
	return p.Sleep != nil
}

func (p *UcMessageBody) IsSetWakeupConfirm() bool {
	return p.WakeupConfirm != nil
}

func (p *UcMessageBody) IsSetAckPlay() bool {
	return p.AckPlay != nil
}

func (p *UcMessageBody) IsSetBatchAckRead() bool {
	return p.BatchAckRead != nil
}

func (p *UcMessageBody) IsSetText() bool {
	return p.Text != nil
}

func (p *UcMessageBody) IsSetMedia() bool {
	return p.Media != nil
}

func (p *UcMessageBody) IsSetGroupAdd() bool {
	return p.GroupAdd != nil
}

func (p *UcMessageBody) IsSetGroupDel() bool {
	return p.GroupDel != nil
}

func (p *UcMessageBody) IsSetGroupUpdate() bool {
	return p.GroupUpdate != nil
}

func (p *UcMessageBody) IsSetGroupCreate() bool {
	return p.GroupCreate != nil
}

func (p *UcMessageBody) IsSetGroupTop() bool {
	return p.GroupTop != nil
}

func (p *UcMessageBody) IsSetSummaryCreate() bool {
	return p.SummaryCreate != nil
}

func (p *UcMessageBody) IsSetDocSend() bool {
	return p.DocSend != nil
}

func (p *UcMessageBody) IsSetAlertRule() bool {
	return p.AlertRule != nil
}

func (p *UcMessageBody) IsSetGroupClose() bool {
	return p.GroupClose != nil
}

func (p *UcMessageBody) IsSetMsgNotify() bool {
	return p.MsgNotify != nil
}

func (p *UcMessageBody) IsSetGroupKick() bool {
	return p.GroupKick != nil
}

func (p *UcMessageBody) IsSetCodeCreate() bool {
	return p.CodeCreate != nil
}

func (p *UcMessageBody) IsSetCodeDel() bool {
	return p.CodeDel != nil
}

func (p *UcMessageBody) IsSetDocDel() bool {
	return p.DocDel != nil
}

func (p *UcMessageBody) IsSetCommentCreate() bool {
	return p.CommentCreate != nil
}

func (p *UcMessageBody) IsSetCommentDel() bool {
	return p.CommentDel != nil
}

func (p *UcMessageBody) IsSetGroupAvatarUpdate() bool {
	return p.GroupAvatarUpdate != nil
}

func (p *UcMessageBody) IsSetGroupState() bool {
	return p.GroupState != nil
}

func (p *UcMessageBody) IsSetCloudFile() bool {
	return p.CloudFile != nil
}

func (p *UcMessageBody) IsSetMemberRole() bool {
	return p.MemberRole != nil
}

func (p *UcMessageBody) IsSetReport() bool {
	return p.Report != nil
}

func (p *UcMessageBody) IsSetRevocation() bool {
	return p.Revocation != nil
}

func (p *UcMessageBody) IsSetGroupScope() bool {
	return p.GroupScope != nil
}

func (p *UcMessageBody) IsSetOwnerTransfer() bool {
	return p.OwnerTransfer != nil
}

func (p *UcMessageBody) IsSetEmoji() bool {
	return p.Emoji != nil
}

func (p *UcMessageBody) IsSetWelcome() bool {
	return p.Welcome != nil
}

func (p *UcMessageBody) IsSetClientUpdate() bool {
	return p.ClientUpdate != nil
}

func (p *UcMessageBody) IsSetCompleteInfo() bool {
	return p.CompleteInfo != nil
}

func (p *UcMessageBody) IsSetPwdComplexUpdate() bool {
	return p.PwdComplexUpdate != nil
}

func (p *UcMessageBody) IsSetPwdExpire() bool {
	return p.PwdExpire != nil
}

func (p *UcMessageBody) IsSetPcGuide() bool {
	return p.PcGuide != nil
}

func (p *UcMessageBody) IsSetMobileGuide() bool {
	return p.MobileGuide != nil
}

func (p *UcMessageBody) IsSetPwdModify() bool {
	return p.PwdModify != nil
}

func (p *UcMessageBody) IsSetTagDel() bool {
	return p.TagDel != nil
}

func (p *UcMessageBody) IsSetRemind() bool {
	return p.Remind != nil
}

func (p *UcMessageBody) IsSetDeptUpdate() bool {
	return p.DeptUpdate != nil
}

func (p *UcMessageBody) IsSetDeptTransfer() bool {
	return p.DeptTransfer != nil
}

func (p *UcMessageBody) IsSetPositionUpdate() bool {
	return p.PositionUpdate != nil
}

func (p *UcMessageBody) IsSetEmployeeEntry() bool {
	return p.EmployeeEntry != nil
}

func (p *UcMessageBody) IsSetEmployeeLeave() bool {
	return p.EmployeeLeave != nil
}

func (p *UcMessageBody) IsSetEmployeeRights() bool {
	return p.EmployeeRights != nil
}

func (p *UcMessageBody) IsSetDeprtParentChange() bool {
	return p.DeprtParentChange != nil
}

func (p *UcMessageBody) IsSetCompanyJoin() bool {
	return p.CompanyJoin != nil
}

func (p *UcMessageBody) IsSetDeptDelete() bool {
	return p.DeptDelete != nil
}

func (p *UcMessageBody) IsSetEntryConfirm() bool {
	return p.EntryConfirm != nil
}

func (p *UcMessageBody) IsSetLeaveConfirm() bool {
	return p.LeaveConfirm != nil
}

func (p *UcMessageBody) IsSetDeptConfirm() bool {
	return p.DeptConfirm != nil
}

func (p *UcMessageBody) IsSetInstantInvite() bool {
	return p.InstantInvite != nil
}

func (p *UcMessageBody) IsSetConfInvite() bool {
	return p.ConfInvite != nil
}

func (p *UcMessageBody) IsSetConfReceive() bool {
	return p.ConfReceive != nil
}

func (p *UcMessageBody) IsSetConfReject() bool {
	return p.ConfReject != nil
}

func (p *UcMessageBody) IsSetConfCancel() bool {
	return p.ConfCancel != nil
}

func (p *UcMessageBody) IsSetConfAlert() bool {
	return p.ConfAlert != nil
}

func (p *UcMessageBody) IsSetInstantReceive() bool {
	return p.InstantReceive != nil
}

func (p *UcMessageBody) IsSetInstantReject() bool {
	return p.InstantReject != nil
}

func (p *UcMessageBody) IsSetConfChat() bool {
	return p.ConfChat != nil
}

func (p *UcMessageBody) IsSetConfSummary() bool {
	return p.ConfSummary != nil
}

func (p *UcMessageBody) IsSetCallState() bool {
	return p.CallState != nil
}

func (p *UcMessageBody) IsSetConfUpload() bool {
	return p.ConfUpload != nil
}

func (p *UcMessageBody) IsSetConfDocDel() bool {
	return p.ConfDocDel != nil
}

func (p *UcMessageBody) IsSetCardUpdate() bool {
	return p.CardUpdate != nil
}

func (p *UcMessageBody) IsSetContacterAdd() bool {
	return p.ContacterAdd != nil
}

func (p *UcMessageBody) IsSetContacterDel() bool {
	return p.ContacterDel != nil
}

func (p *UcMessageBody) IsSetAttentionCreate() bool {
	return p.AttentionCreate != nil
}

func (p *UcMessageBody) IsSetAttentionCancel() bool {
	return p.AttentionCancel != nil
}

func (p *UcMessageBody) IsSetTransInvite() bool {
	return p.TransInvite != nil
}

func (p *UcMessageBody) IsSetTransReceive() bool {
	return p.TransReceive != nil
}

func (p *UcMessageBody) IsSetTransReject() bool {
	return p.TransReject != nil
}

func (p *UcMessageBody) IsSetTransStop() bool {
	return p.TransStop != nil
}

func (p *UcMessageBody) IsSetAudioInvite() bool {
	return p.AudioInvite != nil
}

func (p *UcMessageBody) IsSetAudioReceive() bool {
	return p.AudioReceive != nil
}

func (p *UcMessageBody) IsSetAudioReject() bool {
	return p.AudioReject != nil
}

func (p *UcMessageBody) IsSetAudioStop() bool {
	return p.AudioStop != nil
}

func (p *UcMessageBody) IsSetCallRecent() bool {
	return p.CallRecent != nil
}

func (p *UcMessageBody) IsSetCallBlock() bool {
	return p.CallBlock != nil
}

func (p *UcMessageBody) IsSetCallReject() bool {
	return p.CallReject != nil
}

func (p *UcMessageBody) IsSetCallCancel() bool {
	return p.CallCancel != nil
}

func (p *UcMessageBody) IsSetConfShare() bool {
	return p.ConfShare != nil
}

func (p *UcMessageBody) IsSetWbContent() bool {
	return p.WbContent != nil
}

func (p *UcMessageBody) IsSetRemoteAssistanceInvite() bool {
	return p.RemoteAssistanceInvite != nil
}

func (p *UcMessageBody) IsSetRemoteAssistanceAccept() bool {
	return p.RemoteAssistanceAccept != nil
}

func (p *UcMessageBody) IsSetRemoteAssistanceReject() bool {
	return p.RemoteAssistanceReject != nil
}

func (p *UcMessageBody) IsSetRemoteAssistanceEnd() bool {
	return p.RemoteAssistanceEnd != nil
}

func (p *UcMessageBody) IsSetRemoteAssistanceCancel() bool {
	return p.RemoteAssistanceCancel != nil
}

func (p *UcMessageBody) IsSetSessionTop() bool {
	return p.SessionTop != nil
}

func (p *UcMessageBody) IsSetAtMessageReaded() bool {
	return p.AtMessageReaded != nil
}

func (p *UcMessageBody) IsSetLoginNotify() bool {
	return p.LoginNotify != nil
}

func (p *UcMessageBody) IsSetGroupScopeNotify() bool {
	return p.GroupScopeNotify != nil
}

func (p *UcMessageBody) IsSetContactsRelationNotify() bool {
	return p.ContactsRelationNotify != nil
}

func (p *UcMessageBody) IsSetMeetingAlertNotify() bool {
	return p.MeetingAlertNotify != nil
}

func (p *UcMessageBody) IsSetTripRemindNotify() bool {
	return p.TripRemindNotify != nil
}

func (p *UcMessageBody) IsSetApiText() bool {
	return p.ApiText != nil
}

func (p *UcMessageBody) IsSetApiImage() bool {
	return p.ApiImage != nil
}

func (p *UcMessageBody) IsSetApiFile() bool {
	return p.ApiFile != nil
}

func (p *UcMessageBody) IsSetApiAckSent() bool {
	return p.ApiAckSent != nil
}

func (p *UcMessageBody) IsSetApiOA() bool {
	return p.ApiOA != nil
}

func (p *UcMessageBody) IsSetApiOAStatusChange() bool {
	return p.ApiOAStatusChange != nil
}

func (p *UcMessageBody) IsSetApiChangeNotify() bool {
	return p.ApiChangeNotify != nil
}

func (p *UcMessageBody) IsSetApiEventNotify() bool {
	return p.ApiEventNotify != nil
}

func (p *UcMessageBody) IsSetApiCustomized() bool {
	return p.ApiCustomized != nil
}

func (p *UcMessageBody) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 50:
			if err := p.ReadField50(iprot); err != nil {
				return err
			}
		case 51:
			if err := p.ReadField51(iprot); err != nil {
				return err
			}
		case 52:
			if err := p.ReadField52(iprot); err != nil {
				return err
			}
		case 53:
			if err := p.ReadField53(iprot); err != nil {
				return err
			}
		case 54:
			if err := p.ReadField54(iprot); err != nil {
				return err
			}
		case 55:
			if err := p.ReadField55(iprot); err != nil {
				return err
			}
		case 56:
			if err := p.ReadField56(iprot); err != nil {
				return err
			}
		case 57:
			if err := p.ReadField57(iprot); err != nil {
				return err
			}
		case 58:
			if err := p.ReadField58(iprot); err != nil {
				return err
			}
		case 59:
			if err := p.ReadField59(iprot); err != nil {
				return err
			}
		case 60:
			if err := p.ReadField60(iprot); err != nil {
				return err
			}
		case 61:
			if err := p.ReadField61(iprot); err != nil {
				return err
			}
		case 62:
			if err := p.ReadField62(iprot); err != nil {
				return err
			}
		case 63:
			if err := p.ReadField63(iprot); err != nil {
				return err
			}
		case 64:
			if err := p.ReadField64(iprot); err != nil {
				return err
			}
		case 65:
			if err := p.ReadField65(iprot); err != nil {
				return err
			}
		case 66:
			if err := p.ReadField66(iprot); err != nil {
				return err
			}
		case 67:
			if err := p.ReadField67(iprot); err != nil {
				return err
			}
		case 68:
			if err := p.ReadField68(iprot); err != nil {
				return err
			}
		case 69:
			if err := p.ReadField69(iprot); err != nil {
				return err
			}
		case 70:
			if err := p.ReadField70(iprot); err != nil {
				return err
			}
		case 71:
			if err := p.ReadField71(iprot); err != nil {
				return err
			}
		case 72:
			if err := p.ReadField72(iprot); err != nil {
				return err
			}
		case 73:
			if err := p.ReadField73(iprot); err != nil {
				return err
			}
		case 74:
			if err := p.ReadField74(iprot); err != nil {
				return err
			}
		case 75:
			if err := p.ReadField75(iprot); err != nil {
				return err
			}
		case 76:
			if err := p.ReadField76(iprot); err != nil {
				return err
			}
		case 100:
			if err := p.ReadField100(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		case 102:
			if err := p.ReadField102(iprot); err != nil {
				return err
			}
		case 103:
			if err := p.ReadField103(iprot); err != nil {
				return err
			}
		case 104:
			if err := p.ReadField104(iprot); err != nil {
				return err
			}
		case 105:
			if err := p.ReadField105(iprot); err != nil {
				return err
			}
		case 106:
			if err := p.ReadField106(iprot); err != nil {
				return err
			}
		case 107:
			if err := p.ReadField107(iprot); err != nil {
				return err
			}
		case 108:
			if err := p.ReadField108(iprot); err != nil {
				return err
			}
		case 109:
			if err := p.ReadField109(iprot); err != nil {
				return err
			}
		case 150:
			if err := p.ReadField150(iprot); err != nil {
				return err
			}
		case 151:
			if err := p.ReadField151(iprot); err != nil {
				return err
			}
		case 152:
			if err := p.ReadField152(iprot); err != nil {
				return err
			}
		case 153:
			if err := p.ReadField153(iprot); err != nil {
				return err
			}
		case 154:
			if err := p.ReadField154(iprot); err != nil {
				return err
			}
		case 155:
			if err := p.ReadField155(iprot); err != nil {
				return err
			}
		case 156:
			if err := p.ReadField156(iprot); err != nil {
				return err
			}
		case 157:
			if err := p.ReadField157(iprot); err != nil {
				return err
			}
		case 158:
			if err := p.ReadField158(iprot); err != nil {
				return err
			}
		case 159:
			if err := p.ReadField159(iprot); err != nil {
				return err
			}
		case 160:
			if err := p.ReadField160(iprot); err != nil {
				return err
			}
		case 161:
			if err := p.ReadField161(iprot); err != nil {
				return err
			}
		case 200:
			if err := p.ReadField200(iprot); err != nil {
				return err
			}
		case 201:
			if err := p.ReadField201(iprot); err != nil {
				return err
			}
		case 202:
			if err := p.ReadField202(iprot); err != nil {
				return err
			}
		case 203:
			if err := p.ReadField203(iprot); err != nil {
				return err
			}
		case 204:
			if err := p.ReadField204(iprot); err != nil {
				return err
			}
		case 205:
			if err := p.ReadField205(iprot); err != nil {
				return err
			}
		case 207:
			if err := p.ReadField207(iprot); err != nil {
				return err
			}
		case 208:
			if err := p.ReadField208(iprot); err != nil {
				return err
			}
		case 209:
			if err := p.ReadField209(iprot); err != nil {
				return err
			}
		case 210:
			if err := p.ReadField210(iprot); err != nil {
				return err
			}
		case 211:
			if err := p.ReadField211(iprot); err != nil {
				return err
			}
		case 212:
			if err := p.ReadField212(iprot); err != nil {
				return err
			}
		case 213:
			if err := p.ReadField213(iprot); err != nil {
				return err
			}
		case 250:
			if err := p.ReadField250(iprot); err != nil {
				return err
			}
		case 251:
			if err := p.ReadField251(iprot); err != nil {
				return err
			}
		case 252:
			if err := p.ReadField252(iprot); err != nil {
				return err
			}
		case 253:
			if err := p.ReadField253(iprot); err != nil {
				return err
			}
		case 254:
			if err := p.ReadField254(iprot); err != nil {
				return err
			}
		case 300:
			if err := p.ReadField300(iprot); err != nil {
				return err
			}
		case 301:
			if err := p.ReadField301(iprot); err != nil {
				return err
			}
		case 302:
			if err := p.ReadField302(iprot); err != nil {
				return err
			}
		case 303:
			if err := p.ReadField303(iprot); err != nil {
				return err
			}
		case 350:
			if err := p.ReadField350(iprot); err != nil {
				return err
			}
		case 351:
			if err := p.ReadField351(iprot); err != nil {
				return err
			}
		case 352:
			if err := p.ReadField352(iprot); err != nil {
				return err
			}
		case 353:
			if err := p.ReadField353(iprot); err != nil {
				return err
			}
		case 354:
			if err := p.ReadField354(iprot); err != nil {
				return err
			}
		case 355:
			if err := p.ReadField355(iprot); err != nil {
				return err
			}
		case 356:
			if err := p.ReadField356(iprot); err != nil {
				return err
			}
		case 357:
			if err := p.ReadField357(iprot); err != nil {
				return err
			}
		case 400:
			if err := p.ReadField400(iprot); err != nil {
				return err
			}
		case 450:
			if err := p.ReadField450(iprot); err != nil {
				return err
			}
		case 601:
			if err := p.ReadField601(iprot); err != nil {
				return err
			}
		case 602:
			if err := p.ReadField602(iprot); err != nil {
				return err
			}
		case 603:
			if err := p.ReadField603(iprot); err != nil {
				return err
			}
		case 604:
			if err := p.ReadField604(iprot); err != nil {
				return err
			}
		case 605:
			if err := p.ReadField605(iprot); err != nil {
				return err
			}
		case 800:
			if err := p.ReadField800(iprot); err != nil {
				return err
			}
		case 801:
			if err := p.ReadField801(iprot); err != nil {
				return err
			}
		case 802:
			if err := p.ReadField802(iprot); err != nil {
				return err
			}
		case 803:
			if err := p.ReadField803(iprot); err != nil {
				return err
			}
		case 804:
			if err := p.ReadField804(iprot); err != nil {
				return err
			}
		case 805:
			if err := p.ReadField805(iprot); err != nil {
				return err
			}
		case 806:
			if err := p.ReadField806(iprot); err != nil {
				return err
			}
		case 10000:
			if err := p.ReadField10000(iprot); err != nil {
				return err
			}
		case 10001:
			if err := p.ReadField10001(iprot); err != nil {
				return err
			}
		case 10002:
			if err := p.ReadField10002(iprot); err != nil {
				return err
			}
		case 10003:
			if err := p.ReadField10003(iprot); err != nil {
				return err
			}
		case 10004:
			if err := p.ReadField10004(iprot); err != nil {
				return err
			}
		case 10005:
			if err := p.ReadField10005(iprot); err != nil {
				return err
			}
		case 10006:
			if err := p.ReadField10006(iprot); err != nil {
				return err
			}
		case 10007:
			if err := p.ReadField10007(iprot); err != nil {
				return err
			}
		case 10008:
			if err := p.ReadField10008(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField15(iprot thrift.TProtocol) error {
	p.Presence = &MessagePresence{}
	if err := p.Presence.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Presence, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField16(iprot thrift.TProtocol) error {
	p.Ping = &MessagePing{}
	if err := p.Ping.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ping, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField20(iprot thrift.TProtocol) error {
	p.AckSent = &AckSent{}
	if err := p.AckSent.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AckSent, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField21(iprot thrift.TProtocol) error {
	p.AckReceived = &AckReceived{}
	if err := p.AckReceived.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AckReceived, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField22(iprot thrift.TProtocol) error {
	p.AckRead = &AckRead{}
	if err := p.AckRead.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AckRead, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField23(iprot thrift.TProtocol) error {
	p.Sleep = &SleepSet{}
	if err := p.Sleep.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sleep, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField24(iprot thrift.TProtocol) error {
	p.WakeupConfirm = &WakeupResult_{}
	if err := p.WakeupConfirm.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.WakeupConfirm, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField25(iprot thrift.TProtocol) error {
	p.AckPlay = &AckPlay{}
	if err := p.AckPlay.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AckPlay, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField26(iprot thrift.TProtocol) error {
	p.BatchAckRead = &BatchAckRead{}
	if err := p.BatchAckRead.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BatchAckRead, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField50(iprot thrift.TProtocol) error {
	p.Text = &TextContent{}
	if err := p.Text.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Text, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField51(iprot thrift.TProtocol) error {
	p.Media = &MediaContent{}
	if err := p.Media.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Media, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField52(iprot thrift.TProtocol) error {
	p.GroupAdd = &GroupMemberAddContent{}
	if err := p.GroupAdd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupAdd, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField53(iprot thrift.TProtocol) error {
	p.GroupDel = &GroupMemberDelContent{}
	if err := p.GroupDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField54(iprot thrift.TProtocol) error {
	p.GroupUpdate = &GroupNameUpdateContent{}
	if err := p.GroupUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField55(iprot thrift.TProtocol) error {
	p.GroupCreate = &GroupCreateContent{}
	if err := p.GroupCreate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupCreate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField56(iprot thrift.TProtocol) error {
	p.GroupTop = &GroupTopContent{}
	if err := p.GroupTop.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupTop, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField57(iprot thrift.TProtocol) error {
	p.SummaryCreate = &SummaryCreateContent{}
	if err := p.SummaryCreate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SummaryCreate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField58(iprot thrift.TProtocol) error {
	p.DocSend = &DocumentContent{}
	if err := p.DocSend.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DocSend, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField59(iprot thrift.TProtocol) error {
	p.AlertRule = &AlertRuleContent{}
	if err := p.AlertRule.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AlertRule, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField60(iprot thrift.TProtocol) error {
	p.GroupClose = &DiscussionClose{}
	if err := p.GroupClose.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupClose, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField61(iprot thrift.TProtocol) error {
	p.MsgNotify = &MsgNotifyContent{}
	if err := p.MsgNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField62(iprot thrift.TProtocol) error {
	p.GroupKick = &GroupMemberKickContent{}
	if err := p.GroupKick.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupKick, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField63(iprot thrift.TProtocol) error {
	p.CodeCreate = &CodeCreateContent{}
	if err := p.CodeCreate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CodeCreate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField64(iprot thrift.TProtocol) error {
	p.CodeDel = &CodeDelContent{}
	if err := p.CodeDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CodeDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField65(iprot thrift.TProtocol) error {
	p.DocDel = &DocumentDelContent{}
	if err := p.DocDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DocDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField66(iprot thrift.TProtocol) error {
	p.CommentCreate = &CommentCreateContent{}
	if err := p.CommentCreate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CommentCreate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField67(iprot thrift.TProtocol) error {
	p.CommentDel = &CommentDelContent{}
	if err := p.CommentDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CommentDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField68(iprot thrift.TProtocol) error {
	p.GroupAvatarUpdate = &GroupAvatarUpdateContent{}
	if err := p.GroupAvatarUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupAvatarUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField69(iprot thrift.TProtocol) error {
	p.GroupState = &GroupStateUpdateContent{}
	if err := p.GroupState.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupState, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField70(iprot thrift.TProtocol) error {
	p.CloudFile = &CloudFileContent{}
	if err := p.CloudFile.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CloudFile, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField71(iprot thrift.TProtocol) error {
	p.MemberRole = &MemberRoleUpdateContent{}
	if err := p.MemberRole.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MemberRole, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField72(iprot thrift.TProtocol) error {
	p.Report = &ReportContent{}
	if err := p.Report.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Report, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField73(iprot thrift.TProtocol) error {
	p.Revocation = &RevocationContent{}
	if err := p.Revocation.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Revocation, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField74(iprot thrift.TProtocol) error {
	p.GroupScope = &GroupScopeContent{}
	if err := p.GroupScope.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupScope, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField75(iprot thrift.TProtocol) error {
	p.OwnerTransfer = &GroupOwnerTransferContent{}
	if err := p.OwnerTransfer.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.OwnerTransfer, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField76(iprot thrift.TProtocol) error {
	p.Emoji = &EmojiContent{}
	if err := p.Emoji.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Emoji, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField100(iprot thrift.TProtocol) error {
	p.Welcome = &SystemWelcomeContent{}
	if err := p.Welcome.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Welcome, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField101(iprot thrift.TProtocol) error {
	p.ClientUpdate = &ClientUpdateContent{}
	if err := p.ClientUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ClientUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField102(iprot thrift.TProtocol) error {
	p.CompleteInfo = &CompleteInfoContent{}
	if err := p.CompleteInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CompleteInfo, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField103(iprot thrift.TProtocol) error {
	p.PwdComplexUpdate = &PwdComplexUpdateContent{}
	if err := p.PwdComplexUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PwdComplexUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField104(iprot thrift.TProtocol) error {
	p.PwdExpire = &PwdExpireContent{}
	if err := p.PwdExpire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PwdExpire, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField105(iprot thrift.TProtocol) error {
	p.PcGuide = &PCClientGuide{}
	if err := p.PcGuide.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PcGuide, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField106(iprot thrift.TProtocol) error {
	p.MobileGuide = &MobileClientGuide{}
	if err := p.MobileGuide.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MobileGuide, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField107(iprot thrift.TProtocol) error {
	p.PwdModify = &PasswordModifyContent{}
	if err := p.PwdModify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PwdModify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField108(iprot thrift.TProtocol) error {
	p.TagDel = &TagDelContent{}
	if err := p.TagDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TagDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField109(iprot thrift.TProtocol) error {
	p.Remind = &GroupRemindContent{}
	if err := p.Remind.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Remind, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField150(iprot thrift.TProtocol) error {
	p.DeptUpdate = &DeptUpdateContent{}
	if err := p.DeptUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeptUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField151(iprot thrift.TProtocol) error {
	p.DeptTransfer = &DeptTransferContent{}
	if err := p.DeptTransfer.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeptTransfer, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField152(iprot thrift.TProtocol) error {
	p.PositionUpdate = &PositionUpdateContent{}
	if err := p.PositionUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PositionUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField153(iprot thrift.TProtocol) error {
	p.EmployeeEntry = &EmployeeEntryContent{}
	if err := p.EmployeeEntry.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EmployeeEntry, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField154(iprot thrift.TProtocol) error {
	p.EmployeeLeave = &EmployeeLeaveContent{}
	if err := p.EmployeeLeave.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EmployeeLeave, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField155(iprot thrift.TProtocol) error {
	p.EmployeeRights = &EmployeeRightsChangeContent{}
	if err := p.EmployeeRights.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EmployeeRights, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField156(iprot thrift.TProtocol) error {
	p.DeprtParentChange = &DeptParentChangeContent{}
	if err := p.DeprtParentChange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeprtParentChange, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField157(iprot thrift.TProtocol) error {
	p.CompanyJoin = &CompanyJoinContent{}
	if err := p.CompanyJoin.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CompanyJoin, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField158(iprot thrift.TProtocol) error {
	p.DeptDelete = &DeptDeleteContent{}
	if err := p.DeptDelete.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeptDelete, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField159(iprot thrift.TProtocol) error {
	p.EntryConfirm = &EmployeeEntryConfirmContent{}
	if err := p.EntryConfirm.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EntryConfirm, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField160(iprot thrift.TProtocol) error {
	p.LeaveConfirm = &EmployeeLeaveConfirmContent{}
	if err := p.LeaveConfirm.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LeaveConfirm, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField161(iprot thrift.TProtocol) error {
	p.DeptConfirm = &DeptTransferConfirmContent{}
	if err := p.DeptConfirm.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeptConfirm, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField200(iprot thrift.TProtocol) error {
	p.InstantInvite = &InstantIQInviteContent{}
	if err := p.InstantInvite.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.InstantInvite, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField201(iprot thrift.TProtocol) error {
	p.ConfInvite = &IQInviteContent{}
	if err := p.ConfInvite.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfInvite, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField202(iprot thrift.TProtocol) error {
	p.ConfReceive = &IQReceiveContent{}
	if err := p.ConfReceive.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfReceive, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField203(iprot thrift.TProtocol) error {
	p.ConfReject = &IQRejectContent{}
	if err := p.ConfReject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfReject, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField204(iprot thrift.TProtocol) error {
	p.ConfCancel = &ConfCancelContent{}
	if err := p.ConfCancel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfCancel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField205(iprot thrift.TProtocol) error {
	p.ConfAlert = &ConfAlertContent{}
	if err := p.ConfAlert.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfAlert, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField207(iprot thrift.TProtocol) error {
	p.InstantReceive = &InstantIQReceiveContent{}
	if err := p.InstantReceive.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.InstantReceive, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField208(iprot thrift.TProtocol) error {
	p.InstantReject = &InstantIQRejectContent{}
	if err := p.InstantReject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.InstantReject, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField209(iprot thrift.TProtocol) error {
	p.ConfChat = &ConfChatContent{}
	if err := p.ConfChat.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfChat, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField210(iprot thrift.TProtocol) error {
	p.ConfSummary = &ConfSummaryContent{}
	if err := p.ConfSummary.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfSummary, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField211(iprot thrift.TProtocol) error {
	p.CallState = &CallStateContent{}
	if err := p.CallState.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallState, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField212(iprot thrift.TProtocol) error {
	p.ConfUpload = &ConfUploadContent{}
	if err := p.ConfUpload.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfUpload, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField213(iprot thrift.TProtocol) error {
	p.ConfDocDel = &ConfDelDocContent{}
	if err := p.ConfDocDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfDocDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField250(iprot thrift.TProtocol) error {
	p.CardUpdate = &CardUpdateContent{}
	if err := p.CardUpdate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CardUpdate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField251(iprot thrift.TProtocol) error {
	p.ContacterAdd = &ContacterAddContent{}
	if err := p.ContacterAdd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ContacterAdd, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField252(iprot thrift.TProtocol) error {
	p.ContacterDel = &ContacterDelContent{}
	if err := p.ContacterDel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ContacterDel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField253(iprot thrift.TProtocol) error {
	p.AttentionCreate = &AttentionCreateContent{}
	if err := p.AttentionCreate.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttentionCreate, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField254(iprot thrift.TProtocol) error {
	p.AttentionCancel = &AttentionCancelContent{}
	if err := p.AttentionCancel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttentionCancel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField300(iprot thrift.TProtocol) error {
	p.TransInvite = &FileTransmissionInviteContent{}
	if err := p.TransInvite.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TransInvite, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField301(iprot thrift.TProtocol) error {
	p.TransReceive = &FileTransmissionReceiveContent{}
	if err := p.TransReceive.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TransReceive, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField302(iprot thrift.TProtocol) error {
	p.TransReject = &FileTransmissionRejectContent{}
	if err := p.TransReject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TransReject, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField303(iprot thrift.TProtocol) error {
	p.TransStop = &FileTransmissionStopContent{}
	if err := p.TransStop.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TransStop, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField350(iprot thrift.TProtocol) error {
	p.AudioInvite = &AudioInviteContent{}
	if err := p.AudioInvite.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AudioInvite, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField351(iprot thrift.TProtocol) error {
	p.AudioReceive = &AudioReceiveContent{}
	if err := p.AudioReceive.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AudioReceive, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField352(iprot thrift.TProtocol) error {
	p.AudioReject = &AudioRejectContent{}
	if err := p.AudioReject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AudioReject, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField353(iprot thrift.TProtocol) error {
	p.AudioStop = &AudioStopContent{}
	if err := p.AudioStop.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AudioStop, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField354(iprot thrift.TProtocol) error {
	p.CallRecent = &AudioRecentCallContent{}
	if err := p.CallRecent.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallRecent, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField355(iprot thrift.TProtocol) error {
	p.CallBlock = &AudioBlockCallContent{}
	if err := p.CallBlock.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallBlock, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField356(iprot thrift.TProtocol) error {
	p.CallReject = &AudioRejectCallContent{}
	if err := p.CallReject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallReject, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField357(iprot thrift.TProtocol) error {
	p.CallCancel = &AudioCancelCallContent{}
	if err := p.CallCancel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallCancel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField400(iprot thrift.TProtocol) error {
	p.ConfShare = &ConfShareContent{}
	if err := p.ConfShare.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConfShare, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField450(iprot thrift.TProtocol) error {
	p.WbContent = &WBMessageContent{}
	if err := p.WbContent.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.WbContent, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField601(iprot thrift.TProtocol) error {
	p.RemoteAssistanceInvite = &RemoteAssistanceInviteContent{}
	if err := p.RemoteAssistanceInvite.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoteAssistanceInvite, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField602(iprot thrift.TProtocol) error {
	p.RemoteAssistanceAccept = &RemoteAssistanceAcceptContent{}
	if err := p.RemoteAssistanceAccept.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoteAssistanceAccept, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField603(iprot thrift.TProtocol) error {
	p.RemoteAssistanceReject = &RemoteAssistanceRejectContent{}
	if err := p.RemoteAssistanceReject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoteAssistanceReject, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField604(iprot thrift.TProtocol) error {
	p.RemoteAssistanceEnd = &RemoteAssistanceEndContent{}
	if err := p.RemoteAssistanceEnd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoteAssistanceEnd, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField605(iprot thrift.TProtocol) error {
	p.RemoteAssistanceCancel = &RemoteAssistanceCancelContent{}
	if err := p.RemoteAssistanceCancel.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoteAssistanceCancel, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField800(iprot thrift.TProtocol) error {
	p.SessionTop = &SessionTopContent{}
	if err := p.SessionTop.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SessionTop, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField801(iprot thrift.TProtocol) error {
	p.AtMessageReaded = &AtMessageReadedContent{}
	if err := p.AtMessageReaded.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AtMessageReaded, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField802(iprot thrift.TProtocol) error {
	p.LoginNotify = &UserLoginNotifyContent{}
	if err := p.LoginNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LoginNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField803(iprot thrift.TProtocol) error {
	p.GroupScopeNotify = &GroupScopeNotifyContent{}
	if err := p.GroupScopeNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GroupScopeNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField804(iprot thrift.TProtocol) error {
	p.ContactsRelationNotify = &ContactsRelationNotifyContent{}
	if err := p.ContactsRelationNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ContactsRelationNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField805(iprot thrift.TProtocol) error {
	p.MeetingAlertNotify = &MeetingAlertSettingNotifyContent{}
	if err := p.MeetingAlertNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MeetingAlertNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField806(iprot thrift.TProtocol) error {
	p.TripRemindNotify = &TripRemindContent{}
	if err := p.TripRemindNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TripRemindNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10000(iprot thrift.TProtocol) error {
	p.ApiText = &APITextContent{}
	if err := p.ApiText.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiText, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10001(iprot thrift.TProtocol) error {
	p.ApiImage = &APIImageContent{}
	if err := p.ApiImage.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiImage, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10002(iprot thrift.TProtocol) error {
	p.ApiFile = &APIFileContent{}
	if err := p.ApiFile.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiFile, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10003(iprot thrift.TProtocol) error {
	p.ApiAckSent = &APIAckSentContent{}
	if err := p.ApiAckSent.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiAckSent, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10004(iprot thrift.TProtocol) error {
	p.ApiOA = &APIOAContent{}
	if err := p.ApiOA.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiOA, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10005(iprot thrift.TProtocol) error {
	p.ApiOAStatusChange = &APIOAStatusChangeContent{}
	if err := p.ApiOAStatusChange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiOAStatusChange, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10006(iprot thrift.TProtocol) error {
	p.ApiChangeNotify = &APIAppChangeNotifyContent{}
	if err := p.ApiChangeNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiChangeNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10007(iprot thrift.TProtocol) error {
	p.ApiEventNotify = &APIAppEventChangeNotify{}
	if err := p.ApiEventNotify.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiEventNotify, err)
	}
	return nil
}

func (p *UcMessageBody) ReadField10008(iprot thrift.TProtocol) error {
	p.ApiCustomized = &APICustomizedContent{}
	if err := p.ApiCustomized.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApiCustomized, err)
	}
	return nil
}

func (p *UcMessageBody) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UcMessageBody"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField50(oprot); err != nil {
		return err
	}
	if err := p.writeField51(oprot); err != nil {
		return err
	}
	if err := p.writeField52(oprot); err != nil {
		return err
	}
	if err := p.writeField53(oprot); err != nil {
		return err
	}
	if err := p.writeField54(oprot); err != nil {
		return err
	}
	if err := p.writeField55(oprot); err != nil {
		return err
	}
	if err := p.writeField56(oprot); err != nil {
		return err
	}
	if err := p.writeField57(oprot); err != nil {
		return err
	}
	if err := p.writeField58(oprot); err != nil {
		return err
	}
	if err := p.writeField59(oprot); err != nil {
		return err
	}
	if err := p.writeField60(oprot); err != nil {
		return err
	}
	if err := p.writeField61(oprot); err != nil {
		return err
	}
	if err := p.writeField62(oprot); err != nil {
		return err
	}
	if err := p.writeField63(oprot); err != nil {
		return err
	}
	if err := p.writeField64(oprot); err != nil {
		return err
	}
	if err := p.writeField65(oprot); err != nil {
		return err
	}
	if err := p.writeField66(oprot); err != nil {
		return err
	}
	if err := p.writeField67(oprot); err != nil {
		return err
	}
	if err := p.writeField68(oprot); err != nil {
		return err
	}
	if err := p.writeField69(oprot); err != nil {
		return err
	}
	if err := p.writeField70(oprot); err != nil {
		return err
	}
	if err := p.writeField71(oprot); err != nil {
		return err
	}
	if err := p.writeField72(oprot); err != nil {
		return err
	}
	if err := p.writeField73(oprot); err != nil {
		return err
	}
	if err := p.writeField74(oprot); err != nil {
		return err
	}
	if err := p.writeField75(oprot); err != nil {
		return err
	}
	if err := p.writeField76(oprot); err != nil {
		return err
	}
	if err := p.writeField100(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := p.writeField102(oprot); err != nil {
		return err
	}
	if err := p.writeField103(oprot); err != nil {
		return err
	}
	if err := p.writeField104(oprot); err != nil {
		return err
	}
	if err := p.writeField105(oprot); err != nil {
		return err
	}
	if err := p.writeField106(oprot); err != nil {
		return err
	}
	if err := p.writeField107(oprot); err != nil {
		return err
	}
	if err := p.writeField108(oprot); err != nil {
		return err
	}
	if err := p.writeField109(oprot); err != nil {
		return err
	}
	if err := p.writeField150(oprot); err != nil {
		return err
	}
	if err := p.writeField151(oprot); err != nil {
		return err
	}
	if err := p.writeField152(oprot); err != nil {
		return err
	}
	if err := p.writeField153(oprot); err != nil {
		return err
	}
	if err := p.writeField154(oprot); err != nil {
		return err
	}
	if err := p.writeField155(oprot); err != nil {
		return err
	}
	if err := p.writeField156(oprot); err != nil {
		return err
	}
	if err := p.writeField157(oprot); err != nil {
		return err
	}
	if err := p.writeField158(oprot); err != nil {
		return err
	}
	if err := p.writeField159(oprot); err != nil {
		return err
	}
	if err := p.writeField160(oprot); err != nil {
		return err
	}
	if err := p.writeField161(oprot); err != nil {
		return err
	}
	if err := p.writeField200(oprot); err != nil {
		return err
	}
	if err := p.writeField201(oprot); err != nil {
		return err
	}
	if err := p.writeField202(oprot); err != nil {
		return err
	}
	if err := p.writeField203(oprot); err != nil {
		return err
	}
	if err := p.writeField204(oprot); err != nil {
		return err
	}
	if err := p.writeField205(oprot); err != nil {
		return err
	}
	if err := p.writeField207(oprot); err != nil {
		return err
	}
	if err := p.writeField208(oprot); err != nil {
		return err
	}
	if err := p.writeField209(oprot); err != nil {
		return err
	}
	if err := p.writeField210(oprot); err != nil {
		return err
	}
	if err := p.writeField211(oprot); err != nil {
		return err
	}
	if err := p.writeField212(oprot); err != nil {
		return err
	}
	if err := p.writeField213(oprot); err != nil {
		return err
	}
	if err := p.writeField250(oprot); err != nil {
		return err
	}
	if err := p.writeField251(oprot); err != nil {
		return err
	}
	if err := p.writeField252(oprot); err != nil {
		return err
	}
	if err := p.writeField253(oprot); err != nil {
		return err
	}
	if err := p.writeField254(oprot); err != nil {
		return err
	}
	if err := p.writeField300(oprot); err != nil {
		return err
	}
	if err := p.writeField301(oprot); err != nil {
		return err
	}
	if err := p.writeField302(oprot); err != nil {
		return err
	}
	if err := p.writeField303(oprot); err != nil {
		return err
	}
	if err := p.writeField350(oprot); err != nil {
		return err
	}
	if err := p.writeField351(oprot); err != nil {
		return err
	}
	if err := p.writeField352(oprot); err != nil {
		return err
	}
	if err := p.writeField353(oprot); err != nil {
		return err
	}
	if err := p.writeField354(oprot); err != nil {
		return err
	}
	if err := p.writeField355(oprot); err != nil {
		return err
	}
	if err := p.writeField356(oprot); err != nil {
		return err
	}
	if err := p.writeField357(oprot); err != nil {
		return err
	}
	if err := p.writeField400(oprot); err != nil {
		return err
	}
	if err := p.writeField450(oprot); err != nil {
		return err
	}
	if err := p.writeField601(oprot); err != nil {
		return err
	}
	if err := p.writeField602(oprot); err != nil {
		return err
	}
	if err := p.writeField603(oprot); err != nil {
		return err
	}
	if err := p.writeField604(oprot); err != nil {
		return err
	}
	if err := p.writeField605(oprot); err != nil {
		return err
	}
	if err := p.writeField800(oprot); err != nil {
		return err
	}
	if err := p.writeField801(oprot); err != nil {
		return err
	}
	if err := p.writeField802(oprot); err != nil {
		return err
	}
	if err := p.writeField803(oprot); err != nil {
		return err
	}
	if err := p.writeField804(oprot); err != nil {
		return err
	}
	if err := p.writeField805(oprot); err != nil {
		return err
	}
	if err := p.writeField806(oprot); err != nil {
		return err
	}
	if err := p.writeField10000(oprot); err != nil {
		return err
	}
	if err := p.writeField10001(oprot); err != nil {
		return err
	}
	if err := p.writeField10002(oprot); err != nil {
		return err
	}
	if err := p.writeField10003(oprot); err != nil {
		return err
	}
	if err := p.writeField10004(oprot); err != nil {
		return err
	}
	if err := p.writeField10005(oprot); err != nil {
		return err
	}
	if err := p.writeField10006(oprot); err != nil {
		return err
	}
	if err := p.writeField10007(oprot); err != nil {
		return err
	}
	if err := p.writeField10008(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UcMessageBody) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresence() {
		if err := oprot.WriteFieldBegin("presence", thrift.STRUCT, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:presence: %s", p, err)
		}
		if err := p.Presence.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Presence, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:presence: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPing() {
		if err := oprot.WriteFieldBegin("ping", thrift.STRUCT, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:ping: %s", p, err)
		}
		if err := p.Ping.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ping, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:ping: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckSent() {
		if err := oprot.WriteFieldBegin("ackSent", thrift.STRUCT, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:ackSent: %s", p, err)
		}
		if err := p.AckSent.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AckSent, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:ackSent: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckReceived() {
		if err := oprot.WriteFieldBegin("ackReceived", thrift.STRUCT, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:ackReceived: %s", p, err)
		}
		if err := p.AckReceived.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AckReceived, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:ackReceived: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckRead() {
		if err := oprot.WriteFieldBegin("ackRead", thrift.STRUCT, 22); err != nil {
			return fmt.Errorf("%T write field begin error 22:ackRead: %s", p, err)
		}
		if err := p.AckRead.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AckRead, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 22:ackRead: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetSleep() {
		if err := oprot.WriteFieldBegin("sleep", thrift.STRUCT, 23); err != nil {
			return fmt.Errorf("%T write field begin error 23:sleep: %s", p, err)
		}
		if err := p.Sleep.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Sleep, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 23:sleep: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetWakeupConfirm() {
		if err := oprot.WriteFieldBegin("wakeupConfirm", thrift.STRUCT, 24); err != nil {
			return fmt.Errorf("%T write field begin error 24:wakeupConfirm: %s", p, err)
		}
		if err := p.WakeupConfirm.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.WakeupConfirm, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 24:wakeupConfirm: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetAckPlay() {
		if err := oprot.WriteFieldBegin("ackPlay", thrift.STRUCT, 25); err != nil {
			return fmt.Errorf("%T write field begin error 25:ackPlay: %s", p, err)
		}
		if err := p.AckPlay.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AckPlay, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 25:ackPlay: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchAckRead() {
		if err := oprot.WriteFieldBegin("batchAckRead", thrift.STRUCT, 26); err != nil {
			return fmt.Errorf("%T write field begin error 26:batchAckRead: %s", p, err)
		}
		if err := p.BatchAckRead.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.BatchAckRead, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 26:batchAckRead: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err := oprot.WriteFieldBegin("text", thrift.STRUCT, 50); err != nil {
			return fmt.Errorf("%T write field begin error 50:text: %s", p, err)
		}
		if err := p.Text.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Text, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 50:text: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetMedia() {
		if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 51); err != nil {
			return fmt.Errorf("%T write field begin error 51:media: %s", p, err)
		}
		if err := p.Media.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Media, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 51:media: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField52(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupAdd() {
		if err := oprot.WriteFieldBegin("groupAdd", thrift.STRUCT, 52); err != nil {
			return fmt.Errorf("%T write field begin error 52:groupAdd: %s", p, err)
		}
		if err := p.GroupAdd.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupAdd, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 52:groupAdd: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField53(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupDel() {
		if err := oprot.WriteFieldBegin("groupDel", thrift.STRUCT, 53); err != nil {
			return fmt.Errorf("%T write field begin error 53:groupDel: %s", p, err)
		}
		if err := p.GroupDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 53:groupDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField54(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupUpdate() {
		if err := oprot.WriteFieldBegin("groupUpdate", thrift.STRUCT, 54); err != nil {
			return fmt.Errorf("%T write field begin error 54:groupUpdate: %s", p, err)
		}
		if err := p.GroupUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 54:groupUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField55(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCreate() {
		if err := oprot.WriteFieldBegin("groupCreate", thrift.STRUCT, 55); err != nil {
			return fmt.Errorf("%T write field begin error 55:groupCreate: %s", p, err)
		}
		if err := p.GroupCreate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupCreate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 55:groupCreate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField56(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupTop() {
		if err := oprot.WriteFieldBegin("groupTop", thrift.STRUCT, 56); err != nil {
			return fmt.Errorf("%T write field begin error 56:groupTop: %s", p, err)
		}
		if err := p.GroupTop.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupTop, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 56:groupTop: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField57(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummaryCreate() {
		if err := oprot.WriteFieldBegin("summaryCreate", thrift.STRUCT, 57); err != nil {
			return fmt.Errorf("%T write field begin error 57:summaryCreate: %s", p, err)
		}
		if err := p.SummaryCreate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SummaryCreate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 57:summaryCreate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField58(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocSend() {
		if err := oprot.WriteFieldBegin("docSend", thrift.STRUCT, 58); err != nil {
			return fmt.Errorf("%T write field begin error 58:docSend: %s", p, err)
		}
		if err := p.DocSend.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DocSend, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 58:docSend: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField59(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlertRule() {
		if err := oprot.WriteFieldBegin("alertRule", thrift.STRUCT, 59); err != nil {
			return fmt.Errorf("%T write field begin error 59:alertRule: %s", p, err)
		}
		if err := p.AlertRule.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AlertRule, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 59:alertRule: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField60(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupClose() {
		if err := oprot.WriteFieldBegin("groupClose", thrift.STRUCT, 60); err != nil {
			return fmt.Errorf("%T write field begin error 60:groupClose: %s", p, err)
		}
		if err := p.GroupClose.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupClose, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 60:groupClose: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField61(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgNotify() {
		if err := oprot.WriteFieldBegin("msgNotify", thrift.STRUCT, 61); err != nil {
			return fmt.Errorf("%T write field begin error 61:msgNotify: %s", p, err)
		}
		if err := p.MsgNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 61:msgNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField62(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupKick() {
		if err := oprot.WriteFieldBegin("groupKick", thrift.STRUCT, 62); err != nil {
			return fmt.Errorf("%T write field begin error 62:groupKick: %s", p, err)
		}
		if err := p.GroupKick.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupKick, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 62:groupKick: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField63(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodeCreate() {
		if err := oprot.WriteFieldBegin("codeCreate", thrift.STRUCT, 63); err != nil {
			return fmt.Errorf("%T write field begin error 63:codeCreate: %s", p, err)
		}
		if err := p.CodeCreate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CodeCreate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 63:codeCreate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField64(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodeDel() {
		if err := oprot.WriteFieldBegin("codeDel", thrift.STRUCT, 64); err != nil {
			return fmt.Errorf("%T write field begin error 64:codeDel: %s", p, err)
		}
		if err := p.CodeDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CodeDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 64:codeDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField65(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocDel() {
		if err := oprot.WriteFieldBegin("docDel", thrift.STRUCT, 65); err != nil {
			return fmt.Errorf("%T write field begin error 65:docDel: %s", p, err)
		}
		if err := p.DocDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DocDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 65:docDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField66(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentCreate() {
		if err := oprot.WriteFieldBegin("commentCreate", thrift.STRUCT, 66); err != nil {
			return fmt.Errorf("%T write field begin error 66:commentCreate: %s", p, err)
		}
		if err := p.CommentCreate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CommentCreate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 66:commentCreate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField67(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentDel() {
		if err := oprot.WriteFieldBegin("commentDel", thrift.STRUCT, 67); err != nil {
			return fmt.Errorf("%T write field begin error 67:commentDel: %s", p, err)
		}
		if err := p.CommentDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CommentDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 67:commentDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField68(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupAvatarUpdate() {
		if err := oprot.WriteFieldBegin("groupAvatarUpdate", thrift.STRUCT, 68); err != nil {
			return fmt.Errorf("%T write field begin error 68:groupAvatarUpdate: %s", p, err)
		}
		if err := p.GroupAvatarUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupAvatarUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 68:groupAvatarUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField69(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupState() {
		if err := oprot.WriteFieldBegin("groupState", thrift.STRUCT, 69); err != nil {
			return fmt.Errorf("%T write field begin error 69:groupState: %s", p, err)
		}
		if err := p.GroupState.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupState, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 69:groupState: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField70(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudFile() {
		if err := oprot.WriteFieldBegin("cloudFile", thrift.STRUCT, 70); err != nil {
			return fmt.Errorf("%T write field begin error 70:cloudFile: %s", p, err)
		}
		if err := p.CloudFile.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CloudFile, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 70:cloudFile: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField71(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberRole() {
		if err := oprot.WriteFieldBegin("memberRole", thrift.STRUCT, 71); err != nil {
			return fmt.Errorf("%T write field begin error 71:memberRole: %s", p, err)
		}
		if err := p.MemberRole.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MemberRole, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 71:memberRole: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField72(oprot thrift.TProtocol) (err error) {
	if p.IsSetReport() {
		if err := oprot.WriteFieldBegin("report", thrift.STRUCT, 72); err != nil {
			return fmt.Errorf("%T write field begin error 72:report: %s", p, err)
		}
		if err := p.Report.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Report, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 72:report: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField73(oprot thrift.TProtocol) (err error) {
	if p.IsSetRevocation() {
		if err := oprot.WriteFieldBegin("revocation", thrift.STRUCT, 73); err != nil {
			return fmt.Errorf("%T write field begin error 73:revocation: %s", p, err)
		}
		if err := p.Revocation.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Revocation, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 73:revocation: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField74(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupScope() {
		if err := oprot.WriteFieldBegin("groupScope", thrift.STRUCT, 74); err != nil {
			return fmt.Errorf("%T write field begin error 74:groupScope: %s", p, err)
		}
		if err := p.GroupScope.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupScope, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 74:groupScope: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField75(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerTransfer() {
		if err := oprot.WriteFieldBegin("ownerTransfer", thrift.STRUCT, 75); err != nil {
			return fmt.Errorf("%T write field begin error 75:ownerTransfer: %s", p, err)
		}
		if err := p.OwnerTransfer.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.OwnerTransfer, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 75:ownerTransfer: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField76(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmoji() {
		if err := oprot.WriteFieldBegin("emoji", thrift.STRUCT, 76); err != nil {
			return fmt.Errorf("%T write field begin error 76:emoji: %s", p, err)
		}
		if err := p.Emoji.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Emoji, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 76:emoji: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetWelcome() {
		if err := oprot.WriteFieldBegin("welcome", thrift.STRUCT, 100); err != nil {
			return fmt.Errorf("%T write field begin error 100:welcome: %s", p, err)
		}
		if err := p.Welcome.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Welcome, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 100:welcome: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientUpdate() {
		if err := oprot.WriteFieldBegin("clientUpdate", thrift.STRUCT, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:clientUpdate: %s", p, err)
		}
		if err := p.ClientUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ClientUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:clientUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompleteInfo() {
		if err := oprot.WriteFieldBegin("completeInfo", thrift.STRUCT, 102); err != nil {
			return fmt.Errorf("%T write field begin error 102:completeInfo: %s", p, err)
		}
		if err := p.CompleteInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CompleteInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 102:completeInfo: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdComplexUpdate() {
		if err := oprot.WriteFieldBegin("pwdComplexUpdate", thrift.STRUCT, 103); err != nil {
			return fmt.Errorf("%T write field begin error 103:pwdComplexUpdate: %s", p, err)
		}
		if err := p.PwdComplexUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PwdComplexUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 103:pwdComplexUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdExpire() {
		if err := oprot.WriteFieldBegin("pwdExpire", thrift.STRUCT, 104); err != nil {
			return fmt.Errorf("%T write field begin error 104:pwdExpire: %s", p, err)
		}
		if err := p.PwdExpire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PwdExpire, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 104:pwdExpire: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField105(oprot thrift.TProtocol) (err error) {
	if p.IsSetPcGuide() {
		if err := oprot.WriteFieldBegin("pcGuide", thrift.STRUCT, 105); err != nil {
			return fmt.Errorf("%T write field begin error 105:pcGuide: %s", p, err)
		}
		if err := p.PcGuide.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PcGuide, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 105:pcGuide: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField106(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobileGuide() {
		if err := oprot.WriteFieldBegin("mobileGuide", thrift.STRUCT, 106); err != nil {
			return fmt.Errorf("%T write field begin error 106:mobileGuide: %s", p, err)
		}
		if err := p.MobileGuide.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MobileGuide, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 106:mobileGuide: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField107(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdModify() {
		if err := oprot.WriteFieldBegin("pwdModify", thrift.STRUCT, 107); err != nil {
			return fmt.Errorf("%T write field begin error 107:pwdModify: %s", p, err)
		}
		if err := p.PwdModify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PwdModify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 107:pwdModify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField108(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagDel() {
		if err := oprot.WriteFieldBegin("tagDel", thrift.STRUCT, 108); err != nil {
			return fmt.Errorf("%T write field begin error 108:tagDel: %s", p, err)
		}
		if err := p.TagDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TagDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 108:tagDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField109(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemind() {
		if err := oprot.WriteFieldBegin("remind", thrift.STRUCT, 109); err != nil {
			return fmt.Errorf("%T write field begin error 109:remind: %s", p, err)
		}
		if err := p.Remind.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Remind, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 109:remind: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField150(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptUpdate() {
		if err := oprot.WriteFieldBegin("deptUpdate", thrift.STRUCT, 150); err != nil {
			return fmt.Errorf("%T write field begin error 150:deptUpdate: %s", p, err)
		}
		if err := p.DeptUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DeptUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 150:deptUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField151(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptTransfer() {
		if err := oprot.WriteFieldBegin("deptTransfer", thrift.STRUCT, 151); err != nil {
			return fmt.Errorf("%T write field begin error 151:deptTransfer: %s", p, err)
		}
		if err := p.DeptTransfer.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DeptTransfer, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 151:deptTransfer: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField152(oprot thrift.TProtocol) (err error) {
	if p.IsSetPositionUpdate() {
		if err := oprot.WriteFieldBegin("positionUpdate", thrift.STRUCT, 152); err != nil {
			return fmt.Errorf("%T write field begin error 152:positionUpdate: %s", p, err)
		}
		if err := p.PositionUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PositionUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 152:positionUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField153(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmployeeEntry() {
		if err := oprot.WriteFieldBegin("employeeEntry", thrift.STRUCT, 153); err != nil {
			return fmt.Errorf("%T write field begin error 153:employeeEntry: %s", p, err)
		}
		if err := p.EmployeeEntry.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.EmployeeEntry, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 153:employeeEntry: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField154(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmployeeLeave() {
		if err := oprot.WriteFieldBegin("employeeLeave", thrift.STRUCT, 154); err != nil {
			return fmt.Errorf("%T write field begin error 154:employeeLeave: %s", p, err)
		}
		if err := p.EmployeeLeave.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.EmployeeLeave, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 154:employeeLeave: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField155(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmployeeRights() {
		if err := oprot.WriteFieldBegin("employeeRights", thrift.STRUCT, 155); err != nil {
			return fmt.Errorf("%T write field begin error 155:employeeRights: %s", p, err)
		}
		if err := p.EmployeeRights.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.EmployeeRights, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 155:employeeRights: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField156(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeprtParentChange() {
		if err := oprot.WriteFieldBegin("deprtParentChange", thrift.STRUCT, 156); err != nil {
			return fmt.Errorf("%T write field begin error 156:deprtParentChange: %s", p, err)
		}
		if err := p.DeprtParentChange.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DeprtParentChange, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 156:deprtParentChange: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField157(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompanyJoin() {
		if err := oprot.WriteFieldBegin("companyJoin", thrift.STRUCT, 157); err != nil {
			return fmt.Errorf("%T write field begin error 157:companyJoin: %s", p, err)
		}
		if err := p.CompanyJoin.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CompanyJoin, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 157:companyJoin: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField158(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptDelete() {
		if err := oprot.WriteFieldBegin("deptDelete", thrift.STRUCT, 158); err != nil {
			return fmt.Errorf("%T write field begin error 158:deptDelete: %s", p, err)
		}
		if err := p.DeptDelete.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DeptDelete, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 158:deptDelete: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField159(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryConfirm() {
		if err := oprot.WriteFieldBegin("entryConfirm", thrift.STRUCT, 159); err != nil {
			return fmt.Errorf("%T write field begin error 159:entryConfirm: %s", p, err)
		}
		if err := p.EntryConfirm.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.EntryConfirm, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 159:entryConfirm: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField160(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeaveConfirm() {
		if err := oprot.WriteFieldBegin("leaveConfirm", thrift.STRUCT, 160); err != nil {
			return fmt.Errorf("%T write field begin error 160:leaveConfirm: %s", p, err)
		}
		if err := p.LeaveConfirm.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LeaveConfirm, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 160:leaveConfirm: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField161(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeptConfirm() {
		if err := oprot.WriteFieldBegin("deptConfirm", thrift.STRUCT, 161); err != nil {
			return fmt.Errorf("%T write field begin error 161:deptConfirm: %s", p, err)
		}
		if err := p.DeptConfirm.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DeptConfirm, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 161:deptConfirm: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstantInvite() {
		if err := oprot.WriteFieldBegin("instantInvite", thrift.STRUCT, 200); err != nil {
			return fmt.Errorf("%T write field begin error 200:instantInvite: %s", p, err)
		}
		if err := p.InstantInvite.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.InstantInvite, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 200:instantInvite: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField201(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfInvite() {
		if err := oprot.WriteFieldBegin("confInvite", thrift.STRUCT, 201); err != nil {
			return fmt.Errorf("%T write field begin error 201:confInvite: %s", p, err)
		}
		if err := p.ConfInvite.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfInvite, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 201:confInvite: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField202(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfReceive() {
		if err := oprot.WriteFieldBegin("confReceive", thrift.STRUCT, 202); err != nil {
			return fmt.Errorf("%T write field begin error 202:confReceive: %s", p, err)
		}
		if err := p.ConfReceive.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfReceive, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 202:confReceive: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField203(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfReject() {
		if err := oprot.WriteFieldBegin("confReject", thrift.STRUCT, 203); err != nil {
			return fmt.Errorf("%T write field begin error 203:confReject: %s", p, err)
		}
		if err := p.ConfReject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfReject, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 203:confReject: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField204(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfCancel() {
		if err := oprot.WriteFieldBegin("confCancel", thrift.STRUCT, 204); err != nil {
			return fmt.Errorf("%T write field begin error 204:confCancel: %s", p, err)
		}
		if err := p.ConfCancel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfCancel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 204:confCancel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField205(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfAlert() {
		if err := oprot.WriteFieldBegin("confAlert", thrift.STRUCT, 205); err != nil {
			return fmt.Errorf("%T write field begin error 205:confAlert: %s", p, err)
		}
		if err := p.ConfAlert.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfAlert, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 205:confAlert: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField207(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstantReceive() {
		if err := oprot.WriteFieldBegin("instantReceive", thrift.STRUCT, 207); err != nil {
			return fmt.Errorf("%T write field begin error 207:instantReceive: %s", p, err)
		}
		if err := p.InstantReceive.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.InstantReceive, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 207:instantReceive: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField208(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstantReject() {
		if err := oprot.WriteFieldBegin("instantReject", thrift.STRUCT, 208); err != nil {
			return fmt.Errorf("%T write field begin error 208:instantReject: %s", p, err)
		}
		if err := p.InstantReject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.InstantReject, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 208:instantReject: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField209(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfChat() {
		if err := oprot.WriteFieldBegin("confChat", thrift.STRUCT, 209); err != nil {
			return fmt.Errorf("%T write field begin error 209:confChat: %s", p, err)
		}
		if err := p.ConfChat.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfChat, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 209:confChat: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField210(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfSummary() {
		if err := oprot.WriteFieldBegin("confSummary", thrift.STRUCT, 210); err != nil {
			return fmt.Errorf("%T write field begin error 210:confSummary: %s", p, err)
		}
		if err := p.ConfSummary.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfSummary, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 210:confSummary: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField211(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallState() {
		if err := oprot.WriteFieldBegin("callState", thrift.STRUCT, 211); err != nil {
			return fmt.Errorf("%T write field begin error 211:callState: %s", p, err)
		}
		if err := p.CallState.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallState, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 211:callState: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField212(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfUpload() {
		if err := oprot.WriteFieldBegin("confUpload", thrift.STRUCT, 212); err != nil {
			return fmt.Errorf("%T write field begin error 212:confUpload: %s", p, err)
		}
		if err := p.ConfUpload.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfUpload, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 212:confUpload: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField213(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfDocDel() {
		if err := oprot.WriteFieldBegin("confDocDel", thrift.STRUCT, 213); err != nil {
			return fmt.Errorf("%T write field begin error 213:confDocDel: %s", p, err)
		}
		if err := p.ConfDocDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfDocDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 213:confDocDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField250(oprot thrift.TProtocol) (err error) {
	if p.IsSetCardUpdate() {
		if err := oprot.WriteFieldBegin("cardUpdate", thrift.STRUCT, 250); err != nil {
			return fmt.Errorf("%T write field begin error 250:cardUpdate: %s", p, err)
		}
		if err := p.CardUpdate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CardUpdate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 250:cardUpdate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetContacterAdd() {
		if err := oprot.WriteFieldBegin("contacterAdd", thrift.STRUCT, 251); err != nil {
			return fmt.Errorf("%T write field begin error 251:contacterAdd: %s", p, err)
		}
		if err := p.ContacterAdd.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ContacterAdd, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 251:contacterAdd: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField252(oprot thrift.TProtocol) (err error) {
	if p.IsSetContacterDel() {
		if err := oprot.WriteFieldBegin("contacterDel", thrift.STRUCT, 252); err != nil {
			return fmt.Errorf("%T write field begin error 252:contacterDel: %s", p, err)
		}
		if err := p.ContacterDel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ContacterDel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 252:contacterDel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField253(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttentionCreate() {
		if err := oprot.WriteFieldBegin("attentionCreate", thrift.STRUCT, 253); err != nil {
			return fmt.Errorf("%T write field begin error 253:attentionCreate: %s", p, err)
		}
		if err := p.AttentionCreate.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttentionCreate, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 253:attentionCreate: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField254(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttentionCancel() {
		if err := oprot.WriteFieldBegin("attentionCancel", thrift.STRUCT, 254); err != nil {
			return fmt.Errorf("%T write field begin error 254:attentionCancel: %s", p, err)
		}
		if err := p.AttentionCancel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttentionCancel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 254:attentionCancel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField300(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransInvite() {
		if err := oprot.WriteFieldBegin("transInvite", thrift.STRUCT, 300); err != nil {
			return fmt.Errorf("%T write field begin error 300:transInvite: %s", p, err)
		}
		if err := p.TransInvite.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TransInvite, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 300:transInvite: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField301(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransReceive() {
		if err := oprot.WriteFieldBegin("transReceive", thrift.STRUCT, 301); err != nil {
			return fmt.Errorf("%T write field begin error 301:transReceive: %s", p, err)
		}
		if err := p.TransReceive.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TransReceive, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 301:transReceive: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField302(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransReject() {
		if err := oprot.WriteFieldBegin("transReject", thrift.STRUCT, 302); err != nil {
			return fmt.Errorf("%T write field begin error 302:transReject: %s", p, err)
		}
		if err := p.TransReject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TransReject, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 302:transReject: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField303(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransStop() {
		if err := oprot.WriteFieldBegin("transStop", thrift.STRUCT, 303); err != nil {
			return fmt.Errorf("%T write field begin error 303:transStop: %s", p, err)
		}
		if err := p.TransStop.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TransStop, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 303:transStop: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField350(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioInvite() {
		if err := oprot.WriteFieldBegin("audioInvite", thrift.STRUCT, 350); err != nil {
			return fmt.Errorf("%T write field begin error 350:audioInvite: %s", p, err)
		}
		if err := p.AudioInvite.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AudioInvite, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 350:audioInvite: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField351(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioReceive() {
		if err := oprot.WriteFieldBegin("audioReceive", thrift.STRUCT, 351); err != nil {
			return fmt.Errorf("%T write field begin error 351:audioReceive: %s", p, err)
		}
		if err := p.AudioReceive.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AudioReceive, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 351:audioReceive: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField352(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioReject() {
		if err := oprot.WriteFieldBegin("audioReject", thrift.STRUCT, 352); err != nil {
			return fmt.Errorf("%T write field begin error 352:audioReject: %s", p, err)
		}
		if err := p.AudioReject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AudioReject, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 352:audioReject: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField353(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioStop() {
		if err := oprot.WriteFieldBegin("audioStop", thrift.STRUCT, 353); err != nil {
			return fmt.Errorf("%T write field begin error 353:audioStop: %s", p, err)
		}
		if err := p.AudioStop.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AudioStop, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 353:audioStop: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField354(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallRecent() {
		if err := oprot.WriteFieldBegin("callRecent", thrift.STRUCT, 354); err != nil {
			return fmt.Errorf("%T write field begin error 354:callRecent: %s", p, err)
		}
		if err := p.CallRecent.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallRecent, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 354:callRecent: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField355(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallBlock() {
		if err := oprot.WriteFieldBegin("callBlock", thrift.STRUCT, 355); err != nil {
			return fmt.Errorf("%T write field begin error 355:callBlock: %s", p, err)
		}
		if err := p.CallBlock.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallBlock, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 355:callBlock: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField356(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallReject() {
		if err := oprot.WriteFieldBegin("callReject", thrift.STRUCT, 356); err != nil {
			return fmt.Errorf("%T write field begin error 356:callReject: %s", p, err)
		}
		if err := p.CallReject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallReject, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 356:callReject: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField357(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallCancel() {
		if err := oprot.WriteFieldBegin("callCancel", thrift.STRUCT, 357); err != nil {
			return fmt.Errorf("%T write field begin error 357:callCancel: %s", p, err)
		}
		if err := p.CallCancel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallCancel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 357:callCancel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField400(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfShare() {
		if err := oprot.WriteFieldBegin("confShare", thrift.STRUCT, 400); err != nil {
			return fmt.Errorf("%T write field begin error 400:confShare: %s", p, err)
		}
		if err := p.ConfShare.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ConfShare, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 400:confShare: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField450(oprot thrift.TProtocol) (err error) {
	if p.IsSetWbContent() {
		if err := oprot.WriteFieldBegin("wbContent", thrift.STRUCT, 450); err != nil {
			return fmt.Errorf("%T write field begin error 450:wbContent: %s", p, err)
		}
		if err := p.WbContent.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.WbContent, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 450:wbContent: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField601(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteAssistanceInvite() {
		if err := oprot.WriteFieldBegin("remoteAssistanceInvite", thrift.STRUCT, 601); err != nil {
			return fmt.Errorf("%T write field begin error 601:remoteAssistanceInvite: %s", p, err)
		}
		if err := p.RemoteAssistanceInvite.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoteAssistanceInvite, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 601:remoteAssistanceInvite: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField602(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteAssistanceAccept() {
		if err := oprot.WriteFieldBegin("remoteAssistanceAccept", thrift.STRUCT, 602); err != nil {
			return fmt.Errorf("%T write field begin error 602:remoteAssistanceAccept: %s", p, err)
		}
		if err := p.RemoteAssistanceAccept.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoteAssistanceAccept, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 602:remoteAssistanceAccept: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField603(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteAssistanceReject() {
		if err := oprot.WriteFieldBegin("remoteAssistanceReject", thrift.STRUCT, 603); err != nil {
			return fmt.Errorf("%T write field begin error 603:remoteAssistanceReject: %s", p, err)
		}
		if err := p.RemoteAssistanceReject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoteAssistanceReject, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 603:remoteAssistanceReject: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField604(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteAssistanceEnd() {
		if err := oprot.WriteFieldBegin("remoteAssistanceEnd", thrift.STRUCT, 604); err != nil {
			return fmt.Errorf("%T write field begin error 604:remoteAssistanceEnd: %s", p, err)
		}
		if err := p.RemoteAssistanceEnd.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoteAssistanceEnd, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 604:remoteAssistanceEnd: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField605(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteAssistanceCancel() {
		if err := oprot.WriteFieldBegin("remoteAssistanceCancel", thrift.STRUCT, 605); err != nil {
			return fmt.Errorf("%T write field begin error 605:remoteAssistanceCancel: %s", p, err)
		}
		if err := p.RemoteAssistanceCancel.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoteAssistanceCancel, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 605:remoteAssistanceCancel: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField800(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionTop() {
		if err := oprot.WriteFieldBegin("sessionTop", thrift.STRUCT, 800); err != nil {
			return fmt.Errorf("%T write field begin error 800:sessionTop: %s", p, err)
		}
		if err := p.SessionTop.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SessionTop, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 800:sessionTop: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField801(oprot thrift.TProtocol) (err error) {
	if p.IsSetAtMessageReaded() {
		if err := oprot.WriteFieldBegin("atMessageReaded", thrift.STRUCT, 801); err != nil {
			return fmt.Errorf("%T write field begin error 801:atMessageReaded: %s", p, err)
		}
		if err := p.AtMessageReaded.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AtMessageReaded, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 801:atMessageReaded: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField802(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoginNotify() {
		if err := oprot.WriteFieldBegin("loginNotify", thrift.STRUCT, 802); err != nil {
			return fmt.Errorf("%T write field begin error 802:loginNotify: %s", p, err)
		}
		if err := p.LoginNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LoginNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 802:loginNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField803(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupScopeNotify() {
		if err := oprot.WriteFieldBegin("groupScopeNotify", thrift.STRUCT, 803); err != nil {
			return fmt.Errorf("%T write field begin error 803:groupScopeNotify: %s", p, err)
		}
		if err := p.GroupScopeNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GroupScopeNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 803:groupScopeNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField804(oprot thrift.TProtocol) (err error) {
	if p.IsSetContactsRelationNotify() {
		if err := oprot.WriteFieldBegin("contactsRelationNotify", thrift.STRUCT, 804); err != nil {
			return fmt.Errorf("%T write field begin error 804:contactsRelationNotify: %s", p, err)
		}
		if err := p.ContactsRelationNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ContactsRelationNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 804:contactsRelationNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField805(oprot thrift.TProtocol) (err error) {
	if p.IsSetMeetingAlertNotify() {
		if err := oprot.WriteFieldBegin("meetingAlertNotify", thrift.STRUCT, 805); err != nil {
			return fmt.Errorf("%T write field begin error 805:meetingAlertNotify: %s", p, err)
		}
		if err := p.MeetingAlertNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MeetingAlertNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 805:meetingAlertNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField806(oprot thrift.TProtocol) (err error) {
	if p.IsSetTripRemindNotify() {
		if err := oprot.WriteFieldBegin("tripRemindNotify", thrift.STRUCT, 806); err != nil {
			return fmt.Errorf("%T write field begin error 806:tripRemindNotify: %s", p, err)
		}
		if err := p.TripRemindNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TripRemindNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 806:tripRemindNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10000(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiText() {
		if err := oprot.WriteFieldBegin("apiText", thrift.STRUCT, 10000); err != nil {
			return fmt.Errorf("%T write field begin error 10000:apiText: %s", p, err)
		}
		if err := p.ApiText.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiText, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10000:apiText: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10001(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiImage() {
		if err := oprot.WriteFieldBegin("apiImage", thrift.STRUCT, 10001); err != nil {
			return fmt.Errorf("%T write field begin error 10001:apiImage: %s", p, err)
		}
		if err := p.ApiImage.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiImage, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10001:apiImage: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10002(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiFile() {
		if err := oprot.WriteFieldBegin("apiFile", thrift.STRUCT, 10002); err != nil {
			return fmt.Errorf("%T write field begin error 10002:apiFile: %s", p, err)
		}
		if err := p.ApiFile.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiFile, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10002:apiFile: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10003(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiAckSent() {
		if err := oprot.WriteFieldBegin("apiAckSent", thrift.STRUCT, 10003); err != nil {
			return fmt.Errorf("%T write field begin error 10003:apiAckSent: %s", p, err)
		}
		if err := p.ApiAckSent.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiAckSent, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10003:apiAckSent: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10004(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiOA() {
		if err := oprot.WriteFieldBegin("apiOA", thrift.STRUCT, 10004); err != nil {
			return fmt.Errorf("%T write field begin error 10004:apiOA: %s", p, err)
		}
		if err := p.ApiOA.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiOA, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10004:apiOA: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10005(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiOAStatusChange() {
		if err := oprot.WriteFieldBegin("apiOAStatusChange", thrift.STRUCT, 10005); err != nil {
			return fmt.Errorf("%T write field begin error 10005:apiOAStatusChange: %s", p, err)
		}
		if err := p.ApiOAStatusChange.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiOAStatusChange, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10005:apiOAStatusChange: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10006(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiChangeNotify() {
		if err := oprot.WriteFieldBegin("apiChangeNotify", thrift.STRUCT, 10006); err != nil {
			return fmt.Errorf("%T write field begin error 10006:apiChangeNotify: %s", p, err)
		}
		if err := p.ApiChangeNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiChangeNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10006:apiChangeNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10007(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiEventNotify() {
		if err := oprot.WriteFieldBegin("apiEventNotify", thrift.STRUCT, 10007); err != nil {
			return fmt.Errorf("%T write field begin error 10007:apiEventNotify: %s", p, err)
		}
		if err := p.ApiEventNotify.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiEventNotify, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10007:apiEventNotify: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) writeField10008(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiCustomized() {
		if err := oprot.WriteFieldBegin("apiCustomized", thrift.STRUCT, 10008); err != nil {
			return fmt.Errorf("%T write field begin error 10008:apiCustomized: %s", p, err)
		}
		if err := p.ApiCustomized.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ApiCustomized, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10008:apiCustomized: %s", p, err)
		}
	}
	return err
}

func (p *UcMessageBody) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UcMessageBody(%+v)", *p)
}
