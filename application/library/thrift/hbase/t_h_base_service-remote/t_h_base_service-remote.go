// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"hbase"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  bool exists(string table, TGet get)")
	fmt.Fprintln(os.Stderr, "  TResult get(string table, TGet get)")
	fmt.Fprintln(os.Stderr, "   getMultiple(string table,  gets)")
	fmt.Fprintln(os.Stderr, "  void put(string table, TPut put)")
	fmt.Fprintln(os.Stderr, "  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut put)")
	fmt.Fprintln(os.Stderr, "  void putMultiple(string table,  puts)")
	fmt.Fprintln(os.Stderr, "  void deleteSingle(string table, TDelete deleteSingle)")
	fmt.Fprintln(os.Stderr, "   deleteMultiple(string table,  deletes)")
	fmt.Fprintln(os.Stderr, "  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete deleteSingle)")
	fmt.Fprintln(os.Stderr, "  TResult increment(string table, TIncrement increment)")
	fmt.Fprintln(os.Stderr, "  TResult append(string table, TAppend append)")
	fmt.Fprintln(os.Stderr, "  i32 openScanner(string table, TScan scan)")
	fmt.Fprintln(os.Stderr, "   getScannerRows(i32 scannerId, i32 numRows)")
	fmt.Fprintln(os.Stderr, "  void closeScanner(i32 scannerId)")
	fmt.Fprintln(os.Stderr, "  void mutateRow(string table, TRowMutations rowMutations)")
	fmt.Fprintln(os.Stderr, "   getScannerResults(string table, TScan scan, i32 numRows)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := hbase.NewTHBaseServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "exists":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Exists requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg73 := flag.Arg(2)
		mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
		defer mbTrans74.Close()
		_, err75 := mbTrans74.WriteString(arg73)
		if err75 != nil {
			Usage()
			return
		}
		factory76 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt77 := factory76.GetProtocol(mbTrans74)
		argvalue1 := hbase.NewTGet()
		err78 := argvalue1.Read(jsProt77)
		if err78 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Exists(value0, value1))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Get requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg80 := flag.Arg(2)
		mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
		defer mbTrans81.Close()
		_, err82 := mbTrans81.WriteString(arg80)
		if err82 != nil {
			Usage()
			return
		}
		factory83 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt84 := factory83.GetProtocol(mbTrans81)
		argvalue1 := hbase.NewTGet()
		err85 := argvalue1.Read(jsProt84)
		if err85 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Get(value0, value1))
		fmt.Print("\n")
		break
	case "getMultiple":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetMultiple requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg87 := flag.Arg(2)
		mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
		defer mbTrans88.Close()
		_, err89 := mbTrans88.WriteString(arg87)
		if err89 != nil {
			Usage()
			return
		}
		factory90 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt91 := factory90.GetProtocol(mbTrans88)
		containerStruct1 := hbase.NewGetMultipleArgs()
		err92 := containerStruct1.ReadField2(jsProt91)
		if err92 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Gets
		value1 := argvalue1
		fmt.Print(client.GetMultiple(value0, value1))
		fmt.Print("\n")
		break
	case "put":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Put requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg94 := flag.Arg(2)
		mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
		defer mbTrans95.Close()
		_, err96 := mbTrans95.WriteString(arg94)
		if err96 != nil {
			Usage()
			return
		}
		factory97 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt98 := factory97.GetProtocol(mbTrans95)
		argvalue1 := hbase.NewTPut()
		err99 := argvalue1.Read(jsProt98)
		if err99 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Put(value0, value1))
		fmt.Print("\n")
		break
	case "checkAndPut":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		argvalue3 := []byte(flag.Arg(4))
		value3 := argvalue3
		argvalue4 := []byte(flag.Arg(5))
		value4 := argvalue4
		arg105 := flag.Arg(6)
		mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
		defer mbTrans106.Close()
		_, err107 := mbTrans106.WriteString(arg105)
		if err107 != nil {
			Usage()
			return
		}
		factory108 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt109 := factory108.GetProtocol(mbTrans106)
		argvalue5 := hbase.NewTPut()
		err110 := argvalue5.Read(jsProt109)
		if err110 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		fmt.Print(client.CheckAndPut(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "putMultiple":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PutMultiple requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg112 := flag.Arg(2)
		mbTrans113 := thrift.NewTMemoryBufferLen(len(arg112))
		defer mbTrans113.Close()
		_, err114 := mbTrans113.WriteString(arg112)
		if err114 != nil {
			Usage()
			return
		}
		factory115 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt116 := factory115.GetProtocol(mbTrans113)
		containerStruct1 := hbase.NewPutMultipleArgs()
		err117 := containerStruct1.ReadField2(jsProt116)
		if err117 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Puts
		value1 := argvalue1
		fmt.Print(client.PutMultiple(value0, value1))
		fmt.Print("\n")
		break
	case "deleteSingle":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteSingle requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg119 := flag.Arg(2)
		mbTrans120 := thrift.NewTMemoryBufferLen(len(arg119))
		defer mbTrans120.Close()
		_, err121 := mbTrans120.WriteString(arg119)
		if err121 != nil {
			Usage()
			return
		}
		factory122 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt123 := factory122.GetProtocol(mbTrans120)
		argvalue1 := hbase.NewTDelete()
		err124 := argvalue1.Read(jsProt123)
		if err124 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.DeleteSingle(value0, value1))
		fmt.Print("\n")
		break
	case "deleteMultiple":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteMultiple requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg126 := flag.Arg(2)
		mbTrans127 := thrift.NewTMemoryBufferLen(len(arg126))
		defer mbTrans127.Close()
		_, err128 := mbTrans127.WriteString(arg126)
		if err128 != nil {
			Usage()
			return
		}
		factory129 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt130 := factory129.GetProtocol(mbTrans127)
		containerStruct1 := hbase.NewDeleteMultipleArgs()
		err131 := containerStruct1.ReadField2(jsProt130)
		if err131 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Deletes
		value1 := argvalue1
		fmt.Print(client.DeleteMultiple(value0, value1))
		fmt.Print("\n")
		break
	case "checkAndDelete":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "CheckAndDelete requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		argvalue3 := []byte(flag.Arg(4))
		value3 := argvalue3
		argvalue4 := []byte(flag.Arg(5))
		value4 := argvalue4
		arg137 := flag.Arg(6)
		mbTrans138 := thrift.NewTMemoryBufferLen(len(arg137))
		defer mbTrans138.Close()
		_, err139 := mbTrans138.WriteString(arg137)
		if err139 != nil {
			Usage()
			return
		}
		factory140 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt141 := factory140.GetProtocol(mbTrans138)
		argvalue5 := hbase.NewTDelete()
		err142 := argvalue5.Read(jsProt141)
		if err142 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		fmt.Print(client.CheckAndDelete(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "increment":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Increment requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg144 := flag.Arg(2)
		mbTrans145 := thrift.NewTMemoryBufferLen(len(arg144))
		defer mbTrans145.Close()
		_, err146 := mbTrans145.WriteString(arg144)
		if err146 != nil {
			Usage()
			return
		}
		factory147 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt148 := factory147.GetProtocol(mbTrans145)
		argvalue1 := hbase.NewTIncrement()
		err149 := argvalue1.Read(jsProt148)
		if err149 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Increment(value0, value1))
		fmt.Print("\n")
		break
	case "append":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Append requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg151 := flag.Arg(2)
		mbTrans152 := thrift.NewTMemoryBufferLen(len(arg151))
		defer mbTrans152.Close()
		_, err153 := mbTrans152.WriteString(arg151)
		if err153 != nil {
			Usage()
			return
		}
		factory154 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt155 := factory154.GetProtocol(mbTrans152)
		argvalue1 := hbase.NewTAppend()
		err156 := argvalue1.Read(jsProt155)
		if err156 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Append(value0, value1))
		fmt.Print("\n")
		break
	case "openScanner":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "OpenScanner requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg158 := flag.Arg(2)
		mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
		defer mbTrans159.Close()
		_, err160 := mbTrans159.WriteString(arg158)
		if err160 != nil {
			Usage()
			return
		}
		factory161 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt162 := factory161.GetProtocol(mbTrans159)
		argvalue1 := hbase.NewTScan()
		err163 := argvalue1.Read(jsProt162)
		if err163 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.OpenScanner(value0, value1))
		fmt.Print("\n")
		break
	case "getScannerRows":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetScannerRows requires 2 args")
			flag.Usage()
		}
		tmp0, err164 := (strconv.Atoi(flag.Arg(1)))
		if err164 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err165 := (strconv.Atoi(flag.Arg(2)))
		if err165 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetScannerRows(value0, value1))
		fmt.Print("\n")
		break
	case "closeScanner":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
			flag.Usage()
		}
		tmp0, err166 := (strconv.Atoi(flag.Arg(1)))
		if err166 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.CloseScanner(value0))
		fmt.Print("\n")
		break
	case "mutateRow":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MutateRow requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg168 := flag.Arg(2)
		mbTrans169 := thrift.NewTMemoryBufferLen(len(arg168))
		defer mbTrans169.Close()
		_, err170 := mbTrans169.WriteString(arg168)
		if err170 != nil {
			Usage()
			return
		}
		factory171 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt172 := factory171.GetProtocol(mbTrans169)
		argvalue1 := hbase.NewTRowMutations()
		err173 := argvalue1.Read(jsProt172)
		if err173 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.MutateRow(value0, value1))
		fmt.Print("\n")
		break
	case "getScannerResults":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetScannerResults requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg175 := flag.Arg(2)
		mbTrans176 := thrift.NewTMemoryBufferLen(len(arg175))
		defer mbTrans176.Close()
		_, err177 := mbTrans176.WriteString(arg175)
		if err177 != nil {
			Usage()
			return
		}
		factory178 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt179 := factory178.GetProtocol(mbTrans176)
		argvalue1 := hbase.NewTScan()
		err180 := argvalue1.Read(jsProt179)
		if err180 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err181 := (strconv.Atoi(flag.Arg(3)))
		if err181 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetScannerResults(value0, value1, value2))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
