// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

//Specify type of delete:
// - DELETE_COLUMN means exactly one version will be removed,
// - DELETE_COLUMNS means previous versions will also be removed.
type TDeleteType int64

const (
	TDeleteType_DELETE_COLUMN  TDeleteType = 0
	TDeleteType_DELETE_COLUMNS TDeleteType = 1
)

func (p TDeleteType) String() string {
	switch p {
	case TDeleteType_DELETE_COLUMN:
		return "TDeleteType_DELETE_COLUMN"
	case TDeleteType_DELETE_COLUMNS:
		return "TDeleteType_DELETE_COLUMNS"
	}
	return "<UNSET>"
}

func TDeleteTypeFromString(s string) (TDeleteType, error) {
	switch s {
	case "TDeleteType_DELETE_COLUMN":
		return TDeleteType_DELETE_COLUMN, nil
	case "TDeleteType_DELETE_COLUMNS":
		return TDeleteType_DELETE_COLUMNS, nil
	}
	return TDeleteType(0), fmt.Errorf("not a valid TDeleteType string")
}

func TDeleteTypePtr(v TDeleteType) *TDeleteType { return &v }

//Specify Durability:
// - SKIP_WAL means do not write the Mutation to the WAL.
// - ASYNC_WAL means write the Mutation to the WAL asynchronously,
// - SYNC_WAL means write the Mutation to the WAL synchronously,
// - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
type TDurability int64

const (
	TDurability_SKIP_WAL  TDurability = 1
	TDurability_ASYNC_WAL TDurability = 2
	TDurability_SYNC_WAL  TDurability = 3
	TDurability_FSYNC_WAL TDurability = 4
)

func (p TDurability) String() string {
	switch p {
	case TDurability_SKIP_WAL:
		return "TDurability_SKIP_WAL"
	case TDurability_ASYNC_WAL:
		return "TDurability_ASYNC_WAL"
	case TDurability_SYNC_WAL:
		return "TDurability_SYNC_WAL"
	case TDurability_FSYNC_WAL:
		return "TDurability_FSYNC_WAL"
	}
	return "<UNSET>"
}

func TDurabilityFromString(s string) (TDurability, error) {
	switch s {
	case "TDurability_SKIP_WAL":
		return TDurability_SKIP_WAL, nil
	case "TDurability_ASYNC_WAL":
		return TDurability_ASYNC_WAL, nil
	case "TDurability_SYNC_WAL":
		return TDurability_SYNC_WAL, nil
	case "TDurability_FSYNC_WAL":
		return TDurability_FSYNC_WAL, nil
	}
	return TDurability(0), fmt.Errorf("not a valid TDurability string")
}

func TDurabilityPtr(v TDurability) *TDurability { return &v }

type JID struct {
	UserID int32 `thrift:"userID,1,required" json:"userID"`
	SiteID int32 `thrift:"siteID,2,required" json:"siteID"`
	ResID  int32 `thrift:"resID,3,required" json:"resID"`
}

func NewJID() *JID {
	return &JID{}
}

func (p *JID) GetUserID() int32 {
	return p.UserID
}

func (p *JID) GetSiteID() int32 {
	return p.SiteID
}

func (p *JID) GetResID() int32 {
	return p.ResID
}
func (p *JID) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *JID) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *JID) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SiteID = v
	}
	return nil
}

func (p *JID) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ResID = v
	}
	return nil
}

func (p *JID) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JID"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *JID) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return fmt.Errorf("%T.userID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userID: %s", p, err)
	}
	return err
}

func (p *JID) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("siteID", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:siteID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SiteID)); err != nil {
		return fmt.Errorf("%T.siteID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:siteID: %s", p, err)
	}
	return err
}

func (p *JID) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resID", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:resID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResID)); err != nil {
		return fmt.Errorf("%T.resID (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:resID: %s", p, err)
	}
	return err
}

func (p *JID) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JID(%+v)", *p)
}

type UcMessageHead struct {
	Version      int16 `thrift:"version,1,required" json:"version"`
	Appid        int16 `thrift:"appid,2,required" json:"appid"`
	Pri          int8  `thrift:"pri,3,required" json:"pri"`
	Protocoltype int8  `thrift:"protocoltype,4,required" json:"protocoltype"`
	Protocolid   int16 `thrift:"protocolid,5,required" json:"protocolid"`
	Id           int32 `thrift:"id,6,required" json:"id"`
	Seq          int64 `thrift:"seq,7,required" json:"seq"`
	Timestamp    int32 `thrift:"timestamp,8,required" json:"timestamp"`
	// unused field # 9
	From         *JID  `thrift:"from,10,required" json:"from"`
	To           *JID  `thrift:"to,11,required" json:"to"`
	Conversation int32 `thrift:"conversation,12,required" json:"conversation"`
	Length       int32 `thrift:"length,13,required" json:"length"`
}

func NewUcMessageHead() *UcMessageHead {
	return &UcMessageHead{
		Version: 256,
	}
}

func (p *UcMessageHead) GetVersion() int16 {
	return p.Version
}

func (p *UcMessageHead) GetAppid() int16 {
	return p.Appid
}

func (p *UcMessageHead) GetPri() int8 {
	return p.Pri
}

func (p *UcMessageHead) GetProtocoltype() int8 {
	return p.Protocoltype
}

func (p *UcMessageHead) GetProtocolid() int16 {
	return p.Protocolid
}

func (p *UcMessageHead) GetId() int32 {
	return p.Id
}

func (p *UcMessageHead) GetSeq() int64 {
	return p.Seq
}

func (p *UcMessageHead) GetTimestamp() int32 {
	return p.Timestamp
}

var UcMessageHead_From_DEFAULT *JID

func (p *UcMessageHead) GetFrom() *JID {
	if !p.IsSetFrom() {
		return UcMessageHead_From_DEFAULT
	}
	return p.From
}

var UcMessageHead_To_DEFAULT *JID

func (p *UcMessageHead) GetTo() *JID {
	if !p.IsSetTo() {
		return UcMessageHead_To_DEFAULT
	}
	return p.To
}

func (p *UcMessageHead) GetConversation() int32 {
	return p.Conversation
}

func (p *UcMessageHead) GetLength() int32 {
	return p.Length
}
func (p *UcMessageHead) IsSetFrom() bool {
	return p.From != nil
}

func (p *UcMessageHead) IsSetTo() bool {
	return p.To != nil
}

func (p *UcMessageHead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *UcMessageHead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *UcMessageHead) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Pri = temp
	}
	return nil
}

func (p *UcMessageHead) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.Protocoltype = temp
	}
	return nil
}

func (p *UcMessageHead) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Protocolid = v
	}
	return nil
}

func (p *UcMessageHead) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *UcMessageHead) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *UcMessageHead) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *UcMessageHead) ReadField10(iprot thrift.TProtocol) error {
	p.From = &JID{}
	if err := p.From.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.From, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField11(iprot thrift.TProtocol) error {
	p.To = &JID{}
	if err := p.To.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.To, err)
	}
	return nil
}

func (p *UcMessageHead) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Conversation = v
	}
	return nil
}

func (p *UcMessageHead) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *UcMessageHead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UcMessageHead"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UcMessageHead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I16, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:appid: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Appid)); err != nil {
		return fmt.Errorf("%T.appid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:appid: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pri", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:pri: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Pri)); err != nil {
		return fmt.Errorf("%T.pri (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:pri: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocoltype", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:protocoltype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Protocoltype)); err != nil {
		return fmt.Errorf("%T.protocoltype (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:protocoltype: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocolid", thrift.I16, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:protocolid: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Protocolid)); err != nil {
		return fmt.Errorf("%T.protocolid (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:protocolid: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:id: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:seq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:seq: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:timestamp: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:timestamp: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRUCT, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:from: %s", p, err)
	}
	if err := p.From.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.From, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:from: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRUCT, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:to: %s", p, err)
	}
	if err := p.To.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.To, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:to: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conversation", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:conversation: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Conversation)); err != nil {
		return fmt.Errorf("%T.conversation (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:conversation: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I32, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:length: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Length)); err != nil {
		return fmt.Errorf("%T.length (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:length: %s", p, err)
	}
	return err
}

func (p *UcMessageHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UcMessageHead(%+v)", *p)
}

type UcMessage struct {
	Head        *UcMessageHead `thrift:"head,1,required" json:"head"`
	Body        string         `thrift:"body,2,required" json:"body"`
	Rendered    *string        `thrift:"rendered,3" json:"rendered"`
	Url         *string        `thrift:"url,4" json:"url"`
	IsLocal     *string        `thrift:"is_local,5" json:"is_local"`
	Source      *string        `thrift:"source,6" json:"source"`
	Lat         *string        `thrift:"lat,7" json:"lat"`
	Lon         *string        `thrift:"lon,8" json:"lon"`
	LocationId  *string        `thrift:"location_id,9" json:"location_id"`
	LocationNs  *string        `thrift:"location_ns,10" json:"location_ns"`
	RepeatOf    *string        `thrift:"repeat_of,11" json:"repeat_of"`
	ObjectType  *string        `thrift:"object_type,12" json:"object_type"`
	Verb        *string        `thrift:"verb,13" json:"verb"`
	Scope       *string        `thrift:"scope,14" json:"scope"`
	Uri         *string        `thrift:"uri,15" json:"uri"`
	Created     *string        `thrift:"created,16" json:"created"`
	Title       *string        `thrift:"title,17" json:"title"`
	TouseridPri string         `thrift:"touserid_pri,18,required" json:"touserid_pri"`
}

func NewUcMessage() *UcMessage {
	return &UcMessage{}
}

var UcMessage_Head_DEFAULT *UcMessageHead

func (p *UcMessage) GetHead() *UcMessageHead {
	if !p.IsSetHead() {
		return UcMessage_Head_DEFAULT
	}
	return p.Head
}

func (p *UcMessage) GetBody() string {
	return p.Body
}

var UcMessage_Rendered_DEFAULT string

func (p *UcMessage) GetRendered() string {
	if !p.IsSetRendered() {
		return UcMessage_Rendered_DEFAULT
	}
	return *p.Rendered
}

var UcMessage_Url_DEFAULT string

func (p *UcMessage) GetUrl() string {
	if !p.IsSetUrl() {
		return UcMessage_Url_DEFAULT
	}
	return *p.Url
}

var UcMessage_IsLocal_DEFAULT string

func (p *UcMessage) GetIsLocal() string {
	if !p.IsSetIsLocal() {
		return UcMessage_IsLocal_DEFAULT
	}
	return *p.IsLocal
}

var UcMessage_Source_DEFAULT string

func (p *UcMessage) GetSource() string {
	if !p.IsSetSource() {
		return UcMessage_Source_DEFAULT
	}
	return *p.Source
}

var UcMessage_Lat_DEFAULT string

func (p *UcMessage) GetLat() string {
	if !p.IsSetLat() {
		return UcMessage_Lat_DEFAULT
	}
	return *p.Lat
}

var UcMessage_Lon_DEFAULT string

func (p *UcMessage) GetLon() string {
	if !p.IsSetLon() {
		return UcMessage_Lon_DEFAULT
	}
	return *p.Lon
}

var UcMessage_LocationId_DEFAULT string

func (p *UcMessage) GetLocationId() string {
	if !p.IsSetLocationId() {
		return UcMessage_LocationId_DEFAULT
	}
	return *p.LocationId
}

var UcMessage_LocationNs_DEFAULT string

func (p *UcMessage) GetLocationNs() string {
	if !p.IsSetLocationNs() {
		return UcMessage_LocationNs_DEFAULT
	}
	return *p.LocationNs
}

var UcMessage_RepeatOf_DEFAULT string

func (p *UcMessage) GetRepeatOf() string {
	if !p.IsSetRepeatOf() {
		return UcMessage_RepeatOf_DEFAULT
	}
	return *p.RepeatOf
}

var UcMessage_ObjectType_DEFAULT string

func (p *UcMessage) GetObjectType() string {
	if !p.IsSetObjectType() {
		return UcMessage_ObjectType_DEFAULT
	}
	return *p.ObjectType
}

var UcMessage_Verb_DEFAULT string

func (p *UcMessage) GetVerb() string {
	if !p.IsSetVerb() {
		return UcMessage_Verb_DEFAULT
	}
	return *p.Verb
}

var UcMessage_Scope_DEFAULT string

func (p *UcMessage) GetScope() string {
	if !p.IsSetScope() {
		return UcMessage_Scope_DEFAULT
	}
	return *p.Scope
}

var UcMessage_Uri_DEFAULT string

func (p *UcMessage) GetUri() string {
	if !p.IsSetUri() {
		return UcMessage_Uri_DEFAULT
	}
	return *p.Uri
}

var UcMessage_Created_DEFAULT string

func (p *UcMessage) GetCreated() string {
	if !p.IsSetCreated() {
		return UcMessage_Created_DEFAULT
	}
	return *p.Created
}

var UcMessage_Title_DEFAULT string

func (p *UcMessage) GetTitle() string {
	if !p.IsSetTitle() {
		return UcMessage_Title_DEFAULT
	}
	return *p.Title
}

func (p *UcMessage) GetTouseridPri() string {
	return p.TouseridPri
}
func (p *UcMessage) IsSetHead() bool {
	return p.Head != nil
}

func (p *UcMessage) IsSetRendered() bool {
	return p.Rendered != nil
}

func (p *UcMessage) IsSetUrl() bool {
	return p.Url != nil
}

func (p *UcMessage) IsSetIsLocal() bool {
	return p.IsLocal != nil
}

func (p *UcMessage) IsSetSource() bool {
	return p.Source != nil
}

func (p *UcMessage) IsSetLat() bool {
	return p.Lat != nil
}

func (p *UcMessage) IsSetLon() bool {
	return p.Lon != nil
}

func (p *UcMessage) IsSetLocationId() bool {
	return p.LocationId != nil
}

func (p *UcMessage) IsSetLocationNs() bool {
	return p.LocationNs != nil
}

func (p *UcMessage) IsSetRepeatOf() bool {
	return p.RepeatOf != nil
}

func (p *UcMessage) IsSetObjectType() bool {
	return p.ObjectType != nil
}

func (p *UcMessage) IsSetVerb() bool {
	return p.Verb != nil
}

func (p *UcMessage) IsSetScope() bool {
	return p.Scope != nil
}

func (p *UcMessage) IsSetUri() bool {
	return p.Uri != nil
}

func (p *UcMessage) IsSetCreated() bool {
	return p.Created != nil
}

func (p *UcMessage) IsSetTitle() bool {
	return p.Title != nil
}

func (p *UcMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UcMessage) ReadField1(iprot thrift.TProtocol) error {
	p.Head = &UcMessageHead{
		Version: 256,
	}
	if err := p.Head.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Head, err)
	}
	return nil
}

func (p *UcMessage) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *UcMessage) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Rendered = &v
	}
	return nil
}

func (p *UcMessage) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Url = &v
	}
	return nil
}

func (p *UcMessage) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IsLocal = &v
	}
	return nil
}

func (p *UcMessage) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *UcMessage) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Lat = &v
	}
	return nil
}

func (p *UcMessage) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Lon = &v
	}
	return nil
}

func (p *UcMessage) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.LocationId = &v
	}
	return nil
}

func (p *UcMessage) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.LocationNs = &v
	}
	return nil
}

func (p *UcMessage) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.RepeatOf = &v
	}
	return nil
}

func (p *UcMessage) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ObjectType = &v
	}
	return nil
}

func (p *UcMessage) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Verb = &v
	}
	return nil
}

func (p *UcMessage) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.Scope = &v
	}
	return nil
}

func (p *UcMessage) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.Uri = &v
	}
	return nil
}

func (p *UcMessage) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.Created = &v
	}
	return nil
}

func (p *UcMessage) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *UcMessage) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.TouseridPri = v
	}
	return nil
}

func (p *UcMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UcMessage"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UcMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("head", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:head: %s", p, err)
	}
	if err := p.Head.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Head, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:head: %s", p, err)
	}
	return err
}

func (p *UcMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:body: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return fmt.Errorf("%T.body (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:body: %s", p, err)
	}
	return err
}

func (p *UcMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRendered() {
		if err := oprot.WriteFieldBegin("rendered", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:rendered: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Rendered)); err != nil {
			return fmt.Errorf("%T.rendered (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:rendered: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUrl() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Url)); err != nil {
			return fmt.Errorf("%T.url (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:url: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsLocal() {
		if err := oprot.WriteFieldBegin("is_local", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:is_local: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.IsLocal)); err != nil {
			return fmt.Errorf("%T.is_local (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:is_local: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:source: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return fmt.Errorf("%T.source (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:source: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLat() {
		if err := oprot.WriteFieldBegin("lat", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:lat: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Lat)); err != nil {
			return fmt.Errorf("%T.lat (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:lat: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLon() {
		if err := oprot.WriteFieldBegin("lon", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:lon: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Lon)); err != nil {
			return fmt.Errorf("%T.lon (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:lon: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocationId() {
		if err := oprot.WriteFieldBegin("location_id", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:location_id: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.LocationId)); err != nil {
			return fmt.Errorf("%T.location_id (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:location_id: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocationNs() {
		if err := oprot.WriteFieldBegin("location_ns", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:location_ns: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.LocationNs)); err != nil {
			return fmt.Errorf("%T.location_ns (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:location_ns: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepeatOf() {
		if err := oprot.WriteFieldBegin("repeat_of", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:repeat_of: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.RepeatOf)); err != nil {
			return fmt.Errorf("%T.repeat_of (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:repeat_of: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetObjectType() {
		if err := oprot.WriteFieldBegin("object_type", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:object_type: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ObjectType)); err != nil {
			return fmt.Errorf("%T.object_type (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:object_type: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVerb() {
		if err := oprot.WriteFieldBegin("verb", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:verb: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Verb)); err != nil {
			return fmt.Errorf("%T.verb (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:verb: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetScope() {
		if err := oprot.WriteFieldBegin("scope", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:scope: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Scope)); err != nil {
			return fmt.Errorf("%T.scope (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:scope: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetUri() {
		if err := oprot.WriteFieldBegin("uri", thrift.STRING, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:uri: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Uri)); err != nil {
			return fmt.Errorf("%T.uri (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:uri: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.STRING, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:created: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Created)); err != nil {
			return fmt.Errorf("%T.created (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:created: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:title: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return fmt.Errorf("%T.title (17) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:title: %s", p, err)
		}
	}
	return err
}

func (p *UcMessage) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("touserid_pri", thrift.STRING, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:touserid_pri: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TouseridPri)); err != nil {
		return fmt.Errorf("%T.touserid_pri (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:touserid_pri: %s", p, err)
	}
	return err
}

func (p *UcMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UcMessage(%+v)", *p)
}

type TTimeRange struct {
	MinStamp int64 `thrift:"minStamp,1,required" json:"minStamp"`
	MaxStamp int64 `thrift:"maxStamp,2,required" json:"maxStamp"`
}

func NewTTimeRange() *TTimeRange {
	return &TTimeRange{}
}

func (p *TTimeRange) GetMinStamp() int64 {
	return p.MinStamp
}

func (p *TTimeRange) GetMaxStamp() int64 {
	return p.MaxStamp
}
func (p *TTimeRange) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TTimeRange) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MinStamp = v
	}
	return nil
}

func (p *TTimeRange) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MaxStamp = v
	}
	return nil
}

func (p *TTimeRange) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTimeRange"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TTimeRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minStamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:minStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MinStamp)); err != nil {
		return fmt.Errorf("%T.minStamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:minStamp: %s", p, err)
	}
	return err
}

func (p *TTimeRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxStamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:maxStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MaxStamp)); err != nil {
		return fmt.Errorf("%T.maxStamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:maxStamp: %s", p, err)
	}
	return err
}

func (p *TTimeRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTimeRange(%+v)", *p)
}

type TColumn struct {
	Family    []byte `thrift:"family,1,required" json:"family"`
	Qualifier []byte `thrift:"qualifier,2" json:"qualifier"`
	Timestamp *int64 `thrift:"timestamp,3" json:"timestamp"`
}

func NewTColumn() *TColumn {
	return &TColumn{}
}

func (p *TColumn) GetFamily() []byte {
	return p.Family
}

var TColumn_Qualifier_DEFAULT []byte

func (p *TColumn) GetQualifier() []byte {
	return p.Qualifier
}

var TColumn_Timestamp_DEFAULT int64

func (p *TColumn) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TColumn_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *TColumn) IsSetQualifier() bool {
	return p.Qualifier != nil
}

func (p *TColumn) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumn) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumn) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return fmt.Errorf("%T.family (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family: %s", p, err)
	}
	return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQualifier() {
		if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Qualifier); err != nil {
			return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)
}

type TColumnValue struct {
	Family    []byte `thrift:"family,1,required" json:"family"`
	Qualifier []byte `thrift:"qualifier,2,required" json:"qualifier"`
	Value     []byte `thrift:"value,3,required" json:"value"`
	Timestamp *int64 `thrift:"timestamp,4" json:"timestamp"`
	Tags      []byte `thrift:"tags,5" json:"tags"`
}

func NewTColumnValue() *TColumnValue {
	return &TColumnValue{}
}

func (p *TColumnValue) GetFamily() []byte {
	return p.Family
}

func (p *TColumnValue) GetQualifier() []byte {
	return p.Qualifier
}

func (p *TColumnValue) GetValue() []byte {
	return p.Value
}

var TColumnValue_Timestamp_DEFAULT int64

func (p *TColumnValue) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TColumnValue_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TColumnValue_Tags_DEFAULT []byte

func (p *TColumnValue) GetTags() []byte {
	return p.Tags
}
func (p *TColumnValue) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TColumnValue) IsSetTags() bool {
	return p.Tags != nil
}

func (p *TColumnValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumnValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumnValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TColumnValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TColumnValue) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Tags = v
	}
	return nil
}

func (p *TColumnValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnValue"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return fmt.Errorf("%T.family (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family: %s", p, err)
	}
	return err
}

func (p *TColumnValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Qualifier); err != nil {
		return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
	}
	return err
}

func (p *TColumnValue) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return fmt.Errorf("%T.value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:value: %s", p, err)
	}
	return err
}

func (p *TColumnValue) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:tags: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Tags); err != nil {
			return fmt.Errorf("%T.tags (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:tags: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnValue(%+v)", *p)
}

type TColumnIncrement struct {
	Family    []byte `thrift:"family,1,required" json:"family"`
	Qualifier []byte `thrift:"qualifier,2,required" json:"qualifier"`
	Amount    int64  `thrift:"amount,3" json:"amount"`
}

func NewTColumnIncrement() *TColumnIncrement {
	return &TColumnIncrement{
		Amount: 1,
	}
}

func (p *TColumnIncrement) GetFamily() []byte {
	return p.Family
}

func (p *TColumnIncrement) GetQualifier() []byte {
	return p.Qualifier
}

var TColumnIncrement_Amount_DEFAULT int64 = 1

func (p *TColumnIncrement) GetAmount() int64 {
	return p.Amount
}
func (p *TColumnIncrement) IsSetAmount() bool {
	return p.Amount != TColumnIncrement_Amount_DEFAULT
}

func (p *TColumnIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumnIncrement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumnIncrement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *TColumnIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return fmt.Errorf("%T.family (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family: %s", p, err)
	}
	return err
}

func (p *TColumnIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Qualifier); err != nil {
		return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
	}
	return err
}

func (p *TColumnIncrement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:amount: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Amount)); err != nil {
			return fmt.Errorf("%T.amount (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:amount: %s", p, err)
		}
	}
	return err
}

func (p *TColumnIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnIncrement(%+v)", *p)
}

type TResult_ struct {
	Row          []byte          `thrift:"row,1" json:"row"`
	ColumnValues []*TColumnValue `thrift:"columnValues,2,required" json:"columnValues"`
}

func NewTResult_() *TResult_ {
	return &TResult_{}
}

var TResult__Row_DEFAULT []byte

func (p *TResult_) GetRow() []byte {
	return p.Row
}

func (p *TResult_) GetColumnValues() []*TColumnValue {
	return p.ColumnValues
}
func (p *TResult_) IsSetRow() bool {
	return p.Row != nil
}

func (p *TResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.ColumnValues = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TColumnValue{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.ColumnValues = append(p.ColumnValues, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRow() {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnValues: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ColumnValues {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnValues: %s", p, err)
	}
	return err
}

func (p *TResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResult_(%+v)", *p)
}

type TAuthorization struct {
	Labels []string `thrift:"labels,1" json:"labels"`
}

func NewTAuthorization() *TAuthorization {
	return &TAuthorization{}
}

var TAuthorization_Labels_DEFAULT []string

func (p *TAuthorization) GetLabels() []string {
	return p.Labels
}
func (p *TAuthorization) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *TAuthorization) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TAuthorization) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Labels = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.Labels = append(p.Labels, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TAuthorization) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAuthorization"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TAuthorization) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err := oprot.WriteFieldBegin("labels", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:labels: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Labels {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:labels: %s", p, err)
		}
	}
	return err
}

func (p *TAuthorization) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAuthorization(%+v)", *p)
}

type TCellVisibility struct {
	Expression *string `thrift:"expression,1" json:"expression"`
}

func NewTCellVisibility() *TCellVisibility {
	return &TCellVisibility{}
}

var TCellVisibility_Expression_DEFAULT string

func (p *TCellVisibility) GetExpression() string {
	if !p.IsSetExpression() {
		return TCellVisibility_Expression_DEFAULT
	}
	return *p.Expression
}
func (p *TCellVisibility) IsSetExpression() bool {
	return p.Expression != nil
}

func (p *TCellVisibility) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TCellVisibility) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Expression = &v
	}
	return nil
}

func (p *TCellVisibility) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCellVisibility"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TCellVisibility) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpression() {
		if err := oprot.WriteFieldBegin("expression", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:expression: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Expression)); err != nil {
			return fmt.Errorf("%T.expression (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:expression: %s", p, err)
		}
	}
	return err
}

func (p *TCellVisibility) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCellVisibility(%+v)", *p)
}

type TGet struct {
	Row            []byte            `thrift:"row,1,required" json:"row"`
	Columns        []*TColumn        `thrift:"columns,2" json:"columns"`
	Timestamp      *int64            `thrift:"timestamp,3" json:"timestamp"`
	TimeRange      *TTimeRange       `thrift:"timeRange,4" json:"timeRange"`
	MaxVersions    *int32            `thrift:"maxVersions,5" json:"maxVersions"`
	FilterString   []byte            `thrift:"filterString,6" json:"filterString"`
	Attributes     map[string][]byte `thrift:"attributes,7" json:"attributes"`
	Authorizations *TAuthorization   `thrift:"authorizations,8" json:"authorizations"`
}

func NewTGet() *TGet {
	return &TGet{}
}

func (p *TGet) GetRow() []byte {
	return p.Row
}

var TGet_Columns_DEFAULT []*TColumn

func (p *TGet) GetColumns() []*TColumn {
	return p.Columns
}

var TGet_Timestamp_DEFAULT int64

func (p *TGet) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TGet_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TGet_TimeRange_DEFAULT *TTimeRange

func (p *TGet) GetTimeRange() *TTimeRange {
	if !p.IsSetTimeRange() {
		return TGet_TimeRange_DEFAULT
	}
	return p.TimeRange
}

var TGet_MaxVersions_DEFAULT int32

func (p *TGet) GetMaxVersions() int32 {
	if !p.IsSetMaxVersions() {
		return TGet_MaxVersions_DEFAULT
	}
	return *p.MaxVersions
}

var TGet_FilterString_DEFAULT []byte

func (p *TGet) GetFilterString() []byte {
	return p.FilterString
}

var TGet_Attributes_DEFAULT map[string][]byte

func (p *TGet) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TGet_Authorizations_DEFAULT *TAuthorization

func (p *TGet) GetAuthorizations() *TAuthorization {
	if !p.IsSetAuthorizations() {
		return TGet_Authorizations_DEFAULT
	}
	return p.Authorizations
}
func (p *TGet) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TGet) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TGet) IsSetTimeRange() bool {
	return p.TimeRange != nil
}

func (p *TGet) IsSetMaxVersions() bool {
	return p.MaxVersions != nil
}

func (p *TGet) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TGet) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TGet) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *TGet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TGet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TGet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TColumn{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.Columns = append(p.Columns, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TGet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TGet) ReadField4(iprot thrift.TProtocol) error {
	p.TimeRange = &TTimeRange{}
	if err := p.TimeRange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TimeRange, err)
	}
	return nil
}

func (p *TGet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxVersions = &v
	}
	return nil
}

func (p *TGet) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.FilterString = v
	}
	return nil
}

func (p *TGet) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		var _val4 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val4 = v
		}
		p.Attributes[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TGet) ReadField8(iprot thrift.TProtocol) error {
	p.Authorizations = &TAuthorization{}
	if err := p.Authorizations.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Authorizations, err)
	}
	return nil
}

func (p *TGet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGet"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TGet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TGet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeRange() {
		if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:timeRange: %s", p, err)
		}
		if err := p.TimeRange.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TimeRange, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:timeRange: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterString() {
		if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:filterString: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FilterString); err != nil {
			return fmt.Errorf("%T.filterString (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:filterString: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:authorizations: %s", p, err)
		}
		if err := p.Authorizations.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Authorizations, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:authorizations: %s", p, err)
		}
	}
	return err
}

func (p *TGet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGet(%+v)", *p)
}

type TPut struct {
	Row          []byte          `thrift:"row,1,required" json:"row"`
	ColumnValues []*TColumnValue `thrift:"columnValues,2,required" json:"columnValues"`
	Timestamp    *int64          `thrift:"timestamp,3" json:"timestamp"`
	// unused field # 4
	Attributes     map[string][]byte `thrift:"attributes,5" json:"attributes"`
	Durability     *TDurability      `thrift:"durability,6" json:"durability"`
	CellVisibility *TCellVisibility  `thrift:"cellVisibility,7" json:"cellVisibility"`
}

func NewTPut() *TPut {
	return &TPut{}
}

func (p *TPut) GetRow() []byte {
	return p.Row
}

func (p *TPut) GetColumnValues() []*TColumnValue {
	return p.ColumnValues
}

var TPut_Timestamp_DEFAULT int64

func (p *TPut) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TPut_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TPut_Attributes_DEFAULT map[string][]byte

func (p *TPut) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TPut_Durability_DEFAULT TDurability

func (p *TPut) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TPut_Durability_DEFAULT
	}
	return *p.Durability
}

var TPut_CellVisibility_DEFAULT *TCellVisibility

func (p *TPut) GetCellVisibility() *TCellVisibility {
	if !p.IsSetCellVisibility() {
		return TPut_CellVisibility_DEFAULT
	}
	return p.CellVisibility
}
func (p *TPut) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TPut) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TPut) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TPut) IsSetCellVisibility() bool {
	return p.CellVisibility != nil
}

func (p *TPut) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TPut) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TPut) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.ColumnValues = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &TColumnValue{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.ColumnValues = append(p.ColumnValues, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TPut) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TPut) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		var _val7 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val7 = v
		}
		p.Attributes[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TPut) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TPut) ReadField7(iprot thrift.TProtocol) error {
	p.CellVisibility = &TCellVisibility{}
	if err := p.CellVisibility.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CellVisibility, err)
	}
	return nil
}

func (p *TPut) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPut"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TPut) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TPut) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnValues: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ColumnValues {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnValues: %s", p, err)
	}
	return err
}

func (p *TPut) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:durability: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellVisibility() {
		if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:cellVisibility: %s", p, err)
		}
		if err := p.CellVisibility.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CellVisibility, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:cellVisibility: %s", p, err)
		}
	}
	return err
}

func (p *TPut) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPut(%+v)", *p)
}

type TDelete struct {
	Row        []byte      `thrift:"row,1,required" json:"row"`
	Columns    []*TColumn  `thrift:"columns,2" json:"columns"`
	Timestamp  *int64      `thrift:"timestamp,3" json:"timestamp"`
	DeleteType TDeleteType `thrift:"deleteType,4" json:"deleteType"`
	// unused field # 5
	Attributes map[string][]byte `thrift:"attributes,6" json:"attributes"`
	Durability *TDurability      `thrift:"durability,7" json:"durability"`
}

func NewTDelete() *TDelete {
	return &TDelete{
		DeleteType: 1,
	}
}

func (p *TDelete) GetRow() []byte {
	return p.Row
}

var TDelete_Columns_DEFAULT []*TColumn

func (p *TDelete) GetColumns() []*TColumn {
	return p.Columns
}

var TDelete_Timestamp_DEFAULT int64

func (p *TDelete) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TDelete_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TDelete_DeleteType_DEFAULT TDeleteType = 1

func (p *TDelete) GetDeleteType() TDeleteType {
	return p.DeleteType
}

var TDelete_Attributes_DEFAULT map[string][]byte

func (p *TDelete) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TDelete_Durability_DEFAULT TDurability

func (p *TDelete) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TDelete_Durability_DEFAULT
	}
	return *p.Durability
}
func (p *TDelete) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TDelete) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TDelete) IsSetDeleteType() bool {
	return p.DeleteType != TDelete_DeleteType_DEFAULT
}

func (p *TDelete) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TDelete) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TDelete) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TDelete) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TDelete) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &TColumn{}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.Columns = append(p.Columns, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TDelete) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TDelete) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := TDeleteType(v)
		p.DeleteType = temp
	}
	return nil
}

func (p *TDelete) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		var _val10 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val10 = v
		}
		p.Attributes[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TDelete) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TDelete) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDelete"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TDelete) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TDelete) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteType() {
		if err := oprot.WriteFieldBegin("deleteType", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deleteType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.DeleteType)); err != nil {
			return fmt.Errorf("%T.deleteType (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deleteType: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:durability: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDelete(%+v)", *p)
}

type TIncrement struct {
	Row     []byte              `thrift:"row,1,required" json:"row"`
	Columns []*TColumnIncrement `thrift:"columns,2,required" json:"columns"`
	// unused field # 3
	Attributes     map[string][]byte `thrift:"attributes,4" json:"attributes"`
	Durability     *TDurability      `thrift:"durability,5" json:"durability"`
	CellVisibility *TCellVisibility  `thrift:"cellVisibility,6" json:"cellVisibility"`
}

func NewTIncrement() *TIncrement {
	return &TIncrement{}
}

func (p *TIncrement) GetRow() []byte {
	return p.Row
}

func (p *TIncrement) GetColumns() []*TColumnIncrement {
	return p.Columns
}

var TIncrement_Attributes_DEFAULT map[string][]byte

func (p *TIncrement) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TIncrement_Durability_DEFAULT TDurability

func (p *TIncrement) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TIncrement_Durability_DEFAULT
	}
	return *p.Durability
}

var TIncrement_CellVisibility_DEFAULT *TCellVisibility

func (p *TIncrement) GetCellVisibility() *TCellVisibility {
	if !p.IsSetCellVisibility() {
		return TIncrement_CellVisibility_DEFAULT
	}
	return p.CellVisibility
}
func (p *TIncrement) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TIncrement) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TIncrement) IsSetCellVisibility() bool {
	return p.CellVisibility != nil
}

func (p *TIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TIncrement) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnIncrement, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &TColumnIncrement{
			Amount: 1,
		}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.Columns = append(p.Columns, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TIncrement) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		p.Attributes[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TIncrement) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TIncrement) ReadField6(iprot thrift.TProtocol) error {
	p.CellVisibility = &TCellVisibility{}
	if err := p.CellVisibility.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CellVisibility, err)
	}
	return nil
}

func (p *TIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
	}
	return err
}

func (p *TIncrement) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:durability: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellVisibility() {
		if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:cellVisibility: %s", p, err)
		}
		if err := p.CellVisibility.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CellVisibility, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:cellVisibility: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIncrement(%+v)", *p)
}

type TAppend struct {
	Row            []byte            `thrift:"row,1,required" json:"row"`
	Columns        []*TColumnValue   `thrift:"columns,2,required" json:"columns"`
	Attributes     map[string][]byte `thrift:"attributes,3" json:"attributes"`
	Durability     *TDurability      `thrift:"durability,4" json:"durability"`
	CellVisibility *TCellVisibility  `thrift:"cellVisibility,5" json:"cellVisibility"`
}

func NewTAppend() *TAppend {
	return &TAppend{}
}

func (p *TAppend) GetRow() []byte {
	return p.Row
}

func (p *TAppend) GetColumns() []*TColumnValue {
	return p.Columns
}

var TAppend_Attributes_DEFAULT map[string][]byte

func (p *TAppend) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TAppend_Durability_DEFAULT TDurability

func (p *TAppend) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TAppend_Durability_DEFAULT
	}
	return *p.Durability
}

var TAppend_CellVisibility_DEFAULT *TCellVisibility

func (p *TAppend) GetCellVisibility() *TCellVisibility {
	if !p.IsSetCellVisibility() {
		return TAppend_CellVisibility_DEFAULT
	}
	return p.CellVisibility
}
func (p *TAppend) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TAppend) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TAppend) IsSetCellVisibility() bool {
	return p.CellVisibility != nil
}

func (p *TAppend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TAppend) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TAppend) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &TColumnValue{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.Columns = append(p.Columns, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TAppend) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key15 = v
		}
		var _val16 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val16 = v
		}
		p.Attributes[_key15] = _val16
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TAppend) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TAppend) ReadField5(iprot thrift.TProtocol) error {
	p.CellVisibility = &TCellVisibility{}
	if err := p.CellVisibility.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CellVisibility, err)
	}
	return nil
}

func (p *TAppend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAppend"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TAppend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TAppend) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
	}
	return err
}

func (p *TAppend) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:durability: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellVisibility() {
		if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:cellVisibility: %s", p, err)
		}
		if err := p.CellVisibility.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CellVisibility, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:cellVisibility: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAppend(%+v)", *p)
}

type TScan struct {
	StartRow       []byte            `thrift:"startRow,1" json:"startRow"`
	StopRow        []byte            `thrift:"stopRow,2" json:"stopRow"`
	Columns        []*TColumn        `thrift:"columns,3" json:"columns"`
	Caching        *int32            `thrift:"caching,4" json:"caching"`
	MaxVersions    int32             `thrift:"maxVersions,5" json:"maxVersions"`
	TimeRange      *TTimeRange       `thrift:"timeRange,6" json:"timeRange"`
	FilterString   []byte            `thrift:"filterString,7" json:"filterString"`
	BatchSize      *int32            `thrift:"batchSize,8" json:"batchSize"`
	Attributes     map[string][]byte `thrift:"attributes,9" json:"attributes"`
	Authorizations *TAuthorization   `thrift:"authorizations,10" json:"authorizations"`
}

func NewTScan() *TScan {
	return &TScan{
		MaxVersions: 1,
	}
}

var TScan_StartRow_DEFAULT []byte

func (p *TScan) GetStartRow() []byte {
	return p.StartRow
}

var TScan_StopRow_DEFAULT []byte

func (p *TScan) GetStopRow() []byte {
	return p.StopRow
}

var TScan_Columns_DEFAULT []*TColumn

func (p *TScan) GetColumns() []*TColumn {
	return p.Columns
}

var TScan_Caching_DEFAULT int32

func (p *TScan) GetCaching() int32 {
	if !p.IsSetCaching() {
		return TScan_Caching_DEFAULT
	}
	return *p.Caching
}

var TScan_MaxVersions_DEFAULT int32 = 1

func (p *TScan) GetMaxVersions() int32 {
	return p.MaxVersions
}

var TScan_TimeRange_DEFAULT *TTimeRange

func (p *TScan) GetTimeRange() *TTimeRange {
	if !p.IsSetTimeRange() {
		return TScan_TimeRange_DEFAULT
	}
	return p.TimeRange
}

var TScan_FilterString_DEFAULT []byte

func (p *TScan) GetFilterString() []byte {
	return p.FilterString
}

var TScan_BatchSize_DEFAULT int32

func (p *TScan) GetBatchSize() int32 {
	if !p.IsSetBatchSize() {
		return TScan_BatchSize_DEFAULT
	}
	return *p.BatchSize
}

var TScan_Attributes_DEFAULT map[string][]byte

func (p *TScan) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TScan_Authorizations_DEFAULT *TAuthorization

func (p *TScan) GetAuthorizations() *TAuthorization {
	if !p.IsSetAuthorizations() {
		return TScan_Authorizations_DEFAULT
	}
	return p.Authorizations
}
func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != nil
}

func (p *TScan) IsSetMaxVersions() bool {
	return p.MaxVersions != TScan_MaxVersions_DEFAULT
}

func (p *TScan) IsSetTimeRange() bool {
	return p.TimeRange != nil
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TScan) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TScan) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TScan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *TScan) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StopRow = v
	}
	return nil
}

func (p *TScan) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &TColumn{}
		if err := _elem17.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem17, err)
		}
		p.Columns = append(p.Columns, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TScan) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Caching = &v
	}
	return nil
}

func (p *TScan) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxVersions = v
	}
	return nil
}

func (p *TScan) ReadField6(iprot thrift.TProtocol) error {
	p.TimeRange = &TTimeRange{}
	if err := p.TimeRange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TimeRange, err)
	}
	return nil
}

func (p *TScan) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.FilterString = v
	}
	return nil
}

func (p *TScan) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.BatchSize = &v
	}
	return nil
}

func (p *TScan) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key18 = v
		}
		var _val19 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val19 = v
		}
		p.Attributes[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TScan) ReadField10(iprot thrift.TProtocol) error {
	p.Authorizations = &TAuthorization{}
	if err := p.Authorizations.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Authorizations, err)
	}
	return nil
}

func (p *TScan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TScan"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartRow() {
		if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:startRow: %s", p, err)
		}
		if err := oprot.WriteBinary(p.StartRow); err != nil {
			return fmt.Errorf("%T.startRow (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:startRow: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopRow() {
		if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:stopRow: %s", p, err)
		}
		if err := oprot.WriteBinary(p.StopRow); err != nil {
			return fmt.Errorf("%T.stopRow (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:stopRow: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:columns: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaching() {
		if err := oprot.WriteFieldBegin("caching", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:caching: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Caching)); err != nil {
			return fmt.Errorf("%T.caching (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:caching: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeRange() {
		if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:timeRange: %s", p, err)
		}
		if err := p.TimeRange.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TimeRange, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:timeRange: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterString() {
		if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:filterString: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FilterString); err != nil {
			return fmt.Errorf("%T.filterString (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:filterString: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err := oprot.WriteFieldBegin("batchSize", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:batchSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BatchSize)); err != nil {
			return fmt.Errorf("%T.batchSize (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:batchSize: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:authorizations: %s", p, err)
		}
		if err := p.Authorizations.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Authorizations, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:authorizations: %s", p, err)
		}
	}
	return err
}

func (p *TScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScan(%+v)", *p)
}

type TMutation struct {
	Put          *TPut    `thrift:"put,1" json:"put"`
	DeleteSingle *TDelete `thrift:"deleteSingle,2" json:"deleteSingle"`
}

func NewTMutation() *TMutation {
	return &TMutation{}
}

var TMutation_Put_DEFAULT *TPut

func (p *TMutation) GetPut() *TPut {
	if !p.IsSetPut() {
		return TMutation_Put_DEFAULT
	}
	return p.Put
}

var TMutation_DeleteSingle_DEFAULT *TDelete

func (p *TMutation) GetDeleteSingle() *TDelete {
	if !p.IsSetDeleteSingle() {
		return TMutation_DeleteSingle_DEFAULT
	}
	return p.DeleteSingle
}
func (p *TMutation) IsSetPut() bool {
	return p.Put != nil
}

func (p *TMutation) IsSetDeleteSingle() bool {
	return p.DeleteSingle != nil
}

func (p *TMutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMutation) ReadField1(iprot thrift.TProtocol) error {
	p.Put = &TPut{}
	if err := p.Put.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Put, err)
	}
	return nil
}

func (p *TMutation) ReadField2(iprot thrift.TProtocol) error {
	p.DeleteSingle = &TDelete{
		DeleteType: 1,
	}
	if err := p.DeleteSingle.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeleteSingle, err)
	}
	return nil
}

func (p *TMutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMutation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TMutation) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPut() {
		if err := oprot.WriteFieldBegin("put", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:put: %s", p, err)
		}
		if err := p.Put.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Put, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:put: %s", p, err)
		}
	}
	return err
}

func (p *TMutation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteSingle() {
		if err := oprot.WriteFieldBegin("deleteSingle", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:deleteSingle: %s", p, err)
		}
		if err := p.DeleteSingle.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.DeleteSingle, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:deleteSingle: %s", p, err)
		}
	}
	return err
}

func (p *TMutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMutation(%+v)", *p)
}

type TRowMutations struct {
	Row       []byte       `thrift:"row,1,required" json:"row"`
	Mutations []*TMutation `thrift:"mutations,2,required" json:"mutations"`
}

func NewTRowMutations() *TRowMutations {
	return &TRowMutations{}
}

func (p *TRowMutations) GetRow() []byte {
	return p.Row
}

func (p *TRowMutations) GetMutations() []*TMutation {
	return p.Mutations
}
func (p *TRowMutations) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TRowMutations) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TRowMutations) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TMutation, 0, size)
	p.Mutations = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &TMutation{}
		if err := _elem20.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem20, err)
		}
		p.Mutations = append(p.Mutations, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TRowMutations) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowMutations"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TRowMutations) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TRowMutations) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mutations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Mutations {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mutations: %s", p, err)
	}
	return err
}

func (p *TRowMutations) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowMutations(%+v)", *p)
}

type TIOError struct {
	Message *string `thrift:"message,1" json:"message"`
}

func NewTIOError() *TIOError {
	return &TIOError{}
}

var TIOError_Message_DEFAULT string

func (p *TIOError) GetMessage() string {
	if !p.IsSetMessage() {
		return TIOError_Message_DEFAULT
	}
	return *p.Message
}
func (p *TIOError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TIOError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIOError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TIOError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIOError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIOError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return fmt.Errorf("%T.message (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:message: %s", p, err)
		}
	}
	return err
}

func (p *TIOError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIOError(%+v)", *p)
}

func (p *TIOError) Error() string {
	return p.String()
}

type TIllegalArgument struct {
	Message *string `thrift:"message,1" json:"message"`
}

func NewTIllegalArgument() *TIllegalArgument {
	return &TIllegalArgument{}
}

var TIllegalArgument_Message_DEFAULT string

func (p *TIllegalArgument) GetMessage() string {
	if !p.IsSetMessage() {
		return TIllegalArgument_Message_DEFAULT
	}
	return *p.Message
}
func (p *TIllegalArgument) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TIllegalArgument) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIllegalArgument) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TIllegalArgument) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIllegalArgument"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIllegalArgument) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return fmt.Errorf("%T.message (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:message: %s", p, err)
		}
	}
	return err
}

func (p *TIllegalArgument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIllegalArgument(%+v)", *p)
}

func (p *TIllegalArgument) Error() string {
	return p.String()
}

type LatestMsgResult_ struct {
	Results      [][][][]string `thrift:"results,1" json:"results"`
	Mintimestamp *int32         `thrift:"mintimestamp,2" json:"mintimestamp"`
	Maxtimestamp *int32         `thrift:"maxtimestamp,3" json:"maxtimestamp"`
	Total        int16          `thrift:"total,4" json:"total"`
}

func NewLatestMsgResult_() *LatestMsgResult_ {
	return &LatestMsgResult_{}
}

var LatestMsgResult__Results_DEFAULT [][][][]string

func (p *LatestMsgResult_) GetResults() [][][][]string {
	return p.Results
}

var LatestMsgResult__Mintimestamp_DEFAULT int32

func (p *LatestMsgResult_) GetMintimestamp() int32 {
	if !p.IsSetMintimestamp() {
		return LatestMsgResult__Mintimestamp_DEFAULT
	}
	return *p.Mintimestamp
}

var LatestMsgResult__Maxtimestamp_DEFAULT int32

func (p *LatestMsgResult_) GetMaxtimestamp() int32 {
	if !p.IsSetMaxtimestamp() {
		return LatestMsgResult__Maxtimestamp_DEFAULT
	}
	return *p.Maxtimestamp
}

var LatestMsgResult__Total_DEFAULT int16 = 0

func (p *LatestMsgResult_) GetTotal() int16 {
	return p.Total
}
func (p *LatestMsgResult_) IsSetResults() bool {
	return p.Results != nil
}

func (p *LatestMsgResult_) IsSetMintimestamp() bool {
	return p.Mintimestamp != nil
}

func (p *LatestMsgResult_) IsSetMaxtimestamp() bool {
	return p.Maxtimestamp != nil
}

func (p *LatestMsgResult_) IsSetTotal() bool {
	return p.Total != LatestMsgResult__Total_DEFAULT
}

func (p *LatestMsgResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LatestMsgResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([][][][]string, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([][][]string, 0, size)
		_elem21 := tSlice
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return fmt.Errorf("error reading list begin: %s", err)
			}
			tSlice := make([][]string, 0, size)
			_elem22 := tSlice
			for i := 0; i < size; i++ {
				_, size, err := iprot.ReadListBegin()
				if err != nil {
					return fmt.Errorf("error reading list begin: %s", err)
				}
				tSlice := make([]string, 0, size)
				_elem23 := tSlice
				for i := 0; i < size; i++ {
					var _elem24 string
					if v, err := iprot.ReadString(); err != nil {
						return fmt.Errorf("error reading field 0: %s", err)
					} else {
						_elem24 = v
					}
					_elem23 = append(_elem23, _elem24)
				}
				if err := iprot.ReadListEnd(); err != nil {
					return fmt.Errorf("error reading list end: %s", err)
				}
				_elem22 = append(_elem22, _elem23)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return fmt.Errorf("error reading list end: %s", err)
			}
			_elem21 = append(_elem21, _elem22)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.Results = append(p.Results, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LatestMsgResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mintimestamp = &v
	}
	return nil
}

func (p *LatestMsgResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Maxtimestamp = &v
	}
	return nil
}

func (p *LatestMsgResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *LatestMsgResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LatestMsgResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LatestMsgResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResults() {
		if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:results: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.Results)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Results {
			if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range v {
				if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
					return fmt.Errorf("error writing list begin: %s", err)
				}
				for _, v := range v {
					if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
						return fmt.Errorf("error writing list begin: %s", err)
					}
					for _, v := range v {
						if err := oprot.WriteString(string(v)); err != nil {
							return fmt.Errorf("%T. (0) field write error: %s", p, err)
						}
					}
					if err := oprot.WriteListEnd(); err != nil {
						return fmt.Errorf("error writing list end: %s", err)
					}
				}
				if err := oprot.WriteListEnd(); err != nil {
					return fmt.Errorf("error writing list end: %s", err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:results: %s", p, err)
		}
	}
	return err
}

func (p *LatestMsgResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMintimestamp() {
		if err := oprot.WriteFieldBegin("mintimestamp", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:mintimestamp: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Mintimestamp)); err != nil {
			return fmt.Errorf("%T.mintimestamp (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:mintimestamp: %s", p, err)
		}
	}
	return err
}

func (p *LatestMsgResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxtimestamp() {
		if err := oprot.WriteFieldBegin("maxtimestamp", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:maxtimestamp: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Maxtimestamp)); err != nil {
			return fmt.Errorf("%T.maxtimestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:maxtimestamp: %s", p, err)
		}
	}
	return err
}

func (p *LatestMsgResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err := oprot.WriteFieldBegin("total", thrift.I16, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:total: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Total)); err != nil {
			return fmt.Errorf("%T.total (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:total: %s", p, err)
		}
	}
	return err
}

func (p *LatestMsgResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LatestMsgResult_(%+v)", *p)
}

type AllMsgResult_ struct {
	Result_      [][]string `thrift:"result,1" json:"result"`
	Maxtimestamp *int32     `thrift:"maxtimestamp,2" json:"maxtimestamp"`
	Total        int16      `thrift:"total,3" json:"total"`
}

func NewAllMsgResult_() *AllMsgResult_ {
	return &AllMsgResult_{}
}

var AllMsgResult__Result__DEFAULT [][]string

func (p *AllMsgResult_) GetResult_() [][]string {
	return p.Result_
}

var AllMsgResult__Maxtimestamp_DEFAULT int32

func (p *AllMsgResult_) GetMaxtimestamp() int32 {
	if !p.IsSetMaxtimestamp() {
		return AllMsgResult__Maxtimestamp_DEFAULT
	}
	return *p.Maxtimestamp
}

var AllMsgResult__Total_DEFAULT int16 = 0

func (p *AllMsgResult_) GetTotal() int16 {
	return p.Total
}
func (p *AllMsgResult_) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *AllMsgResult_) IsSetMaxtimestamp() bool {
	return p.Maxtimestamp != nil
}

func (p *AllMsgResult_) IsSetTotal() bool {
	return p.Total != AllMsgResult__Total_DEFAULT
}

func (p *AllMsgResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AllMsgResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([][]string, 0, size)
	p.Result_ = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]string, 0, size)
		_elem25 := tSlice
		for i := 0; i < size; i++ {
			var _elem26 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_elem26 = v
			}
			_elem25 = append(_elem25, _elem26)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.Result_ = append(p.Result_, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AllMsgResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Maxtimestamp = &v
	}
	return nil
}

func (p *AllMsgResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *AllMsgResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AllMsgResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AllMsgResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:result: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.Result_)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Result_ {
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:result: %s", p, err)
		}
	}
	return err
}

func (p *AllMsgResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxtimestamp() {
		if err := oprot.WriteFieldBegin("maxtimestamp", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:maxtimestamp: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Maxtimestamp)); err != nil {
			return fmt.Errorf("%T.maxtimestamp (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:maxtimestamp: %s", p, err)
		}
	}
	return err
}

func (p *AllMsgResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err := oprot.WriteFieldBegin("total", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:total: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Total)); err != nil {
			return fmt.Errorf("%T.total (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:total: %s", p, err)
		}
	}
	return err
}

func (p *AllMsgResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AllMsgResult_(%+v)", *p)
}

type OffLineMsgResult_ struct {
	Results       [][][][]string `thrift:"results,1" json:"results"`
	Lasttimestamp *int32         `thrift:"lasttimestamp,2" json:"lasttimestamp"`
	Total         int16          `thrift:"total,3" json:"total"`
}

func NewOffLineMsgResult_() *OffLineMsgResult_ {
	return &OffLineMsgResult_{}
}

var OffLineMsgResult__Results_DEFAULT [][][][]string

func (p *OffLineMsgResult_) GetResults() [][][][]string {
	return p.Results
}

var OffLineMsgResult__Lasttimestamp_DEFAULT int32

func (p *OffLineMsgResult_) GetLasttimestamp() int32 {
	if !p.IsSetLasttimestamp() {
		return OffLineMsgResult__Lasttimestamp_DEFAULT
	}
	return *p.Lasttimestamp
}

var OffLineMsgResult__Total_DEFAULT int16 = 0

func (p *OffLineMsgResult_) GetTotal() int16 {
	return p.Total
}
func (p *OffLineMsgResult_) IsSetResults() bool {
	return p.Results != nil
}

func (p *OffLineMsgResult_) IsSetLasttimestamp() bool {
	return p.Lasttimestamp != nil
}

func (p *OffLineMsgResult_) IsSetTotal() bool {
	return p.Total != OffLineMsgResult__Total_DEFAULT
}

func (p *OffLineMsgResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OffLineMsgResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([][][][]string, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([][][]string, 0, size)
		_elem27 := tSlice
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return fmt.Errorf("error reading list begin: %s", err)
			}
			tSlice := make([][]string, 0, size)
			_elem28 := tSlice
			for i := 0; i < size; i++ {
				_, size, err := iprot.ReadListBegin()
				if err != nil {
					return fmt.Errorf("error reading list begin: %s", err)
				}
				tSlice := make([]string, 0, size)
				_elem29 := tSlice
				for i := 0; i < size; i++ {
					var _elem30 string
					if v, err := iprot.ReadString(); err != nil {
						return fmt.Errorf("error reading field 0: %s", err)
					} else {
						_elem30 = v
					}
					_elem29 = append(_elem29, _elem30)
				}
				if err := iprot.ReadListEnd(); err != nil {
					return fmt.Errorf("error reading list end: %s", err)
				}
				_elem28 = append(_elem28, _elem29)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return fmt.Errorf("error reading list end: %s", err)
			}
			_elem27 = append(_elem27, _elem28)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.Results = append(p.Results, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *OffLineMsgResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Lasttimestamp = &v
	}
	return nil
}

func (p *OffLineMsgResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *OffLineMsgResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OffLineMsgResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OffLineMsgResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResults() {
		if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:results: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.Results)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Results {
			if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range v {
				if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
					return fmt.Errorf("error writing list begin: %s", err)
				}
				for _, v := range v {
					if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
						return fmt.Errorf("error writing list begin: %s", err)
					}
					for _, v := range v {
						if err := oprot.WriteString(string(v)); err != nil {
							return fmt.Errorf("%T. (0) field write error: %s", p, err)
						}
					}
					if err := oprot.WriteListEnd(); err != nil {
						return fmt.Errorf("error writing list end: %s", err)
					}
				}
				if err := oprot.WriteListEnd(); err != nil {
					return fmt.Errorf("error writing list end: %s", err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:results: %s", p, err)
		}
	}
	return err
}

func (p *OffLineMsgResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLasttimestamp() {
		if err := oprot.WriteFieldBegin("lasttimestamp", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:lasttimestamp: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Lasttimestamp)); err != nil {
			return fmt.Errorf("%T.lasttimestamp (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:lasttimestamp: %s", p, err)
		}
	}
	return err
}

func (p *OffLineMsgResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err := oprot.WriteFieldBegin("total", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:total: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Total)); err != nil {
			return fmt.Errorf("%T.total (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:total: %s", p, err)
		}
	}
	return err
}

func (p *OffLineMsgResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OffLineMsgResult_(%+v)", *p)
}
